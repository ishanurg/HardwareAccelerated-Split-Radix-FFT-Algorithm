// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_sr_fft_Pipeline_VITIS_LOOP_329_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0,
        output_7_address0,
        output_7_ce0,
        output_7_we0,
        output_7_d0,
        output_6_address0,
        output_6_ce0,
        output_6_we0,
        output_6_d0,
        output_5_address0,
        output_5_ce0,
        output_5_we0,
        output_5_d0,
        output_4_address0,
        output_4_ce0,
        output_4_we0,
        output_4_d0,
        output_3_address0,
        output_3_ce0,
        output_3_we0,
        output_3_d0,
        output_2_address0,
        output_2_ce0,
        output_2_we0,
        output_2_d0,
        output_1_address0,
        output_1_ce0,
        output_1_we0,
        output_1_d0,
        X_real_0_address0,
        X_real_0_ce0,
        X_real_0_q0,
        X_real_1_address0,
        X_real_1_ce0,
        X_real_1_q0,
        X_real_2_address0,
        X_real_2_ce0,
        X_real_2_q0,
        X_real_3_address0,
        X_real_3_ce0,
        X_real_3_q0,
        X_real_4_address0,
        X_real_4_ce0,
        X_real_4_q0,
        X_real_5_address0,
        X_real_5_ce0,
        X_real_5_q0,
        X_real_6_address0,
        X_real_6_ce0,
        X_real_6_q0,
        X_real_7_address0,
        X_real_7_ce0,
        X_real_7_q0,
        X_imag_0_address0,
        X_imag_0_ce0,
        X_imag_0_q0,
        X_imag_1_address0,
        X_imag_1_ce0,
        X_imag_1_q0,
        X_imag_2_address0,
        X_imag_2_ce0,
        X_imag_2_q0,
        X_imag_3_address0,
        X_imag_3_ce0,
        X_imag_3_q0,
        X_imag_4_address0,
        X_imag_4_ce0,
        X_imag_4_q0,
        X_imag_5_address0,
        X_imag_5_ce0,
        X_imag_5_q0,
        X_imag_6_address0,
        X_imag_6_ce0,
        X_imag_6_q0,
        X_imag_7_address0,
        X_imag_7_ce0,
        X_imag_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] output_0_address0;
output   output_0_ce0;
output  [7:0] output_0_we0;
output  [63:0] output_0_d0;
output  [2:0] output_7_address0;
output   output_7_ce0;
output   output_7_we0;
output  [63:0] output_7_d0;
output  [2:0] output_6_address0;
output   output_6_ce0;
output  [7:0] output_6_we0;
output  [63:0] output_6_d0;
output  [2:0] output_5_address0;
output   output_5_ce0;
output  [7:0] output_5_we0;
output  [63:0] output_5_d0;
output  [2:0] output_4_address0;
output   output_4_ce0;
output  [7:0] output_4_we0;
output  [63:0] output_4_d0;
output  [2:0] output_3_address0;
output   output_3_ce0;
output  [7:0] output_3_we0;
output  [63:0] output_3_d0;
output  [2:0] output_2_address0;
output   output_2_ce0;
output  [7:0] output_2_we0;
output  [63:0] output_2_d0;
output  [2:0] output_1_address0;
output   output_1_ce0;
output  [7:0] output_1_we0;
output  [63:0] output_1_d0;
output  [2:0] X_real_0_address0;
output   X_real_0_ce0;
input  [31:0] X_real_0_q0;
output  [2:0] X_real_1_address0;
output   X_real_1_ce0;
input  [31:0] X_real_1_q0;
output  [2:0] X_real_2_address0;
output   X_real_2_ce0;
input  [31:0] X_real_2_q0;
output  [2:0] X_real_3_address0;
output   X_real_3_ce0;
input  [31:0] X_real_3_q0;
output  [2:0] X_real_4_address0;
output   X_real_4_ce0;
input  [31:0] X_real_4_q0;
output  [2:0] X_real_5_address0;
output   X_real_5_ce0;
input  [31:0] X_real_5_q0;
output  [2:0] X_real_6_address0;
output   X_real_6_ce0;
input  [31:0] X_real_6_q0;
output  [2:0] X_real_7_address0;
output   X_real_7_ce0;
input  [31:0] X_real_7_q0;
output  [2:0] X_imag_0_address0;
output   X_imag_0_ce0;
input  [31:0] X_imag_0_q0;
output  [2:0] X_imag_1_address0;
output   X_imag_1_ce0;
input  [31:0] X_imag_1_q0;
output  [2:0] X_imag_2_address0;
output   X_imag_2_ce0;
input  [31:0] X_imag_2_q0;
output  [2:0] X_imag_3_address0;
output   X_imag_3_ce0;
input  [31:0] X_imag_3_q0;
output  [2:0] X_imag_4_address0;
output   X_imag_4_ce0;
input  [31:0] X_imag_4_q0;
output  [2:0] X_imag_5_address0;
output   X_imag_5_ce0;
input  [31:0] X_imag_5_q0;
output  [2:0] X_imag_6_address0;
output   X_imag_6_ce0;
input  [31:0] X_imag_6_q0;
output  [2:0] X_imag_7_address0;
output   X_imag_7_ce0;
input  [31:0] X_imag_7_q0;

reg ap_idle;
reg output_0_ce0;
reg[7:0] output_0_we0;
reg output_7_ce0;
reg output_7_we0;
reg output_6_ce0;
reg[7:0] output_6_we0;
reg output_5_ce0;
reg[7:0] output_5_we0;
reg output_4_ce0;
reg[7:0] output_4_we0;
reg output_3_ce0;
reg[7:0] output_3_we0;
reg output_2_ce0;
reg[7:0] output_2_we0;
reg output_1_ce0;
reg[7:0] output_1_we0;
reg X_real_0_ce0;
reg X_real_1_ce0;
reg X_real_2_ce0;
reg X_real_3_ce0;
reg X_real_4_ce0;
reg X_real_5_ce0;
reg X_real_6_ce0;
reg X_real_7_ce0;
reg X_imag_0_ce0;
reg X_imag_1_ce0;
reg X_imag_2_ce0;
reg X_imag_3_ce0;
reg X_imag_4_ce0;
reg X_imag_5_ce0;
reg X_imag_6_ce0;
reg X_imag_7_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln329_fu_435_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln329_reg_550;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] add_ln329_fu_441_p2;
reg   [6:0] add_ln329_reg_554;
wire   [63:0] zext_ln331_fu_451_p1;
reg   [63:0] zext_ln331_reg_559;
reg   [2:0] trunc_ln3_reg_651;
wire   [63:0] or_ln331_2_fu_523_p3;
wire    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [6:0] i_fu_118;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
wire   [2:0] trunc_ln329_fu_447_p1;
wire   [31:0] tmp_3_fu_502_p10;
wire   [31:0] tmp_2_fu_481_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U610(
    .din0(X_real_0_q0),
    .din1(X_real_1_q0),
    .din2(X_real_2_q0),
    .din3(X_real_3_q0),
    .din4(X_real_4_q0),
    .din5(X_real_5_q0),
    .din6(X_real_6_q0),
    .din7(X_real_7_q0),
    .din8(trunc_ln3_reg_651),
    .dout(tmp_2_fu_481_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U611(
    .din0(X_imag_0_q0),
    .din1(X_imag_1_q0),
    .din2(X_imag_2_q0),
    .din3(X_imag_3_q0),
    .din4(X_imag_4_q0),
    .din5(X_imag_5_q0),
    .din6(X_imag_6_q0),
    .din7(X_imag_7_q0),
    .din8(trunc_ln3_reg_651),
    .dout(tmp_3_fu_502_p10)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_118 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_118 <= add_ln329_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln329_reg_554 <= add_ln329_fu_441_p2;
        icmp_ln329_reg_550 <= icmp_ln329_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln329_fu_435_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln3_reg_651 <= {{ap_sig_allocacmp_i_1[5:3]}};
        zext_ln331_reg_559[2 : 0] <= zext_ln331_fu_451_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_0_ce0 = 1'b1;
    end else begin
        X_imag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_1_ce0 = 1'b1;
    end else begin
        X_imag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_2_ce0 = 1'b1;
    end else begin
        X_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_3_ce0 = 1'b1;
    end else begin
        X_imag_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_4_ce0 = 1'b1;
    end else begin
        X_imag_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_5_ce0 = 1'b1;
    end else begin
        X_imag_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_6_ce0 = 1'b1;
    end else begin
        X_imag_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_imag_7_ce0 = 1'b1;
    end else begin
        X_imag_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_0_ce0 = 1'b1;
    end else begin
        X_real_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_1_ce0 = 1'b1;
    end else begin
        X_real_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_2_ce0 = 1'b1;
    end else begin
        X_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_3_ce0 = 1'b1;
    end else begin
        X_real_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_4_ce0 = 1'b1;
    end else begin
        X_real_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_5_ce0 = 1'b1;
    end else begin
        X_real_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_6_ce0 = 1'b1;
    end else begin
        X_real_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_real_7_ce0 = 1'b1;
    end else begin
        X_real_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln329_fu_435_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_118;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_0_we0 = 8'd255;
    end else begin
        output_0_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_1_ce0 = 1'b1;
    end else begin
        output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_1_we0 = 8'd255;
    end else begin
        output_1_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_2_ce0 = 1'b1;
    end else begin
        output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_2_we0 = 8'd255;
    end else begin
        output_2_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_3_ce0 = 1'b1;
    end else begin
        output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_3_we0 = 8'd255;
    end else begin
        output_3_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_4_ce0 = 1'b1;
    end else begin
        output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_4_we0 = 8'd255;
    end else begin
        output_4_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_5_ce0 = 1'b1;
    end else begin
        output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_5_we0 = 8'd255;
    end else begin
        output_5_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_6_ce0 = 1'b1;
    end else begin
        output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_6_we0 = 8'd255;
    end else begin
        output_6_we0 = 8'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_7_ce0 = 1'b1;
    end else begin
        output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (trunc_ln3_reg_651 == 3'd7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_7_we0 = 1'b1;
    end else begin
        output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_imag_0_address0 = zext_ln331_fu_451_p1;

assign X_imag_1_address0 = zext_ln331_fu_451_p1;

assign X_imag_2_address0 = zext_ln331_fu_451_p1;

assign X_imag_3_address0 = zext_ln331_fu_451_p1;

assign X_imag_4_address0 = zext_ln331_fu_451_p1;

assign X_imag_5_address0 = zext_ln331_fu_451_p1;

assign X_imag_6_address0 = zext_ln331_fu_451_p1;

assign X_imag_7_address0 = zext_ln331_fu_451_p1;

assign X_real_0_address0 = zext_ln331_fu_451_p1;

assign X_real_1_address0 = zext_ln331_fu_451_p1;

assign X_real_2_address0 = zext_ln331_fu_451_p1;

assign X_real_3_address0 = zext_ln331_fu_451_p1;

assign X_real_4_address0 = zext_ln331_fu_451_p1;

assign X_real_5_address0 = zext_ln331_fu_451_p1;

assign X_real_6_address0 = zext_ln331_fu_451_p1;

assign X_real_7_address0 = zext_ln331_fu_451_p1;

assign add_ln329_fu_441_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln329_fu_435_p2 = ((ap_sig_allocacmp_i_1 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln331_2_fu_523_p3 = {{tmp_3_fu_502_p10}, {tmp_2_fu_481_p10}};

assign output_0_address0 = zext_ln331_reg_559;

assign output_0_d0 = or_ln331_2_fu_523_p3;

assign output_1_address0 = zext_ln331_reg_559;

assign output_1_d0 = or_ln331_2_fu_523_p3;

assign output_2_address0 = zext_ln331_reg_559;

assign output_2_d0 = or_ln331_2_fu_523_p3;

assign output_3_address0 = zext_ln331_reg_559;

assign output_3_d0 = or_ln331_2_fu_523_p3;

assign output_4_address0 = zext_ln331_reg_559;

assign output_4_d0 = or_ln331_2_fu_523_p3;

assign output_5_address0 = zext_ln331_reg_559;

assign output_5_d0 = or_ln331_2_fu_523_p3;

assign output_6_address0 = zext_ln331_reg_559;

assign output_6_d0 = or_ln331_2_fu_523_p3;

assign output_7_address0 = zext_ln331_reg_559;

assign output_7_d0 = or_ln331_2_fu_523_p3;

assign trunc_ln329_fu_447_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln331_fu_451_p1 = trunc_ln329_fu_447_p1;

always @ (posedge ap_clk) begin
    zext_ln331_reg_559[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //sr_fft_sr_fft_Pipeline_VITIS_LOOP_329_2
