// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_32pt_Pipeline_VITIS_LOOP_120_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_in_imag_V_10_address0,
        e_in_imag_V_10_ce0,
        e_in_imag_V_10_we0,
        e_in_imag_V_10_d0,
        e_in_imag_V_9_address0,
        e_in_imag_V_9_ce0,
        e_in_imag_V_9_we0,
        e_in_imag_V_9_d0,
        e_in_real_V_10_address0,
        e_in_real_V_10_ce0,
        e_in_real_V_10_we0,
        e_in_real_V_10_d0,
        e_in_real_V_9_address0,
        e_in_real_V_9_ce0,
        e_in_real_V_9_we0,
        e_in_real_V_9_d0,
        o1_in_real_V_address0,
        o1_in_real_V_ce0,
        o1_in_real_V_q0,
        o1_in_real_V_4_address0,
        o1_in_real_V_4_ce0,
        o1_in_real_V_4_q0,
        o1_in_imag_V_address0,
        o1_in_imag_V_ce0,
        o1_in_imag_V_q0,
        o1_in_imag_V_4_address0,
        o1_in_imag_V_4_ce0,
        o1_in_imag_V_4_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] e_in_imag_V_10_address0;
output   e_in_imag_V_10_ce0;
output   e_in_imag_V_10_we0;
output  [31:0] e_in_imag_V_10_d0;
output  [0:0] e_in_imag_V_9_address0;
output   e_in_imag_V_9_ce0;
output   e_in_imag_V_9_we0;
output  [31:0] e_in_imag_V_9_d0;
output  [0:0] e_in_real_V_10_address0;
output   e_in_real_V_10_ce0;
output   e_in_real_V_10_we0;
output  [31:0] e_in_real_V_10_d0;
output  [0:0] e_in_real_V_9_address0;
output   e_in_real_V_9_ce0;
output   e_in_real_V_9_we0;
output  [31:0] e_in_real_V_9_d0;
output  [1:0] o1_in_real_V_address0;
output   o1_in_real_V_ce0;
input  [31:0] o1_in_real_V_q0;
output  [1:0] o1_in_real_V_4_address0;
output   o1_in_real_V_4_ce0;
input  [31:0] o1_in_real_V_4_q0;
output  [1:0] o1_in_imag_V_address0;
output   o1_in_imag_V_ce0;
input  [31:0] o1_in_imag_V_q0;
output  [1:0] o1_in_imag_V_4_address0;
output   o1_in_imag_V_4_ce0;
input  [31:0] o1_in_imag_V_4_q0;

reg ap_idle;
reg e_in_imag_V_10_ce0;
reg e_in_imag_V_10_we0;
reg e_in_imag_V_9_ce0;
reg e_in_imag_V_9_we0;
reg e_in_real_V_10_ce0;
reg e_in_real_V_10_we0;
reg e_in_real_V_9_ce0;
reg e_in_real_V_9_we0;
reg o1_in_real_V_ce0;
reg o1_in_real_V_4_ce0;
reg o1_in_imag_V_ce0;
reg o1_in_imag_V_4_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] trunc_ln122_fu_176_p1;
reg   [0:0] trunc_ln122_reg_248;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_252;
wire   [63:0] zext_ln122_1_fu_196_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln122_fu_209_p1;
reg   [2:0] i_4_fu_48;
wire   [2:0] add_ln120_fu_170_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
wire   [31:0] tmp_s_fu_216_p4;
wire   [31:0] tmp_9_fu_227_p4;
wire   [1:0] shl_ln3_fu_180_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U287(
    .din0(o1_in_real_V_q0),
    .din1(o1_in_real_V_4_q0),
    .din2(tmp_reg_252),
    .dout(tmp_s_fu_216_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U288(
    .din0(o1_in_imag_V_q0),
    .din1(o1_in_imag_V_4_q0),
    .din2(tmp_reg_252),
    .dout(tmp_9_fu_227_p4)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln120_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_4_fu_48 <= add_ln120_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_48 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_164_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_252 <= ap_sig_allocacmp_i[32'd1];
        trunc_ln122_reg_248 <= trunc_ln122_fu_176_p1;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_imag_V_10_ce0 = 1'b1;
    end else begin
        e_in_imag_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln122_reg_248 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_imag_V_10_we0 = 1'b1;
    end else begin
        e_in_imag_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_imag_V_9_ce0 = 1'b1;
    end else begin
        e_in_imag_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln122_reg_248 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_imag_V_9_we0 = 1'b1;
    end else begin
        e_in_imag_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_real_V_10_ce0 = 1'b1;
    end else begin
        e_in_real_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln122_reg_248 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_real_V_10_we0 = 1'b1;
    end else begin
        e_in_real_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_real_V_9_ce0 = 1'b1;
    end else begin
        e_in_real_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln122_reg_248 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_in_real_V_9_we0 = 1'b1;
    end else begin
        e_in_real_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_in_imag_V_4_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_in_imag_V_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_in_real_V_4_ce0 = 1'b1;
    end else begin
        o1_in_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_in_real_V_ce0 = 1'b1;
    end else begin
        o1_in_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln120_fu_170_p2 = (ap_sig_allocacmp_i + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign e_in_imag_V_10_address0 = zext_ln122_fu_209_p1;

assign e_in_imag_V_10_d0 = tmp_9_fu_227_p4;

assign e_in_imag_V_9_address0 = zext_ln122_fu_209_p1;

assign e_in_imag_V_9_d0 = tmp_9_fu_227_p4;

assign e_in_real_V_10_address0 = zext_ln122_fu_209_p1;

assign e_in_real_V_10_d0 = tmp_s_fu_216_p4;

assign e_in_real_V_9_address0 = zext_ln122_fu_209_p1;

assign e_in_real_V_9_d0 = tmp_s_fu_216_p4;

assign icmp_ln120_fu_164_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign o1_in_imag_V_4_address0 = zext_ln122_1_fu_196_p1;

assign o1_in_imag_V_address0 = zext_ln122_1_fu_196_p1;

assign o1_in_real_V_4_address0 = zext_ln122_1_fu_196_p1;

assign o1_in_real_V_address0 = zext_ln122_1_fu_196_p1;

assign shl_ln3_fu_180_p3 = {{trunc_ln122_fu_176_p1}, {1'd0}};

assign trunc_ln122_fu_176_p1 = ap_sig_allocacmp_i[0:0];

assign zext_ln122_1_fu_196_p1 = shl_ln3_fu_180_p3;

assign zext_ln122_fu_209_p1 = tmp_reg_252;

endmodule //sr_fft_fft_32pt_Pipeline_VITIS_LOOP_120_1
