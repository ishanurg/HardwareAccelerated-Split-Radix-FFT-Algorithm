// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_32pt_Pipeline_VITIS_LOOP_231_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_out_real_V_9_address0,
        e_out_real_V_9_ce0,
        e_out_real_V_9_q0,
        e_out_real_V_10_address0,
        e_out_real_V_10_ce0,
        e_out_real_V_10_q0,
        e_out_imag_V_9_address0,
        e_out_imag_V_9_ce0,
        e_out_imag_V_9_q0,
        e_out_imag_V_10_address0,
        e_out_imag_V_10_ce0,
        e_out_imag_V_10_q0,
        out_real_2_address0,
        out_real_2_ce0,
        out_real_2_we0,
        out_real_2_d0,
        out_real_3_address0,
        out_real_3_ce0,
        out_real_3_we0,
        out_real_3_d0,
        out_imag_2_address0,
        out_imag_2_ce0,
        out_imag_2_we0,
        out_imag_2_d0,
        out_imag_3_address0,
        out_imag_3_ce0,
        out_imag_3_we0,
        out_imag_3_d0,
        out_real_4_address0,
        out_real_4_ce0,
        out_real_4_we0,
        out_real_4_d0,
        out_imag_4_address0,
        out_imag_4_ce0,
        out_imag_4_we0,
        out_imag_4_d0,
        out_imag_5_address0,
        out_imag_5_ce0,
        out_imag_5_we0,
        out_imag_5_d0,
        out_real_6_address0,
        out_real_6_ce0,
        out_real_6_we0,
        out_real_6_d0,
        out_imag_6_address0,
        out_imag_6_ce0,
        out_imag_6_we0,
        out_imag_6_d0,
        out_imag_7_address0,
        out_imag_7_ce0,
        out_imag_7_we0,
        out_imag_7_d0,
        out_imag_1_address0,
        out_imag_1_ce0,
        out_imag_1_we0,
        out_imag_1_d0,
        out_imag_0_address0,
        out_imag_0_ce0,
        out_imag_0_we0,
        out_imag_0_d0,
        out_real_7_address0,
        out_real_7_ce0,
        out_real_7_we0,
        out_real_7_d0,
        out_real_5_address0,
        out_real_5_ce0,
        out_real_5_we0,
        out_real_5_d0,
        out_real_1_address0,
        out_real_1_ce0,
        out_real_1_we0,
        out_real_1_d0,
        out_real_0_address0,
        out_real_0_ce0,
        out_real_0_we0,
        out_real_0_d0,
        o1_out_real_V_address0,
        o1_out_real_V_ce0,
        o1_out_real_V_q0,
        o1_out_real_V_4_address0,
        o1_out_real_V_4_ce0,
        o1_out_real_V_4_q0,
        o1_out_imag_V_address0,
        o1_out_imag_V_ce0,
        o1_out_imag_V_q0,
        o1_out_imag_V_4_address0,
        o1_out_imag_V_4_ce0,
        o1_out_imag_V_4_q0,
        o2_out_real_V_address0,
        o2_out_real_V_ce0,
        o2_out_real_V_q0,
        o2_out_real_V_4_address0,
        o2_out_real_V_4_ce0,
        o2_out_real_V_4_q0,
        o2_out_imag_V_address0,
        o2_out_imag_V_ce0,
        o2_out_imag_V_q0,
        o2_out_imag_V_4_address0,
        o2_out_imag_V_4_ce0,
        o2_out_imag_V_4_q0,
        e_out_real_V_address0,
        e_out_real_V_ce0,
        e_out_real_V_q0,
        e_out_real_V_8_address0,
        e_out_real_V_8_ce0,
        e_out_real_V_8_q0,
        e_out_imag_V_address0,
        e_out_imag_V_ce0,
        e_out_imag_V_q0,
        e_out_imag_V_8_address0,
        e_out_imag_V_8_ce0,
        e_out_imag_V_8_q0,
        grp_fu_2426_p_din0,
        grp_fu_2426_p_din1,
        grp_fu_2426_p_dout0,
        grp_fu_2426_p_ce,
        grp_fu_2430_p_din0,
        grp_fu_2430_p_din1,
        grp_fu_2430_p_dout0,
        grp_fu_2430_p_ce,
        grp_fu_2434_p_din0,
        grp_fu_2434_p_din1,
        grp_fu_2434_p_dout0,
        grp_fu_2434_p_ce,
        grp_fu_2438_p_din0,
        grp_fu_2438_p_din1,
        grp_fu_2438_p_dout0,
        grp_fu_2438_p_ce,
        grp_fu_2442_p_din0,
        grp_fu_2442_p_din1,
        grp_fu_2442_p_dout0,
        grp_fu_2442_p_ce,
        grp_fu_2446_p_din0,
        grp_fu_2446_p_din1,
        grp_fu_2446_p_dout0,
        grp_fu_2446_p_ce,
        grp_fu_2450_p_din0,
        grp_fu_2450_p_din1,
        grp_fu_2450_p_dout0,
        grp_fu_2450_p_ce,
        grp_fu_2454_p_din0,
        grp_fu_2454_p_din1,
        grp_fu_2454_p_dout0,
        grp_fu_2454_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] e_out_real_V_9_address0;
output   e_out_real_V_9_ce0;
input  [31:0] e_out_real_V_9_q0;
output  [1:0] e_out_real_V_10_address0;
output   e_out_real_V_10_ce0;
input  [31:0] e_out_real_V_10_q0;
output  [1:0] e_out_imag_V_9_address0;
output   e_out_imag_V_9_ce0;
input  [31:0] e_out_imag_V_9_q0;
output  [1:0] e_out_imag_V_10_address0;
output   e_out_imag_V_10_ce0;
input  [31:0] e_out_imag_V_10_q0;
output  [1:0] out_real_2_address0;
output   out_real_2_ce0;
output   out_real_2_we0;
output  [31:0] out_real_2_d0;
output  [1:0] out_real_3_address0;
output   out_real_3_ce0;
output   out_real_3_we0;
output  [31:0] out_real_3_d0;
output  [1:0] out_imag_2_address0;
output   out_imag_2_ce0;
output   out_imag_2_we0;
output  [31:0] out_imag_2_d0;
output  [1:0] out_imag_3_address0;
output   out_imag_3_ce0;
output   out_imag_3_we0;
output  [31:0] out_imag_3_d0;
output  [1:0] out_real_4_address0;
output   out_real_4_ce0;
output   out_real_4_we0;
output  [31:0] out_real_4_d0;
output  [1:0] out_imag_4_address0;
output   out_imag_4_ce0;
output   out_imag_4_we0;
output  [31:0] out_imag_4_d0;
output  [1:0] out_imag_5_address0;
output   out_imag_5_ce0;
output   out_imag_5_we0;
output  [31:0] out_imag_5_d0;
output  [1:0] out_real_6_address0;
output   out_real_6_ce0;
output   out_real_6_we0;
output  [31:0] out_real_6_d0;
output  [1:0] out_imag_6_address0;
output   out_imag_6_ce0;
output   out_imag_6_we0;
output  [31:0] out_imag_6_d0;
output  [1:0] out_imag_7_address0;
output   out_imag_7_ce0;
output   out_imag_7_we0;
output  [31:0] out_imag_7_d0;
output  [1:0] out_imag_1_address0;
output   out_imag_1_ce0;
output   out_imag_1_we0;
output  [31:0] out_imag_1_d0;
output  [1:0] out_imag_0_address0;
output   out_imag_0_ce0;
output   out_imag_0_we0;
output  [31:0] out_imag_0_d0;
output  [1:0] out_real_7_address0;
output   out_real_7_ce0;
output   out_real_7_we0;
output  [31:0] out_real_7_d0;
output  [1:0] out_real_5_address0;
output   out_real_5_ce0;
output   out_real_5_we0;
output  [31:0] out_real_5_d0;
output  [1:0] out_real_1_address0;
output   out_real_1_ce0;
output   out_real_1_we0;
output  [31:0] out_real_1_d0;
output  [1:0] out_real_0_address0;
output   out_real_0_ce0;
output   out_real_0_we0;
output  [31:0] out_real_0_d0;
output  [1:0] o1_out_real_V_address0;
output   o1_out_real_V_ce0;
input  [31:0] o1_out_real_V_q0;
output  [1:0] o1_out_real_V_4_address0;
output   o1_out_real_V_4_ce0;
input  [31:0] o1_out_real_V_4_q0;
output  [1:0] o1_out_imag_V_address0;
output   o1_out_imag_V_ce0;
input  [31:0] o1_out_imag_V_q0;
output  [1:0] o1_out_imag_V_4_address0;
output   o1_out_imag_V_4_ce0;
input  [31:0] o1_out_imag_V_4_q0;
output  [1:0] o2_out_real_V_address0;
output   o2_out_real_V_ce0;
input  [31:0] o2_out_real_V_q0;
output  [1:0] o2_out_real_V_4_address0;
output   o2_out_real_V_4_ce0;
input  [31:0] o2_out_real_V_4_q0;
output  [1:0] o2_out_imag_V_address0;
output   o2_out_imag_V_ce0;
input  [31:0] o2_out_imag_V_q0;
output  [1:0] o2_out_imag_V_4_address0;
output   o2_out_imag_V_4_ce0;
input  [31:0] o2_out_imag_V_4_q0;
output  [1:0] e_out_real_V_address0;
output   e_out_real_V_ce0;
input  [31:0] e_out_real_V_q0;
output  [1:0] e_out_real_V_8_address0;
output   e_out_real_V_8_ce0;
input  [31:0] e_out_real_V_8_q0;
output  [1:0] e_out_imag_V_address0;
output   e_out_imag_V_ce0;
input  [31:0] e_out_imag_V_q0;
output  [1:0] e_out_imag_V_8_address0;
output   e_out_imag_V_8_ce0;
input  [31:0] e_out_imag_V_8_q0;
output  [31:0] grp_fu_2426_p_din0;
output  [17:0] grp_fu_2426_p_din1;
input  [47:0] grp_fu_2426_p_dout0;
output   grp_fu_2426_p_ce;
output  [31:0] grp_fu_2430_p_din0;
output  [17:0] grp_fu_2430_p_din1;
input  [47:0] grp_fu_2430_p_dout0;
output   grp_fu_2430_p_ce;
output  [31:0] grp_fu_2434_p_din0;
output  [17:0] grp_fu_2434_p_din1;
input  [47:0] grp_fu_2434_p_dout0;
output   grp_fu_2434_p_ce;
output  [31:0] grp_fu_2438_p_din0;
output  [17:0] grp_fu_2438_p_din1;
input  [47:0] grp_fu_2438_p_dout0;
output   grp_fu_2438_p_ce;
output  [31:0] grp_fu_2442_p_din0;
output  [17:0] grp_fu_2442_p_din1;
input  [47:0] grp_fu_2442_p_dout0;
output   grp_fu_2442_p_ce;
output  [31:0] grp_fu_2446_p_din0;
output  [17:0] grp_fu_2446_p_din1;
input  [47:0] grp_fu_2446_p_dout0;
output   grp_fu_2446_p_ce;
output  [31:0] grp_fu_2450_p_din0;
output  [17:0] grp_fu_2450_p_din1;
input  [47:0] grp_fu_2450_p_dout0;
output   grp_fu_2450_p_ce;
output  [31:0] grp_fu_2454_p_din0;
output  [17:0] grp_fu_2454_p_din1;
input  [47:0] grp_fu_2454_p_dout0;
output   grp_fu_2454_p_ce;

reg ap_idle;
reg e_out_real_V_9_ce0;
reg e_out_real_V_10_ce0;
reg e_out_imag_V_9_ce0;
reg e_out_imag_V_10_ce0;
reg out_real_2_ce0;
reg out_real_2_we0;
reg out_real_3_ce0;
reg out_real_3_we0;
reg out_imag_2_ce0;
reg out_imag_2_we0;
reg out_imag_3_ce0;
reg out_imag_3_we0;
reg out_real_4_ce0;
reg out_real_4_we0;
reg out_imag_4_ce0;
reg out_imag_4_we0;
reg out_imag_5_ce0;
reg out_imag_5_we0;
reg out_real_6_ce0;
reg out_real_6_we0;
reg out_imag_6_ce0;
reg out_imag_6_we0;
reg out_imag_7_ce0;
reg out_imag_7_we0;
reg out_imag_1_ce0;
reg out_imag_1_we0;
reg out_imag_0_ce0;
reg out_imag_0_we0;
reg out_real_7_ce0;
reg out_real_7_we0;
reg out_real_5_ce0;
reg out_real_5_we0;
reg out_real_1_ce0;
reg out_real_1_we0;
reg out_real_0_ce0;
reg out_real_0_we0;
reg o1_out_real_V_ce0;
reg o1_out_real_V_4_ce0;
reg o1_out_imag_V_ce0;
reg o1_out_imag_V_4_ce0;
reg o2_out_real_V_ce0;
reg o2_out_real_V_4_ce0;
reg o2_out_imag_V_ce0;
reg o2_out_imag_V_4_ce0;
reg e_out_real_V_ce0;
reg e_out_real_V_8_ce0;
reg e_out_imag_V_ce0;
reg e_out_imag_V_8_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln231_reg_939;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] TWIDDLE_REAL_V_address0;
reg    TWIDDLE_REAL_V_ce0;
wire   [17:0] TWIDDLE_REAL_V_q0;
reg   [5:0] TWIDDLE_IMAG_V_address0;
reg    TWIDDLE_IMAG_V_ce0;
wire   [17:0] TWIDDLE_IMAG_V_q0;
reg   [17:0] reg_572;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [17:0] reg_576;
wire   [0:0] icmp_ln231_fu_588_p2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] empty_53_fu_632_p2;
reg   [5:0] empty_53_reg_953;
wire   [63:0] zext_ln236_fu_638_p1;
reg   [63:0] zext_ln236_reg_958;
reg   [63:0] zext_ln236_reg_958_pp0_iter1_reg;
reg   [0:0] tmp_reg_1006;
reg   [0:0] tmp_reg_1006_pp0_iter1_reg;
wire   [31:0] b_real_V_fu_668_p4;
reg   [31:0] b_real_V_reg_1048;
wire   [31:0] b_imag_V_fu_677_p4;
reg   [31:0] b_imag_V_reg_1053;
wire   [31:0] b_real_V_4_fu_686_p4;
reg   [31:0] b_real_V_4_reg_1058;
wire   [31:0] b_imag_V_7_fu_695_p4;
reg   [31:0] b_imag_V_7_reg_1063;
wire  signed [47:0] sext_ln1273_fu_704_p1;
reg  signed [47:0] sext_ln1273_reg_1068;
wire  signed [47:0] sext_ln1273_8_fu_707_p1;
reg  signed [47:0] sext_ln1273_8_reg_1074;
wire  signed [47:0] sext_ln1273_9_fu_711_p1;
reg  signed [47:0] sext_ln1273_9_reg_1080;
wire  signed [47:0] sext_ln1273_10_fu_714_p1;
reg  signed [47:0] sext_ln1273_10_reg_1086;
reg   [47:0] mul_ln813_reg_1092;
wire    ap_block_pp0_stage3_11001;
reg   [47:0] mul_ln1348_reg_1097;
reg   [31:0] r_real_V_13_reg_1102;
reg   [47:0] mul_ln813_4_reg_1108;
reg   [47:0] mul_ln1347_reg_1113;
wire  signed [47:0] sext_ln1273_11_fu_752_p1;
reg  signed [47:0] sext_ln1273_11_reg_1118;
wire  signed [47:0] sext_ln1273_12_fu_755_p1;
reg  signed [47:0] sext_ln1273_12_reg_1124;
wire  signed [47:0] sext_ln1273_13_fu_759_p1;
reg  signed [47:0] sext_ln1273_13_reg_1130;
wire  signed [47:0] sext_ln1273_14_fu_762_p1;
reg  signed [47:0] sext_ln1273_14_reg_1136;
reg   [31:0] r_imag_V_19_reg_1182;
reg   [47:0] mul_ln813_5_reg_1188;
reg   [47:0] mul_ln1348_2_reg_1193;
wire   [31:0] a_real_V_7_fu_800_p4;
reg   [31:0] a_real_V_7_reg_1198;
wire   [31:0] a_imag_V_4_fu_809_p4;
reg   [31:0] a_imag_V_4_reg_1204;
wire   [31:0] a_real_V_9_fu_818_p4;
reg   [31:0] a_real_V_9_reg_1210;
wire   [31:0] a_imag_V_6_fu_827_p4;
reg   [31:0] a_imag_V_6_reg_1216;
reg   [47:0] mul_ln813_6_reg_1222;
reg   [47:0] mul_ln1347_2_reg_1227;
wire   [31:0] b_real_V_6_fu_850_p2;
reg   [31:0] b_real_V_6_reg_1232;
wire   [31:0] a_real_V_12_fu_855_p2;
reg   [31:0] a_real_V_12_reg_1238;
wire   [31:0] b_imag_V_9_fu_874_p2;
reg   [31:0] b_imag_V_9_reg_1244;
wire   [31:0] a_imag_V_5_fu_879_p2;
reg   [31:0] a_imag_V_5_reg_1250;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln79_fu_614_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_2_fu_663_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage3;
reg   [3:0] k_fu_110;
wire   [3:0] add_ln231_fu_594_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_2;
wire   [31:0] r_real_V_fu_884_p2;
wire   [31:0] r_imag_V_14_fu_890_p2;
wire   [31:0] r_real_V_11_fu_896_p2;
wire   [31:0] r_imag_V_17_fu_902_p2;
wire   [31:0] r_imag_V_fu_908_p2;
wire   [31:0] r_real_V_10_fu_914_p2;
wire   [31:0] r_imag_V_15_fu_920_p2;
wire   [31:0] r_real_V_12_fu_926_p2;
wire   [3:0] empty_52_fu_608_p2;
wire   [2:0] empty_51_fu_604_p1;
wire   [5:0] p_shl4_fu_624_p3;
wire   [5:0] zext_ln79_1_fu_620_p1;
wire   [1:0] trunc_ln231_fu_600_p1;
wire    ap_block_pp0_stage2;
wire   [47:0] ret_V_fu_738_p2;
wire   [47:0] ret_V_4_fu_778_p2;
wire   [47:0] ret_V_5_fu_836_p2;
wire   [31:0] r_real_V_14_fu_840_p4;
wire   [47:0] ret_V_6_fu_860_p2;
wire   [31:0] r_imag_V_20_fu_864_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_REAL_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_REAL_V_address0),
    .ce0(TWIDDLE_REAL_V_ce0),
    .q0(TWIDDLE_REAL_V_q0)
);

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_IMAG_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_IMAG_V_address0),
    .ce0(TWIDDLE_IMAG_V_ce0),
    .q0(TWIDDLE_IMAG_V_q0)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U371(
    .din0(o1_out_real_V_q0),
    .din1(o1_out_real_V_4_q0),
    .din2(tmp_reg_1006),
    .dout(b_real_V_fu_668_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U372(
    .din0(o1_out_imag_V_q0),
    .din1(o1_out_imag_V_4_q0),
    .din2(tmp_reg_1006),
    .dout(b_imag_V_fu_677_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U373(
    .din0(o2_out_real_V_q0),
    .din1(o2_out_real_V_4_q0),
    .din2(tmp_reg_1006),
    .dout(b_real_V_4_fu_686_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U374(
    .din0(o2_out_imag_V_q0),
    .din1(o2_out_imag_V_4_q0),
    .din2(tmp_reg_1006),
    .dout(b_imag_V_7_fu_695_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U383(
    .din0(e_out_real_V_q0),
    .din1(e_out_real_V_8_q0),
    .din2(tmp_reg_1006_pp0_iter1_reg),
    .dout(a_real_V_7_fu_800_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U384(
    .din0(e_out_imag_V_q0),
    .din1(e_out_imag_V_8_q0),
    .din2(tmp_reg_1006_pp0_iter1_reg),
    .dout(a_imag_V_4_fu_809_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U385(
    .din0(e_out_real_V_9_q0),
    .din1(e_out_real_V_10_q0),
    .din2(tmp_reg_1006_pp0_iter1_reg),
    .dout(a_real_V_9_fu_818_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U386(
    .din0(e_out_imag_V_9_q0),
    .din1(e_out_imag_V_10_q0),
    .din2(tmp_reg_1006_pp0_iter1_reg),
    .dout(a_imag_V_6_fu_827_p4)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln231_fu_588_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_110 <= add_ln231_fu_594_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_110 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_imag_V_4_reg_1204 <= a_imag_V_4_fu_809_p4;
        a_imag_V_6_reg_1216 <= a_imag_V_6_fu_827_p4;
        a_real_V_7_reg_1198 <= a_real_V_7_fu_800_p4;
        a_real_V_9_reg_1210 <= a_real_V_9_fu_818_p4;
        mul_ln1348_2_reg_1193 <= grp_fu_2446_p_dout0;
        mul_ln813_5_reg_1188 <= grp_fu_2442_p_dout0;
        r_imag_V_19_reg_1182 <= {{ret_V_4_fu_778_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        a_imag_V_5_reg_1250 <= a_imag_V_5_fu_879_p2;
        b_imag_V_9_reg_1244 <= b_imag_V_9_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_real_V_12_reg_1238 <= a_real_V_12_fu_855_p2;
        b_real_V_6_reg_1232 <= b_real_V_6_fu_850_p2;
        mul_ln1347_2_reg_1227 <= grp_fu_2454_p_dout0;
        mul_ln813_6_reg_1222 <= grp_fu_2450_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_reg_939 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_imag_V_7_reg_1063 <= b_imag_V_7_fu_695_p4;
        b_imag_V_reg_1053 <= b_imag_V_fu_677_p4;
        b_real_V_4_reg_1058 <= b_real_V_4_fu_686_p4;
        b_real_V_reg_1048 <= b_real_V_fu_668_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln231_fu_588_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_53_reg_953[5 : 1] <= empty_53_fu_632_p2[5 : 1];
        tmp_reg_1006 <= ap_sig_allocacmp_k_2[32'd2];
        zext_ln236_reg_958[1 : 0] <= zext_ln236_fu_638_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln231_reg_939 <= icmp_ln231_fu_588_p2;
        mul_ln1347_reg_1113 <= grp_fu_2438_p_dout0;
        mul_ln813_4_reg_1108 <= grp_fu_2434_p_dout0;
        r_real_V_13_reg_1102 <= {{ret_V_fu_738_p2[47:16]}};
        sext_ln1273_11_reg_1118 <= sext_ln1273_11_fu_752_p1;
        sext_ln1273_12_reg_1124 <= sext_ln1273_12_fu_755_p1;
        sext_ln1273_13_reg_1130 <= sext_ln1273_13_fu_759_p1;
        sext_ln1273_14_reg_1136 <= sext_ln1273_14_fu_762_p1;
        tmp_reg_1006_pp0_iter1_reg <= tmp_reg_1006;
        zext_ln236_reg_958_pp0_iter1_reg[1 : 0] <= zext_ln236_reg_958[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_reg_939 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln1348_reg_1097 <= grp_fu_2430_p_dout0;
        mul_ln813_reg_1092 <= grp_fu_2426_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln231_reg_939 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln231_reg_939 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_572 <= TWIDDLE_REAL_V_q0;
        reg_576 <= TWIDDLE_IMAG_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_reg_939 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sext_ln1273_10_reg_1086 <= sext_ln1273_10_fu_714_p1;
        sext_ln1273_8_reg_1074 <= sext_ln1273_8_fu_707_p1;
        sext_ln1273_9_reg_1080 <= sext_ln1273_9_fu_711_p1;
        sext_ln1273_reg_1068 <= sext_ln1273_fu_704_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_2_fu_663_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_fu_614_p1;
        end else begin
            TWIDDLE_IMAG_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_IMAG_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_IMAG_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_IMAG_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_2_fu_663_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_fu_614_p1;
        end else begin
            TWIDDLE_REAL_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_REAL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_REAL_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_REAL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln231_reg_939 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln231_reg_939 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_k_2 = k_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_10_ce0 = 1'b1;
    end else begin
        e_out_imag_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_8_ce0 = 1'b1;
    end else begin
        e_out_imag_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_9_ce0 = 1'b1;
    end else begin
        e_out_imag_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_ce0 = 1'b1;
    end else begin
        e_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_10_ce0 = 1'b1;
    end else begin
        e_out_real_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_8_ce0 = 1'b1;
    end else begin
        e_out_real_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_9_ce0 = 1'b1;
    end else begin
        e_out_real_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_ce0 = 1'b1;
    end else begin
        e_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_4_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_4_ce0 = 1'b1;
    end else begin
        o1_out_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_ce0 = 1'b1;
    end else begin
        o1_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_4_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_4_ce0 = 1'b1;
    end else begin
        o2_out_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_ce0 = 1'b1;
    end else begin
        o2_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_0_ce0 = 1'b1;
    end else begin
        out_imag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_0_we0 = 1'b1;
    end else begin
        out_imag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_1_ce0 = 1'b1;
    end else begin
        out_imag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_1_we0 = 1'b1;
    end else begin
        out_imag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_2_ce0 = 1'b1;
    end else begin
        out_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_2_we0 = 1'b1;
    end else begin
        out_imag_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_3_ce0 = 1'b1;
    end else begin
        out_imag_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_3_we0 = 1'b1;
    end else begin
        out_imag_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_4_ce0 = 1'b1;
    end else begin
        out_imag_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_4_we0 = 1'b1;
    end else begin
        out_imag_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_5_ce0 = 1'b1;
    end else begin
        out_imag_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_5_we0 = 1'b1;
    end else begin
        out_imag_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_6_ce0 = 1'b1;
    end else begin
        out_imag_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_6_we0 = 1'b1;
    end else begin
        out_imag_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_7_ce0 = 1'b1;
    end else begin
        out_imag_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_7_we0 = 1'b1;
    end else begin
        out_imag_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_0_ce0 = 1'b1;
    end else begin
        out_real_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_0_we0 = 1'b1;
    end else begin
        out_real_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_1_ce0 = 1'b1;
    end else begin
        out_real_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_1_we0 = 1'b1;
    end else begin
        out_real_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_2_ce0 = 1'b1;
    end else begin
        out_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_2_we0 = 1'b1;
    end else begin
        out_real_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_3_ce0 = 1'b1;
    end else begin
        out_real_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_3_we0 = 1'b1;
    end else begin
        out_real_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_4_ce0 = 1'b1;
    end else begin
        out_real_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_4_we0 = 1'b1;
    end else begin
        out_real_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_5_ce0 = 1'b1;
    end else begin
        out_real_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_5_we0 = 1'b1;
    end else begin
        out_real_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_6_ce0 = 1'b1;
    end else begin
        out_real_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_6_we0 = 1'b1;
    end else begin
        out_real_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_7_ce0 = 1'b1;
    end else begin
        out_real_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1006_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_7_we0 = 1'b1;
    end else begin
        out_real_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_imag_V_5_fu_879_p2 = (r_imag_V_19_reg_1182 - r_imag_V_20_fu_864_p4);

assign a_real_V_12_fu_855_p2 = (r_real_V_13_reg_1102 - r_real_V_14_fu_840_p4);

assign add_ln231_fu_594_p2 = (ap_sig_allocacmp_k_2 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign b_imag_V_9_fu_874_p2 = (r_imag_V_20_fu_864_p4 + r_imag_V_19_reg_1182);

assign b_real_V_6_fu_850_p2 = (r_real_V_14_fu_840_p4 + r_real_V_13_reg_1102);

assign e_out_imag_V_10_address0 = zext_ln236_reg_958;

assign e_out_imag_V_8_address0 = zext_ln236_reg_958;

assign e_out_imag_V_9_address0 = zext_ln236_reg_958;

assign e_out_imag_V_address0 = zext_ln236_reg_958;

assign e_out_real_V_10_address0 = zext_ln236_reg_958;

assign e_out_real_V_8_address0 = zext_ln236_reg_958;

assign e_out_real_V_9_address0 = zext_ln236_reg_958;

assign e_out_real_V_address0 = zext_ln236_reg_958;

assign empty_51_fu_604_p1 = ap_sig_allocacmp_k_2[2:0];

assign empty_52_fu_608_p2 = ap_sig_allocacmp_k_2 << 4'd1;

assign empty_53_fu_632_p2 = (p_shl4_fu_624_p3 - zext_ln79_1_fu_620_p1);

assign grp_fu_2426_p_ce = 1'b1;

assign grp_fu_2426_p_din0 = sext_ln1273_fu_704_p1;

assign grp_fu_2426_p_din1 = sext_ln1273_8_fu_707_p1;

assign grp_fu_2430_p_ce = 1'b1;

assign grp_fu_2430_p_din0 = sext_ln1273_9_fu_711_p1;

assign grp_fu_2430_p_din1 = sext_ln1273_10_fu_714_p1;

assign grp_fu_2434_p_ce = 1'b1;

assign grp_fu_2434_p_din0 = sext_ln1273_reg_1068;

assign grp_fu_2434_p_din1 = sext_ln1273_10_reg_1086;

assign grp_fu_2438_p_ce = 1'b1;

assign grp_fu_2438_p_din0 = sext_ln1273_9_reg_1080;

assign grp_fu_2438_p_din1 = sext_ln1273_8_reg_1074;

assign grp_fu_2442_p_ce = 1'b1;

assign grp_fu_2442_p_din0 = sext_ln1273_11_fu_752_p1;

assign grp_fu_2442_p_din1 = sext_ln1273_12_fu_755_p1;

assign grp_fu_2446_p_ce = 1'b1;

assign grp_fu_2446_p_din0 = sext_ln1273_13_fu_759_p1;

assign grp_fu_2446_p_din1 = sext_ln1273_14_fu_762_p1;

assign grp_fu_2450_p_ce = 1'b1;

assign grp_fu_2450_p_din0 = sext_ln1273_11_reg_1118;

assign grp_fu_2450_p_din1 = sext_ln1273_14_reg_1136;

assign grp_fu_2454_p_ce = 1'b1;

assign grp_fu_2454_p_din0 = sext_ln1273_13_reg_1130;

assign grp_fu_2454_p_din1 = sext_ln1273_12_reg_1124;

assign icmp_ln231_fu_588_p2 = ((ap_sig_allocacmp_k_2 == 4'd8) ? 1'b1 : 1'b0);

assign o1_out_imag_V_4_address0 = zext_ln236_fu_638_p1;

assign o1_out_imag_V_address0 = zext_ln236_fu_638_p1;

assign o1_out_real_V_4_address0 = zext_ln236_fu_638_p1;

assign o1_out_real_V_address0 = zext_ln236_fu_638_p1;

assign o2_out_imag_V_4_address0 = zext_ln236_fu_638_p1;

assign o2_out_imag_V_address0 = zext_ln236_fu_638_p1;

assign o2_out_real_V_4_address0 = zext_ln236_fu_638_p1;

assign o2_out_real_V_address0 = zext_ln236_fu_638_p1;

assign out_imag_0_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_0_d0 = r_imag_V_fu_908_p2;

assign out_imag_1_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_1_d0 = r_imag_V_fu_908_p2;

assign out_imag_2_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_2_d0 = r_imag_V_14_fu_890_p2;

assign out_imag_3_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_3_d0 = r_imag_V_14_fu_890_p2;

assign out_imag_4_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_4_d0 = r_imag_V_15_fu_920_p2;

assign out_imag_5_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_5_d0 = r_imag_V_15_fu_920_p2;

assign out_imag_6_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_6_d0 = r_imag_V_17_fu_902_p2;

assign out_imag_7_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_imag_7_d0 = r_imag_V_17_fu_902_p2;

assign out_real_0_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_0_d0 = r_real_V_fu_884_p2;

assign out_real_1_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_1_d0 = r_real_V_fu_884_p2;

assign out_real_2_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_2_d0 = r_real_V_10_fu_914_p2;

assign out_real_3_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_3_d0 = r_real_V_10_fu_914_p2;

assign out_real_4_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_4_d0 = r_real_V_11_fu_896_p2;

assign out_real_5_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_5_d0 = r_real_V_11_fu_896_p2;

assign out_real_6_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_6_d0 = r_real_V_12_fu_926_p2;

assign out_real_7_address0 = zext_ln236_reg_958_pp0_iter1_reg;

assign out_real_7_d0 = r_real_V_12_fu_926_p2;

assign p_shl4_fu_624_p3 = {{empty_51_fu_604_p1}, {3'd0}};

assign r_imag_V_14_fu_890_p2 = (a_imag_V_6_reg_1216 - a_real_V_12_reg_1238);

assign r_imag_V_15_fu_920_p2 = (a_imag_V_4_reg_1204 - b_imag_V_9_reg_1244);

assign r_imag_V_17_fu_902_p2 = (a_imag_V_6_reg_1216 + a_real_V_12_reg_1238);

assign r_imag_V_20_fu_864_p4 = {{ret_V_6_fu_860_p2[47:16]}};

assign r_imag_V_fu_908_p2 = (a_imag_V_4_reg_1204 + b_imag_V_9_reg_1244);

assign r_real_V_10_fu_914_p2 = (a_real_V_9_reg_1210 + a_imag_V_5_reg_1250);

assign r_real_V_11_fu_896_p2 = (a_real_V_7_reg_1198 - b_real_V_6_reg_1232);

assign r_real_V_12_fu_926_p2 = (a_real_V_9_reg_1210 - a_imag_V_5_reg_1250);

assign r_real_V_14_fu_840_p4 = {{ret_V_5_fu_836_p2[47:16]}};

assign r_real_V_fu_884_p2 = (b_real_V_6_reg_1232 + a_real_V_7_reg_1198);

assign ret_V_4_fu_778_p2 = (mul_ln1347_reg_1113 + mul_ln813_4_reg_1108);

assign ret_V_5_fu_836_p2 = (mul_ln813_5_reg_1188 - mul_ln1348_2_reg_1193);

assign ret_V_6_fu_860_p2 = (mul_ln1347_2_reg_1227 + mul_ln813_6_reg_1222);

assign ret_V_fu_738_p2 = (mul_ln813_reg_1092 - mul_ln1348_reg_1097);

assign sext_ln1273_10_fu_714_p1 = $signed(reg_576);

assign sext_ln1273_11_fu_752_p1 = $signed(b_real_V_4_reg_1058);

assign sext_ln1273_12_fu_755_p1 = $signed(reg_572);

assign sext_ln1273_13_fu_759_p1 = $signed(b_imag_V_7_reg_1063);

assign sext_ln1273_14_fu_762_p1 = $signed(reg_576);

assign sext_ln1273_8_fu_707_p1 = $signed(reg_572);

assign sext_ln1273_9_fu_711_p1 = $signed(b_imag_V_reg_1053);

assign sext_ln1273_fu_704_p1 = $signed(b_real_V_reg_1048);

assign trunc_ln231_fu_600_p1 = ap_sig_allocacmp_k_2[1:0];

assign zext_ln236_fu_638_p1 = trunc_ln231_fu_600_p1;

assign zext_ln79_1_fu_620_p1 = empty_52_fu_608_p2;

assign zext_ln79_2_fu_663_p1 = empty_53_reg_953;

assign zext_ln79_fu_614_p1 = empty_52_fu_608_p2;

always @ (posedge ap_clk) begin
    empty_53_reg_953[0] <= 1'b0;
    zext_ln236_reg_958[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln236_reg_958_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //sr_fft_fft_32pt_Pipeline_VITIS_LOOP_231_3
