-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sr_fft_fft_32pt_Pipeline_VITIS_LOOP_221_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    o2_in_imag_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_in_imag_V_4_ce0 : OUT STD_LOGIC;
    o2_in_imag_V_4_we0 : OUT STD_LOGIC;
    o2_in_imag_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_in_imag_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_in_imag_V_ce0 : OUT STD_LOGIC;
    o2_in_imag_V_we0 : OUT STD_LOGIC;
    o2_in_imag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_in_real_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_in_real_V_4_ce0 : OUT STD_LOGIC;
    o2_in_real_V_4_we0 : OUT STD_LOGIC;
    o2_in_real_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_in_real_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_in_real_V_ce0 : OUT STD_LOGIC;
    o2_in_real_V_we0 : OUT STD_LOGIC;
    o2_in_real_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_in_imag_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o1_in_imag_V_4_ce0 : OUT STD_LOGIC;
    o1_in_imag_V_4_we0 : OUT STD_LOGIC;
    o1_in_imag_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_in_imag_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o1_in_imag_V_ce0 : OUT STD_LOGIC;
    o1_in_imag_V_we0 : OUT STD_LOGIC;
    o1_in_imag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_in_real_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o1_in_real_V_4_ce0 : OUT STD_LOGIC;
    o1_in_real_V_4_we0 : OUT STD_LOGIC;
    o1_in_real_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o1_in_real_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o1_in_real_V_ce0 : OUT STD_LOGIC;
    o1_in_real_V_we0 : OUT STD_LOGIC;
    o1_in_real_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_real_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_3_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_4_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_5_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_6_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_7_load : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_0_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_1_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_2_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_3_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_4_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_5_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_6_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_real_7_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_0_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_1_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_2_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_3_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_4_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_5_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_6_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_imag_7_load_6 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sr_fft_fft_32pt_Pipeline_VITIS_LOOP_221_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln221_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln223_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln221_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_452_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_476_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_508_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_532_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln221_fu_432_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln221_1_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sr_fft_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sr_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U243 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => in_real_0_load,
        din1 => in_real_1_load,
        din2 => in_real_2_load,
        din3 => in_real_3_load,
        din4 => in_real_4_load,
        din5 => in_real_5_load,
        din6 => in_real_6_load,
        din7 => in_real_7_load,
        din8 => trunc_ln221_1_fu_436_p1,
        dout => tmp_s_fu_452_p10);

    mux_83_32_1_1_U244 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => in_imag_0_load,
        din1 => in_imag_1_load,
        din2 => in_imag_2_load,
        din3 => in_imag_3_load,
        din4 => in_imag_4_load,
        din5 => in_imag_5_load,
        din6 => in_imag_6_load,
        din7 => in_imag_7_load,
        din8 => trunc_ln221_1_fu_436_p1,
        dout => tmp_5_fu_476_p10);

    mux_83_32_1_1_U245 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => in_real_0_load_6,
        din1 => in_real_1_load_6,
        din2 => in_real_2_load_6,
        din3 => in_real_3_load_6,
        din4 => in_real_4_load_6,
        din5 => in_real_5_load_6,
        din6 => in_real_6_load_6,
        din7 => in_real_7_load_6,
        din8 => trunc_ln221_1_fu_436_p1,
        dout => tmp_6_fu_508_p10);

    mux_83_32_1_1_U246 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => in_imag_0_load_6,
        din1 => in_imag_1_load_6,
        din2 => in_imag_2_load_6,
        din3 => in_imag_3_load_6,
        din4 => in_imag_4_load_6,
        din5 => in_imag_5_load_6,
        din6 => in_imag_6_load_6,
        din7 => in_imag_7_load_6,
        din8 => trunc_ln221_1_fu_436_p1,
        dout => tmp_7_fu_532_p10);

    flow_control_loop_pipe_sequential_init_U : component sr_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln221_fu_420_p2 = ap_const_lv1_0)) then 
                    i_3_fu_112 <= add_ln221_fu_426_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_112 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln221_fu_426_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_3_fu_112, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_112;
        end if; 
    end process;

    icmp_ln221_fu_420_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    o1_in_imag_V_4_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o1_in_imag_V_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o1_in_imag_V_4_ce0 <= ap_const_logic_1;
        else 
            o1_in_imag_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_imag_V_4_d0 <= tmp_5_fu_476_p10;

    o1_in_imag_V_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_1))) then 
            o1_in_imag_V_4_we0 <= ap_const_logic_1;
        else 
            o1_in_imag_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_imag_V_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o1_in_imag_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o1_in_imag_V_ce0 <= ap_const_logic_1;
        else 
            o1_in_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_imag_V_d0 <= tmp_5_fu_476_p10;

    o1_in_imag_V_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_0))) then 
            o1_in_imag_V_we0 <= ap_const_logic_1;
        else 
            o1_in_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_real_V_4_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o1_in_real_V_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o1_in_real_V_4_ce0 <= ap_const_logic_1;
        else 
            o1_in_real_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_real_V_4_d0 <= tmp_s_fu_452_p10;

    o1_in_real_V_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_1))) then 
            o1_in_real_V_4_we0 <= ap_const_logic_1;
        else 
            o1_in_real_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_real_V_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o1_in_real_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o1_in_real_V_ce0 <= ap_const_logic_1;
        else 
            o1_in_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o1_in_real_V_d0 <= tmp_s_fu_452_p10;

    o1_in_real_V_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_0))) then 
            o1_in_real_V_we0 <= ap_const_logic_1;
        else 
            o1_in_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_imag_V_4_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o2_in_imag_V_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o2_in_imag_V_4_ce0 <= ap_const_logic_1;
        else 
            o2_in_imag_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_imag_V_4_d0 <= tmp_7_fu_532_p10;

    o2_in_imag_V_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_1))) then 
            o2_in_imag_V_4_we0 <= ap_const_logic_1;
        else 
            o2_in_imag_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_imag_V_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o2_in_imag_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o2_in_imag_V_ce0 <= ap_const_logic_1;
        else 
            o2_in_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_imag_V_d0 <= tmp_7_fu_532_p10;

    o2_in_imag_V_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_0))) then 
            o2_in_imag_V_we0 <= ap_const_logic_1;
        else 
            o2_in_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_real_V_4_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o2_in_real_V_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o2_in_real_V_4_ce0 <= ap_const_logic_1;
        else 
            o2_in_real_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_real_V_4_d0 <= tmp_6_fu_508_p10;

    o2_in_real_V_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_1))) then 
            o2_in_real_V_4_we0 <= ap_const_logic_1;
        else 
            o2_in_real_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_real_V_address0 <= zext_ln223_fu_440_p1(2 - 1 downto 0);

    o2_in_real_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            o2_in_real_V_ce0 <= ap_const_logic_1;
        else 
            o2_in_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o2_in_real_V_d0 <= tmp_6_fu_508_p10;

    o2_in_real_V_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln221_fu_420_p2, tmp_fu_500_p3, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln221_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_500_p3 = ap_const_lv1_0))) then 
            o2_in_real_V_we0 <= ap_const_logic_1;
        else 
            o2_in_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_500_p3 <= ap_sig_allocacmp_i(2 downto 2);
    trunc_ln221_1_fu_436_p1 <= ap_sig_allocacmp_i(3 - 1 downto 0);
    trunc_ln221_fu_432_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    zext_ln223_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln221_fu_432_p1),64));
end behav;
