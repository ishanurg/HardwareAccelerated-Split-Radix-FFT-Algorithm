-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sr_fft_fft_16pt_Pipeline_VITIS_LOOP_181_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_imag_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_imag_3_ce0 : OUT STD_LOGIC;
    out_imag_3_we0 : OUT STD_LOGIC;
    out_imag_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_imag_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_imag_2_ce0 : OUT STD_LOGIC;
    out_imag_2_we0 : OUT STD_LOGIC;
    out_imag_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_imag_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_imag_1_ce0 : OUT STD_LOGIC;
    out_imag_1_we0 : OUT STD_LOGIC;
    out_imag_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_imag_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_imag_0_ce0 : OUT STD_LOGIC;
    out_imag_0_we0 : OUT STD_LOGIC;
    out_imag_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_real_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_real_3_ce0 : OUT STD_LOGIC;
    out_real_3_we0 : OUT STD_LOGIC;
    out_real_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_real_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_real_2_ce0 : OUT STD_LOGIC;
    out_real_2_we0 : OUT STD_LOGIC;
    out_real_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_real_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_real_1_ce0 : OUT STD_LOGIC;
    out_real_1_we0 : OUT STD_LOGIC;
    out_real_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_real_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_real_0_ce0 : OUT STD_LOGIC;
    out_real_0_we0 : OUT STD_LOGIC;
    out_real_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_132 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_133 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_134 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_135 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_147 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_148 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_149 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_150 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_138 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_139 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_140 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_141 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_153 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_154 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_155 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_156 : IN STD_LOGIC_VECTOR (31 downto 0);
    e_out_real_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    e_out_real_V_ce0 : OUT STD_LOGIC;
    e_out_real_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    e_out_imag_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    e_out_imag_V_ce0 : OUT STD_LOGIC;
    e_out_imag_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    e_out_real_V_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    e_out_real_V_11_ce0 : OUT STD_LOGIC;
    e_out_real_V_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    e_out_imag_V_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    e_out_imag_V_11_ce0 : OUT STD_LOGIC;
    e_out_imag_V_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sr_fft_fft_16pt_Pipeline_VITIS_LOOP_181_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln181_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal TWIDDLE_REAL_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal TWIDDLE_REAL_V_ce0 : STD_LOGIC;
    signal TWIDDLE_REAL_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal TWIDDLE_IMAG_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal TWIDDLE_IMAG_V_ce0 : STD_LOGIC;
    signal TWIDDLE_IMAG_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_402 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_406 : STD_LOGIC_VECTOR (17 downto 0);
    signal k_reg_733 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln181_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln181_reg_738_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_fu_430_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_58_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_434_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_747 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_real_V_fu_448_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_real_V_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_fu_462_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_real_V_24_fu_476_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_real_V_24_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_32_fu_490_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_32_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1273_fu_531_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_22_fu_534_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_22_reg_798 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_23_fu_538_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_23_reg_804 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_24_fu_541_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln181_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_reg_816 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_reg_816_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_545_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_reg_830 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_reg_835 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_10_reg_840 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_25_fu_572_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_25_reg_845 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_26_fu_575_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_26_reg_851 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_27_fu_579_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_27_reg_857 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_28_fu_582_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_28_reg_863 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_real_V_74_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_reg_885 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_586_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_11_reg_890 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_4_reg_895 : STD_LOGIC_VECTOR (47 downto 0);
    signal a_real_V_35_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_imag_V_32_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_imag_V_85_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_12_reg_918 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_4_reg_923 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_real_V_76_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_real_V_76_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_real_V_77_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_real_V_77_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_imag_V_87_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_imag_V_87_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_imag_V_88_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_imag_V_88_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln79_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln79_6_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal k_3_fu_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln181_fu_424_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_fu_512_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_5_fu_509_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_59_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_545_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_551_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_557_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_568_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_568_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_598_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_612_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_616_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_13_fu_620_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_14_fu_634_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_real_V_75_fu_638_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_15_fu_658_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_imag_V_86_fu_662_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sr_fft_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sr_fft_mul_32s_18s_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sr_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    TWIDDLE_REAL_V_U : component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => TWIDDLE_REAL_V_address0,
        ce0 => TWIDDLE_REAL_V_ce0,
        q0 => TWIDDLE_REAL_V_q0);

    TWIDDLE_IMAG_V_U : component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => TWIDDLE_IMAG_V_address0,
        ce0 => TWIDDLE_IMAG_V_ce0,
        q0 => TWIDDLE_IMAG_V_q0);

    mux_42_32_1_1_U183 : component sr_fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => r_real_V_132,
        din1 => r_real_V_133,
        din2 => r_real_V_134,
        din3 => r_real_V_135,
        din4 => empty_58_fu_430_p1,
        dout => b_real_V_fu_448_p6);

    mux_42_32_1_1_U184 : component sr_fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => r_imag_V_147,
        din1 => r_imag_V_148,
        din2 => r_imag_V_149,
        din3 => r_imag_V_150,
        din4 => empty_58_fu_430_p1,
        dout => b_imag_V_fu_462_p6);

    mux_42_32_1_1_U185 : component sr_fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => r_real_V_138,
        din1 => r_real_V_139,
        din2 => r_real_V_140,
        din3 => r_real_V_141,
        din4 => empty_58_fu_430_p1,
        dout => b_real_V_24_fu_476_p6);

    mux_42_32_1_1_U186 : component sr_fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => r_imag_V_153,
        din1 => r_imag_V_154,
        din2 => r_imag_V_155,
        din3 => r_imag_V_156,
        din4 => empty_58_fu_430_p1,
        dout => b_imag_V_32_fu_490_p6);

    mul_32s_18s_48_2_1_U187 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_545_p0,
        din1 => reg_402,
        ce => ap_const_logic_1,
        dout => grp_fu_545_p2);

    mul_32s_18s_48_2_1_U188 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_imag_V_reg_767,
        din1 => grp_fu_551_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);

    mul_32s_18s_48_2_1_U189 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_557_p0,
        din1 => grp_fu_557_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_557_p2);

    mul_32s_18s_48_2_1_U190 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_568_p0,
        din1 => grp_fu_568_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_568_p2);

    mul_32s_18s_48_2_1_U191 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_real_V_24_reg_772,
        din1 => reg_402,
        ce => ap_const_logic_1,
        dout => grp_fu_586_p2);

    mul_32s_18s_48_2_1_U192 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_imag_V_32_reg_777,
        din1 => reg_406,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p2);

    mul_32s_18s_48_2_1_U193 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_612_p0,
        din1 => grp_fu_612_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    mul_32s_18s_48_2_1_U194 : component sr_fft_mul_32s_18s_48_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_616_p0,
        din1 => grp_fu_616_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    flow_control_loop_pipe_sequential_init_U : component sr_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    k_3_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln181_fu_418_p2 = ap_const_lv1_0))) then 
                    k_3_fu_104 <= add_ln181_fu_424_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_3_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_imag_V_32_reg_906 <= e_out_imag_V_11_q0;
                a_real_V_35_reg_900 <= e_out_real_V_q0;
                mul_ln1347_reg_885 <= grp_fu_568_p2;
                mul_ln1348_4_reg_895 <= grp_fu_592_p2;
                mul_ln813_11_reg_890 <= grp_fu_586_p2;
                r_real_V_74_reg_879 <= ret_V_fu_598_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln181_fu_418_p2 = ap_const_lv1_0))) then
                b_imag_V_32_reg_777 <= b_imag_V_32_fu_490_p6;
                b_imag_V_reg_767 <= b_imag_V_fu_462_p6;
                b_real_V_24_reg_772 <= b_real_V_24_fu_476_p6;
                b_real_V_reg_762 <= b_real_V_fu_448_p6;
                empty_58_reg_742 <= empty_58_fu_430_p1;
                    tmp_s_reg_747(3 downto 2) <= tmp_s_fu_434_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln181_reg_738 <= icmp_ln181_fu_418_p2;
                icmp_ln181_reg_738_pp0_iter1_reg <= icmp_ln181_reg_738;
                k_reg_733 <= ap_sig_allocacmp_k;
                mul_ln1348_reg_835 <= grp_fu_551_p2;
                mul_ln813_10_reg_840 <= grp_fu_557_p2;
                mul_ln813_reg_830 <= grp_fu_545_p2;
                r_imag_V_87_reg_940 <= r_imag_V_87_fu_672_p2;
                r_imag_V_88_reg_946 <= r_imag_V_88_fu_677_p2;
                sext_ln1273_25_reg_845 <= sext_ln1273_25_fu_572_p1;
                sext_ln1273_26_reg_851 <= sext_ln1273_26_fu_575_p1;
                sext_ln1273_27_reg_857 <= sext_ln1273_27_fu_579_p1;
                sext_ln1273_28_reg_863 <= sext_ln1273_28_fu_582_p1;
                    zext_ln181_reg_816(2 downto 0) <= zext_ln181_fu_563_p1(2 downto 0);
                    zext_ln181_reg_816_pp0_iter2_reg(2 downto 0) <= zext_ln181_reg_816(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln1347_4_reg_923 <= grp_fu_616_p2;
                mul_ln813_12_reg_918 <= grp_fu_612_p2;
                r_imag_V_85_reg_912 <= ret_V_13_fu_620_p2(47 downto 16);
                r_real_V_76_reg_928 <= r_real_V_76_fu_648_p2;
                r_real_V_77_reg_934 <= r_real_V_77_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln181_reg_738 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln181_reg_738 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_402 <= TWIDDLE_REAL_V_q0;
                reg_406 <= TWIDDLE_IMAG_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln181_reg_738 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln1273_22_reg_798 <= sext_ln1273_22_fu_534_p1;
                sext_ln1273_23_reg_804 <= sext_ln1273_23_fu_538_p1;
            end if;
        end if;
    end process;
    tmp_s_reg_747(1 downto 0) <= "00";
    zext_ln181_reg_816(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln181_reg_816_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    TWIDDLE_IMAG_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln79_fu_442_p1, ap_block_pp0_stage0, zext_ln79_6_fu_525_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                TWIDDLE_IMAG_V_address0 <= zext_ln79_6_fu_525_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                TWIDDLE_IMAG_V_address0 <= zext_ln79_fu_442_p1(6 - 1 downto 0);
            else 
                TWIDDLE_IMAG_V_address0 <= "XXXXXX";
            end if;
        else 
            TWIDDLE_IMAG_V_address0 <= "XXXXXX";
        end if; 
    end process;


    TWIDDLE_IMAG_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            TWIDDLE_IMAG_V_ce0 <= ap_const_logic_1;
        else 
            TWIDDLE_IMAG_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    TWIDDLE_REAL_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln79_fu_442_p1, ap_block_pp0_stage0, zext_ln79_6_fu_525_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                TWIDDLE_REAL_V_address0 <= zext_ln79_6_fu_525_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                TWIDDLE_REAL_V_address0 <= zext_ln79_fu_442_p1(6 - 1 downto 0);
            else 
                TWIDDLE_REAL_V_address0 <= "XXXXXX";
            end if;
        else 
            TWIDDLE_REAL_V_address0 <= "XXXXXX";
        end if; 
    end process;


    TWIDDLE_REAL_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            TWIDDLE_REAL_V_ce0 <= ap_const_logic_1;
        else 
            TWIDDLE_REAL_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln181_fu_424_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln181_reg_738)
    begin
        if (((icmp_ln181_reg_738 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln181_reg_738_pp0_iter1_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln181_reg_738_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_3_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_k <= k_3_fu_104;
        end if; 
    end process;

    e_out_imag_V_11_address0 <= zext_ln181_fu_563_p1(2 - 1 downto 0);

    e_out_imag_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            e_out_imag_V_11_ce0 <= ap_const_logic_1;
        else 
            e_out_imag_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_out_imag_V_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    e_out_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            e_out_imag_V_ce0 <= ap_const_logic_1;
        else 
            e_out_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_out_real_V_11_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    e_out_real_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            e_out_real_V_11_ce0 <= ap_const_logic_1;
        else 
            e_out_real_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    e_out_real_V_address0 <= zext_ln181_fu_563_p1(2 - 1 downto 0);

    e_out_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            e_out_real_V_ce0 <= ap_const_logic_1;
        else 
            e_out_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_430_p1 <= ap_sig_allocacmp_k(2 - 1 downto 0);
    empty_59_fu_519_p2 <= std_logic_vector(unsigned(p_shl2_fu_512_p3) - unsigned(zext_ln79_5_fu_509_p1));
    grp_fu_545_p0 <= sext_ln1273_fu_531_p1(32 - 1 downto 0);
    grp_fu_551_p1 <= sext_ln1273_24_fu_541_p1(18 - 1 downto 0);
    grp_fu_557_p0 <= sext_ln1273_fu_531_p1(32 - 1 downto 0);
    grp_fu_557_p1 <= sext_ln1273_24_fu_541_p1(18 - 1 downto 0);
    grp_fu_568_p0 <= sext_ln1273_23_reg_804(32 - 1 downto 0);
    grp_fu_568_p1 <= sext_ln1273_22_reg_798(18 - 1 downto 0);
    grp_fu_612_p0 <= sext_ln1273_25_reg_845(32 - 1 downto 0);
    grp_fu_612_p1 <= sext_ln1273_28_reg_863(18 - 1 downto 0);
    grp_fu_616_p0 <= sext_ln1273_27_reg_857(32 - 1 downto 0);
    grp_fu_616_p1 <= sext_ln1273_26_reg_851(18 - 1 downto 0);
    icmp_ln181_fu_418_p2 <= "1" when (ap_sig_allocacmp_k = ap_const_lv3_4) else "0";
    out_imag_0_address0 <= zext_ln181_reg_816_pp0_iter2_reg(2 - 1 downto 0);

    out_imag_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_imag_0_ce0 <= ap_const_logic_1;
        else 
            out_imag_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_0_d0 <= std_logic_vector(unsigned(e_out_imag_V_q0) + unsigned(r_imag_V_87_reg_940));

    out_imag_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_imag_0_we0 <= ap_const_logic_1;
        else 
            out_imag_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_1_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    out_imag_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_imag_1_ce0 <= ap_const_logic_1;
        else 
            out_imag_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_1_d0 <= std_logic_vector(unsigned(a_imag_V_32_reg_906) - unsigned(r_real_V_77_reg_934));

    out_imag_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_imag_1_we0 <= ap_const_logic_1;
        else 
            out_imag_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_2_address0 <= zext_ln181_reg_816_pp0_iter2_reg(2 - 1 downto 0);

    out_imag_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_imag_2_ce0 <= ap_const_logic_1;
        else 
            out_imag_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_2_d0 <= std_logic_vector(unsigned(e_out_imag_V_q0) - unsigned(r_imag_V_87_reg_940));

    out_imag_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_imag_2_we0 <= ap_const_logic_1;
        else 
            out_imag_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_3_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    out_imag_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_imag_3_ce0 <= ap_const_logic_1;
        else 
            out_imag_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_imag_3_d0 <= std_logic_vector(unsigned(a_imag_V_32_reg_906) + unsigned(r_real_V_77_reg_934));

    out_imag_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_imag_3_we0 <= ap_const_logic_1;
        else 
            out_imag_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_0_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    out_real_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_real_0_ce0 <= ap_const_logic_1;
        else 
            out_real_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_0_d0 <= std_logic_vector(unsigned(a_real_V_35_reg_900) + unsigned(r_real_V_76_reg_928));

    out_real_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_real_0_we0 <= ap_const_logic_1;
        else 
            out_real_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_1_address0 <= zext_ln181_reg_816_pp0_iter2_reg(2 - 1 downto 0);

    out_real_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_real_1_ce0 <= ap_const_logic_1;
        else 
            out_real_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_1_d0 <= std_logic_vector(unsigned(e_out_real_V_11_q0) + unsigned(r_imag_V_88_reg_946));

    out_real_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_real_1_we0 <= ap_const_logic_1;
        else 
            out_real_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_2_address0 <= zext_ln181_reg_816(2 - 1 downto 0);

    out_real_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_real_2_ce0 <= ap_const_logic_1;
        else 
            out_real_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_2_d0 <= std_logic_vector(unsigned(a_real_V_35_reg_900) - unsigned(r_real_V_76_reg_928));

    out_real_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_real_2_we0 <= ap_const_logic_1;
        else 
            out_real_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_3_address0 <= zext_ln181_reg_816_pp0_iter2_reg(2 - 1 downto 0);

    out_real_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_real_3_ce0 <= ap_const_logic_1;
        else 
            out_real_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_real_3_d0 <= std_logic_vector(unsigned(e_out_real_V_11_q0) - unsigned(r_imag_V_88_reg_946));

    out_real_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_real_3_we0 <= ap_const_logic_1;
        else 
            out_real_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_fu_512_p3 <= (empty_58_reg_742 & ap_const_lv4_0);
    r_imag_V_86_fu_662_p4 <= ret_V_15_fu_658_p2(47 downto 16);
    r_imag_V_87_fu_672_p2 <= std_logic_vector(unsigned(r_imag_V_86_fu_662_p4) + unsigned(r_imag_V_85_reg_912));
    r_imag_V_88_fu_677_p2 <= std_logic_vector(unsigned(r_imag_V_85_reg_912) - unsigned(r_imag_V_86_fu_662_p4));
    r_real_V_75_fu_638_p4 <= ret_V_14_fu_634_p2(47 downto 16);
    r_real_V_76_fu_648_p2 <= std_logic_vector(unsigned(r_real_V_75_fu_638_p4) + unsigned(r_real_V_74_reg_879));
    r_real_V_77_fu_653_p2 <= std_logic_vector(unsigned(r_real_V_74_reg_879) - unsigned(r_real_V_75_fu_638_p4));
    ret_V_13_fu_620_p2 <= std_logic_vector(unsigned(mul_ln1347_reg_885) + unsigned(mul_ln813_10_reg_840));
    ret_V_14_fu_634_p2 <= std_logic_vector(unsigned(mul_ln813_11_reg_890) - unsigned(mul_ln1348_4_reg_895));
    ret_V_15_fu_658_p2 <= std_logic_vector(unsigned(mul_ln1347_4_reg_923) + unsigned(mul_ln813_12_reg_918));
    ret_V_fu_598_p2 <= std_logic_vector(unsigned(mul_ln813_reg_830) - unsigned(mul_ln1348_reg_835));
        sext_ln1273_22_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_402),48));

        sext_ln1273_23_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_imag_V_reg_767),48));

        sext_ln1273_24_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_406),48));

        sext_ln1273_25_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_real_V_24_reg_772),48));

        sext_ln1273_26_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_402),48));

        sext_ln1273_27_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_imag_V_32_reg_777),48));

        sext_ln1273_28_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_406),48));

        sext_ln1273_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_real_V_reg_762),48));

    tmp_s_fu_434_p3 <= (empty_58_fu_430_p1 & ap_const_lv2_0);
    zext_ln181_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_733),64));
    zext_ln79_5_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_747),6));
    zext_ln79_6_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_59_fu_519_p2),64));
    zext_ln79_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_434_p3),64));
end behav;
