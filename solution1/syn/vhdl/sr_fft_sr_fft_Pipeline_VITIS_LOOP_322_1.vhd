-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sr_fft_sr_fft_Pipeline_VITIS_LOOP_322_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_imag_V_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_7_ce0 : OUT STD_LOGIC;
    x_imag_V_7_we0 : OUT STD_LOGIC;
    x_imag_V_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_6_ce0 : OUT STD_LOGIC;
    x_imag_V_6_we0 : OUT STD_LOGIC;
    x_imag_V_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_5_ce0 : OUT STD_LOGIC;
    x_imag_V_5_we0 : OUT STD_LOGIC;
    x_imag_V_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_4_ce0 : OUT STD_LOGIC;
    x_imag_V_4_we0 : OUT STD_LOGIC;
    x_imag_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_3_ce0 : OUT STD_LOGIC;
    x_imag_V_3_we0 : OUT STD_LOGIC;
    x_imag_V_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_2_ce0 : OUT STD_LOGIC;
    x_imag_V_2_we0 : OUT STD_LOGIC;
    x_imag_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_1_ce0 : OUT STD_LOGIC;
    x_imag_V_1_we0 : OUT STD_LOGIC;
    x_imag_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_imag_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_imag_V_ce0 : OUT STD_LOGIC;
    x_imag_V_we0 : OUT STD_LOGIC;
    x_imag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_7_ce0 : OUT STD_LOGIC;
    x_real_V_7_we0 : OUT STD_LOGIC;
    x_real_V_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_6_ce0 : OUT STD_LOGIC;
    x_real_V_6_we0 : OUT STD_LOGIC;
    x_real_V_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_5_ce0 : OUT STD_LOGIC;
    x_real_V_5_we0 : OUT STD_LOGIC;
    x_real_V_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_4_ce0 : OUT STD_LOGIC;
    x_real_V_4_we0 : OUT STD_LOGIC;
    x_real_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_3_ce0 : OUT STD_LOGIC;
    x_real_V_3_we0 : OUT STD_LOGIC;
    x_real_V_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_2_ce0 : OUT STD_LOGIC;
    x_real_V_2_we0 : OUT STD_LOGIC;
    x_real_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_1_ce0 : OUT STD_LOGIC;
    x_real_V_1_we0 : OUT STD_LOGIC;
    x_real_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_real_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    x_real_V_ce0 : OUT STD_LOGIC;
    x_real_V_we0 : OUT STD_LOGIC;
    x_real_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_4_ce0 : OUT STD_LOGIC;
    input_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_5_ce0 : OUT STD_LOGIC;
    input_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_6_ce0 : OUT STD_LOGIC;
    input_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_7_ce0 : OUT STD_LOGIC;
    input_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sr_fft_sr_fft_Pipeline_VITIS_LOOP_322_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln322_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal add_ln322_fu_430_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln322_reg_662 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_real_V_addr_reg_667 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_1_addr_reg_672 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_2_addr_reg_677 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_3_addr_reg_682 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_4_addr_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_5_addr_reg_692 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_6_addr_reg_697 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_real_V_7_addr_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_addr_reg_707 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_1_addr_reg_712 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_2_addr_reg_717 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_3_addr_reg_722 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_4_addr_reg_727 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_5_addr_reg_732 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_6_addr_reg_737 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_imag_V_7_addr_reg_742 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln1_reg_747 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln324_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_510_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln322_fu_436_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_510_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_619_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sr_fft_mux_83_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sr_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_83_32_1_1_U1 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_fu_510_p1,
        din1 => tmp_fu_510_p2,
        din2 => tmp_fu_510_p3,
        din3 => tmp_fu_510_p4,
        din4 => tmp_fu_510_p5,
        din5 => tmp_fu_510_p6,
        din6 => tmp_fu_510_p7,
        din7 => tmp_fu_510_p8,
        din8 => trunc_ln1_reg_747,
        dout => tmp_fu_510_p10);

    mux_83_32_1_1_U2 : component sr_fft_mux_83_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_619_p1,
        din1 => tmp_1_fu_619_p2,
        din2 => tmp_1_fu_619_p3,
        din3 => tmp_1_fu_619_p4,
        din4 => tmp_1_fu_619_p5,
        din5 => tmp_1_fu_619_p6,
        din6 => tmp_1_fu_619_p7,
        din7 => tmp_1_fu_619_p8,
        din8 => trunc_ln1_reg_747,
        dout => tmp_1_fu_619_p10);

    flow_control_loop_pipe_sequential_init_U : component sr_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_116 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_fu_116 <= add_ln322_reg_662;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln322_reg_662 <= add_ln322_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln322_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln1_reg_747 <= ap_sig_allocacmp_i_2(5 downto 3);
                x_imag_V_1_addr_reg_712 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_2_addr_reg_717 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_3_addr_reg_722 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_4_addr_reg_727 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_5_addr_reg_732 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_6_addr_reg_737 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_7_addr_reg_742 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_imag_V_addr_reg_707 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_1_addr_reg_672 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_2_addr_reg_677 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_3_addr_reg_682 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_4_addr_reg_687 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_5_addr_reg_692 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_6_addr_reg_697 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_7_addr_reg_702 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
                x_real_V_addr_reg_667 <= zext_ln324_fu_440_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln322_fu_424_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln322_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln322_fu_430_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln322_fu_424_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln322_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_116, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_116;
        end if; 
    end process;

    icmp_ln322_fu_424_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv7_40) else "0";
    input_0_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_4_ce0 <= ap_const_logic_1;
        else 
            input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_5_ce0 <= ap_const_logic_1;
        else 
            input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_6_ce0 <= ap_const_logic_1;
        else 
            input_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_address0 <= zext_ln324_fu_440_p1(3 - 1 downto 0);

    input_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_7_ce0 <= ap_const_logic_1;
        else 
            input_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_619_p1 <= input_0_q0(63 downto 32);
    tmp_1_fu_619_p2 <= input_1_q0(63 downto 32);
    tmp_1_fu_619_p3 <= input_2_q0(63 downto 32);
    tmp_1_fu_619_p4 <= input_3_q0(63 downto 32);
    tmp_1_fu_619_p5 <= input_4_q0(63 downto 32);
    tmp_1_fu_619_p6 <= input_5_q0(63 downto 32);
    tmp_1_fu_619_p7 <= input_6_q0(63 downto 32);
    tmp_1_fu_619_p8 <= input_7_q0(63 downto 32);
    tmp_fu_510_p1 <= input_0_q0(32 - 1 downto 0);
    tmp_fu_510_p2 <= input_1_q0(32 - 1 downto 0);
    tmp_fu_510_p3 <= input_2_q0(32 - 1 downto 0);
    tmp_fu_510_p4 <= input_3_q0(32 - 1 downto 0);
    tmp_fu_510_p5 <= input_4_q0(32 - 1 downto 0);
    tmp_fu_510_p6 <= input_5_q0(32 - 1 downto 0);
    tmp_fu_510_p7 <= input_6_q0(32 - 1 downto 0);
    tmp_fu_510_p8 <= input_7_q0(32 - 1 downto 0);
    trunc_ln322_fu_436_p1 <= ap_sig_allocacmp_i_2(3 - 1 downto 0);
    x_imag_V_1_address0 <= x_imag_V_1_addr_reg_712;

    x_imag_V_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_1_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_1_d0 <= tmp_1_fu_619_p10;

    x_imag_V_1_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_1_we0 <= ap_const_logic_1;
        else 
            x_imag_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_2_address0 <= x_imag_V_2_addr_reg_717;

    x_imag_V_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_2_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_2_d0 <= tmp_1_fu_619_p10;

    x_imag_V_2_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_2_we0 <= ap_const_logic_1;
        else 
            x_imag_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_3_address0 <= x_imag_V_3_addr_reg_722;

    x_imag_V_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_3_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_3_d0 <= tmp_1_fu_619_p10;

    x_imag_V_3_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_3_we0 <= ap_const_logic_1;
        else 
            x_imag_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_4_address0 <= x_imag_V_4_addr_reg_727;

    x_imag_V_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_4_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_4_d0 <= tmp_1_fu_619_p10;

    x_imag_V_4_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_4_we0 <= ap_const_logic_1;
        else 
            x_imag_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_5_address0 <= x_imag_V_5_addr_reg_732;

    x_imag_V_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_5_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_5_d0 <= tmp_1_fu_619_p10;

    x_imag_V_5_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_5_we0 <= ap_const_logic_1;
        else 
            x_imag_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_6_address0 <= x_imag_V_6_addr_reg_737;

    x_imag_V_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_6_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_6_d0 <= tmp_1_fu_619_p10;

    x_imag_V_6_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_6_we0 <= ap_const_logic_1;
        else 
            x_imag_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_7_address0 <= x_imag_V_7_addr_reg_742;

    x_imag_V_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_7_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_7_d0 <= tmp_1_fu_619_p10;

    x_imag_V_7_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_7_we0 <= ap_const_logic_1;
        else 
            x_imag_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_address0 <= x_imag_V_addr_reg_707;

    x_imag_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_imag_V_ce0 <= ap_const_logic_1;
        else 
            x_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_imag_V_d0 <= tmp_1_fu_619_p10;

    x_imag_V_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_imag_V_we0 <= ap_const_logic_1;
        else 
            x_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_1_address0 <= x_real_V_1_addr_reg_672;

    x_real_V_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_1_ce0 <= ap_const_logic_1;
        else 
            x_real_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_1_d0 <= tmp_fu_510_p10;

    x_real_V_1_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_1_we0 <= ap_const_logic_1;
        else 
            x_real_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_2_address0 <= x_real_V_2_addr_reg_677;

    x_real_V_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_2_ce0 <= ap_const_logic_1;
        else 
            x_real_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_2_d0 <= tmp_fu_510_p10;

    x_real_V_2_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_2_we0 <= ap_const_logic_1;
        else 
            x_real_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_3_address0 <= x_real_V_3_addr_reg_682;

    x_real_V_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_3_ce0 <= ap_const_logic_1;
        else 
            x_real_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_3_d0 <= tmp_fu_510_p10;

    x_real_V_3_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_3_we0 <= ap_const_logic_1;
        else 
            x_real_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_4_address0 <= x_real_V_4_addr_reg_687;

    x_real_V_4_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_4_ce0 <= ap_const_logic_1;
        else 
            x_real_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_4_d0 <= tmp_fu_510_p10;

    x_real_V_4_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_4_we0 <= ap_const_logic_1;
        else 
            x_real_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_5_address0 <= x_real_V_5_addr_reg_692;

    x_real_V_5_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_5_ce0 <= ap_const_logic_1;
        else 
            x_real_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_5_d0 <= tmp_fu_510_p10;

    x_real_V_5_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_5_we0 <= ap_const_logic_1;
        else 
            x_real_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_6_address0 <= x_real_V_6_addr_reg_697;

    x_real_V_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_6_ce0 <= ap_const_logic_1;
        else 
            x_real_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_6_d0 <= tmp_fu_510_p10;

    x_real_V_6_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_6_we0 <= ap_const_logic_1;
        else 
            x_real_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_7_address0 <= x_real_V_7_addr_reg_702;

    x_real_V_7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_7_ce0 <= ap_const_logic_1;
        else 
            x_real_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_7_d0 <= tmp_fu_510_p10;

    x_real_V_7_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_7_we0 <= ap_const_logic_1;
        else 
            x_real_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_address0 <= x_real_V_addr_reg_667;

    x_real_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_real_V_ce0 <= ap_const_logic_1;
        else 
            x_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_real_V_d0 <= tmp_fu_510_p10;

    x_real_V_we0_assign_proc : process(ap_CS_fsm_state2, trunc_ln1_reg_747)
    begin
        if (((trunc_ln1_reg_747 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_real_V_we0 <= ap_const_logic_1;
        else 
            x_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln324_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln322_fu_436_p1),64));
end behav;
