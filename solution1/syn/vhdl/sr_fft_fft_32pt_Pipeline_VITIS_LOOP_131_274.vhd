-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sr_fft_fft_32pt_Pipeline_VITIS_LOOP_131_274 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    o2_out_imag_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_imag_V_4_ce0 : OUT STD_LOGIC;
    o2_out_imag_V_4_we0 : OUT STD_LOGIC;
    o2_out_imag_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_imag_V_4_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_imag_V_4_ce1 : OUT STD_LOGIC;
    o2_out_imag_V_4_we1 : OUT STD_LOGIC;
    o2_out_imag_V_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_imag_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_imag_V_ce0 : OUT STD_LOGIC;
    o2_out_imag_V_we0 : OUT STD_LOGIC;
    o2_out_imag_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_imag_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_imag_V_ce1 : OUT STD_LOGIC;
    o2_out_imag_V_we1 : OUT STD_LOGIC;
    o2_out_imag_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_real_V_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_real_V_4_ce0 : OUT STD_LOGIC;
    o2_out_real_V_4_we0 : OUT STD_LOGIC;
    o2_out_real_V_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_real_V_4_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_real_V_4_ce1 : OUT STD_LOGIC;
    o2_out_real_V_4_we1 : OUT STD_LOGIC;
    o2_out_real_V_4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_real_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_real_V_ce0 : OUT STD_LOGIC;
    o2_out_real_V_we0 : OUT STD_LOGIC;
    o2_out_real_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    o2_out_real_V_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    o2_out_real_V_ce1 : OUT STD_LOGIC;
    o2_out_real_V_we1 : OUT STD_LOGIC;
    o2_out_real_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_71 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_72 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_81 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_82 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_73 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_74 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_83 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_84 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_35 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_42 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_real_V_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_imag_V_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2394_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2394_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2394_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2394_p_ce : OUT STD_LOGIC;
    grp_fu_2398_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2398_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2398_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2398_p_ce : OUT STD_LOGIC;
    grp_fu_2402_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2402_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2402_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2402_p_ce : OUT STD_LOGIC;
    grp_fu_2406_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2406_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2406_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2406_p_ce : OUT STD_LOGIC;
    grp_fu_2410_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2410_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2410_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2410_p_ce : OUT STD_LOGIC;
    grp_fu_2414_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2414_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2414_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2414_p_ce : OUT STD_LOGIC;
    grp_fu_2418_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2418_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2418_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2418_p_ce : OUT STD_LOGIC;
    grp_fu_2422_p_din0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    grp_fu_2422_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2422_p_dout0 : IN STD_LOGIC_VECTOR (47 downto 0);
    grp_fu_2422_p_ce : OUT STD_LOGIC );
end;


architecture behav of sr_fft_fft_32pt_Pipeline_VITIS_LOOP_131_274 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln131_reg_772 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal TWIDDLE_REAL_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal TWIDDLE_REAL_V_ce0 : STD_LOGIC;
    signal TWIDDLE_REAL_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal TWIDDLE_IMAG_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal TWIDDLE_IMAG_V_ce0 : STD_LOGIC;
    signal TWIDDLE_IMAG_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal reg_330 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_334 : STD_LOGIC_VECTOR (17 downto 0);
    signal k_reg_765 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_765_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_765_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln131_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_reg_772_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_fu_358_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_776_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_362_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_785 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln136_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_real_V_fu_408_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_real_V_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1273_fu_420_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_15_fu_424_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_16_fu_427_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_17_fu_431_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal b_real_V_7_fu_458_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_real_V_7_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_13_fu_463_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_imag_V_13_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln813_reg_860 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_reg_865 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_7_reg_870 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_reg_875 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_18_fu_468_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_19_fu_472_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_20_fu_475_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1273_21_fu_479_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal c_real_V_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_imag_V_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln813_8_reg_916 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1348_3_reg_921 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln813_9_reg_926 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln1347_3_reg_931 : STD_LOGIC_VECTOR (47 downto 0);
    signal cpd_real_V_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpd_real_V_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpd_imag_V_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpd_imag_V_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_real_V_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_real_V_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_imag_V_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_imag_V_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln79_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln79_4_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln131_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln143_1_cast_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_fu_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln131_fu_352_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl2_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_3_fu_381_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_55_fu_391_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_fu_506_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_7_fu_520_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_8_fu_534_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_9_fu_548_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal d_real_V_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_imag_V_fu_552_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_real_V_13_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_imag_V_7_fu_596_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln143_fu_615_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_real_V_15_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_imag_V_9_fu_635_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sr_fft_mul_18s_32s_48_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component sr_fft_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component sr_fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    TWIDDLE_REAL_V_U : component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => TWIDDLE_REAL_V_address0,
        ce0 => TWIDDLE_REAL_V_ce0,
        q0 => TWIDDLE_REAL_V_q0);

    TWIDDLE_IMAG_V_U : component sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R
    generic map (
        DataWidth => 18,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => TWIDDLE_IMAG_V_address0,
        ce0 => TWIDDLE_IMAG_V_ce0,
        q0 => TWIDDLE_IMAG_V_q0);

    mux_21_32_1_1_U347 : component sr_fft_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => r_real_V_35,
        din1 => r_real_V_36,
        din2 => empty_54_reg_776_pp0_iter2_reg,
        dout => a_real_V_13_fu_589_p4);

    mux_21_32_1_1_U348 : component sr_fft_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => r_imag_V_40,
        din1 => r_imag_V_42,
        din2 => empty_54_reg_776_pp0_iter2_reg,
        dout => a_imag_V_7_fu_596_p4);

    mux_21_32_1_1_U349 : component sr_fft_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => r_real_V_37,
        din1 => r_real_V_38,
        din2 => empty_54_reg_776_pp0_iter2_reg,
        dout => a_real_V_15_fu_628_p4);

    mux_21_32_1_1_U350 : component sr_fft_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => r_imag_V_43,
        din1 => r_imag_V_44,
        din2 => empty_54_reg_776_pp0_iter2_reg,
        dout => a_imag_V_9_fu_635_p4);

    flow_control_loop_pipe_sequential_init_U : component sr_fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    k_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln131_fu_346_p2 = ap_const_lv1_0))) then 
                    k_1_fu_88 <= add_ln131_fu_352_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_1_fu_88 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_imag_V_13_reg_855 <= b_imag_V_13_fu_463_p3;
                b_real_V_7_reg_850 <= b_real_V_7_fu_458_p3;
                c_imag_V_reg_910 <= ret_V_7_fu_520_p2(47 downto 16);
                c_real_V_reg_904 <= ret_V_fu_506_p2(47 downto 16);
                empty_54_reg_776_pp0_iter1_reg <= empty_54_reg_776;
                empty_54_reg_776_pp0_iter2_reg <= empty_54_reg_776_pp0_iter1_reg;
                icmp_ln131_reg_772 <= icmp_ln131_fu_346_p2;
                icmp_ln131_reg_772_pp0_iter1_reg <= icmp_ln131_reg_772;
                k_reg_765 <= ap_sig_allocacmp_k;
                k_reg_765_pp0_iter1_reg <= k_reg_765;
                k_reg_765_pp0_iter2_reg <= k_reg_765_pp0_iter1_reg;
                mul_ln1347_3_reg_931 <= grp_fu_2422_p_dout0;
                mul_ln1348_3_reg_921 <= grp_fu_2414_p_dout0;
                mul_ln813_8_reg_916 <= grp_fu_2410_p_dout0;
                mul_ln813_9_reg_926 <= grp_fu_2418_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_reg_772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_imag_V_reg_821 <= b_imag_V_fu_414_p3;
                b_real_V_reg_816 <= b_real_V_fu_408_p3;
                icmp_ln136_reg_810 <= icmp_ln136_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                cmd_imag_V_reg_954 <= cmd_imag_V_fu_577_p2;
                cmd_real_V_reg_948 <= cmd_real_V_fu_572_p2;
                cpd_imag_V_reg_942 <= cpd_imag_V_fu_567_p2;
                cpd_real_V_reg_936 <= cpd_real_V_fu_562_p2;
                mul_ln1347_reg_875 <= grp_fu_2406_p_dout0;
                mul_ln1348_reg_865 <= grp_fu_2398_p_dout0;
                mul_ln813_7_reg_870 <= grp_fu_2402_p_dout0;
                mul_ln813_reg_860 <= grp_fu_2394_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln131_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_54_reg_776 <= empty_54_fu_358_p1;
                    tmp_s_reg_785(3) <= tmp_s_fu_362_p3(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln131_reg_772 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_330 <= TWIDDLE_REAL_V_q0;
                reg_334 <= TWIDDLE_IMAG_V_q0;
            end if;
        end if;
    end process;
    tmp_s_reg_785(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    TWIDDLE_IMAG_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln79_fu_370_p1, ap_block_pp0_stage0, zext_ln79_4_fu_397_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                TWIDDLE_IMAG_V_address0 <= zext_ln79_4_fu_397_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                TWIDDLE_IMAG_V_address0 <= zext_ln79_fu_370_p1(6 - 1 downto 0);
            else 
                TWIDDLE_IMAG_V_address0 <= "XXXXXX";
            end if;
        else 
            TWIDDLE_IMAG_V_address0 <= "XXXXXX";
        end if; 
    end process;


    TWIDDLE_IMAG_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            TWIDDLE_IMAG_V_ce0 <= ap_const_logic_1;
        else 
            TWIDDLE_IMAG_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    TWIDDLE_REAL_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln79_fu_370_p1, ap_block_pp0_stage0, zext_ln79_4_fu_397_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                TWIDDLE_REAL_V_address0 <= zext_ln79_4_fu_397_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                TWIDDLE_REAL_V_address0 <= zext_ln79_fu_370_p1(6 - 1 downto 0);
            else 
                TWIDDLE_REAL_V_address0 <= "XXXXXX";
            end if;
        else 
            TWIDDLE_REAL_V_address0 <= "XXXXXX";
        end if; 
    end process;


    TWIDDLE_REAL_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            TWIDDLE_REAL_V_ce0 <= ap_const_logic_1;
        else 
            TWIDDLE_REAL_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln131_fu_352_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k) + unsigned(ap_const_lv2_1));
    add_ln143_1_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln143_fu_615_p2),64));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln131_reg_772)
    begin
        if (((icmp_ln131_reg_772 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln131_reg_772_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln131_reg_772_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_1_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_k <= k_1_fu_88;
        end if; 
    end process;

    b_imag_V_13_fu_463_p3 <= 
        r_imag_V_83 when (icmp_ln136_reg_810(0) = '1') else 
        r_imag_V_84;
    b_imag_V_fu_414_p3 <= 
        r_imag_V_81 when (icmp_ln136_fu_403_p2(0) = '1') else 
        r_imag_V_82;
    b_real_V_7_fu_458_p3 <= 
        r_real_V_73 when (icmp_ln136_reg_810(0) = '1') else 
        r_real_V_74;
    b_real_V_fu_408_p3 <= 
        r_real_V_71 when (icmp_ln136_fu_403_p2(0) = '1') else 
        r_real_V_72;
    cmd_imag_V_fu_577_p2 <= std_logic_vector(unsigned(c_imag_V_reg_910) - unsigned(d_imag_V_fu_552_p4));
    cmd_real_V_fu_572_p2 <= std_logic_vector(unsigned(c_real_V_reg_904) - unsigned(d_real_V_fu_538_p4));
    cpd_imag_V_fu_567_p2 <= std_logic_vector(unsigned(d_imag_V_fu_552_p4) + unsigned(c_imag_V_reg_910));
    cpd_real_V_fu_562_p2 <= std_logic_vector(unsigned(d_real_V_fu_538_p4) + unsigned(c_real_V_reg_904));
    d_imag_V_fu_552_p4 <= ret_V_9_fu_548_p2(47 downto 16);
    d_real_V_fu_538_p4 <= ret_V_8_fu_534_p2(47 downto 16);
    empty_54_fu_358_p1 <= ap_sig_allocacmp_k(1 - 1 downto 0);
    empty_55_fu_391_p2 <= std_logic_vector(unsigned(p_shl2_fu_384_p3) - unsigned(zext_ln79_3_fu_381_p1));
    grp_fu_2394_p_ce <= ap_const_logic_1;
    grp_fu_2394_p_din0 <= sext_ln1273_fu_420_p1(18 - 1 downto 0);
    grp_fu_2394_p_din1 <= sext_ln1273_15_fu_424_p1(32 - 1 downto 0);
    grp_fu_2398_p_ce <= ap_const_logic_1;
    grp_fu_2398_p_din0 <= sext_ln1273_16_fu_427_p1(18 - 1 downto 0);
    grp_fu_2398_p_din1 <= sext_ln1273_17_fu_431_p1(32 - 1 downto 0);
    grp_fu_2402_p_ce <= ap_const_logic_1;
    grp_fu_2402_p_din0 <= sext_ln1273_16_fu_427_p1(18 - 1 downto 0);
    grp_fu_2402_p_din1 <= sext_ln1273_15_fu_424_p1(32 - 1 downto 0);
    grp_fu_2406_p_ce <= ap_const_logic_1;
    grp_fu_2406_p_din0 <= sext_ln1273_fu_420_p1(18 - 1 downto 0);
    grp_fu_2406_p_din1 <= sext_ln1273_17_fu_431_p1(32 - 1 downto 0);
    grp_fu_2410_p_ce <= ap_const_logic_1;
    grp_fu_2410_p_din0 <= sext_ln1273_18_fu_468_p1(18 - 1 downto 0);
    grp_fu_2410_p_din1 <= sext_ln1273_19_fu_472_p1(32 - 1 downto 0);
    grp_fu_2414_p_ce <= ap_const_logic_1;
    grp_fu_2414_p_din0 <= sext_ln1273_20_fu_475_p1(18 - 1 downto 0);
    grp_fu_2414_p_din1 <= sext_ln1273_21_fu_479_p1(32 - 1 downto 0);
    grp_fu_2418_p_ce <= ap_const_logic_1;
    grp_fu_2418_p_din0 <= sext_ln1273_20_fu_475_p1(18 - 1 downto 0);
    grp_fu_2418_p_din1 <= sext_ln1273_19_fu_472_p1(32 - 1 downto 0);
    grp_fu_2422_p_ce <= ap_const_logic_1;
    grp_fu_2422_p_din0 <= sext_ln1273_18_fu_468_p1(18 - 1 downto 0);
    grp_fu_2422_p_din1 <= sext_ln1273_21_fu_479_p1(32 - 1 downto 0);
    icmp_ln131_fu_346_p2 <= "1" when (ap_sig_allocacmp_k = ap_const_lv2_2) else "0";
    icmp_ln136_fu_403_p2 <= "1" when (k_reg_765 = ap_const_lv2_0) else "0";
    o2_out_imag_V_4_address0 <= add_ln143_1_cast_fu_620_p1(2 - 1 downto 0);
    o2_out_imag_V_4_address1 <= zext_ln131_fu_582_p1(2 - 1 downto 0);

    o2_out_imag_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_4_ce0 <= ap_const_logic_1;
        else 
            o2_out_imag_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_imag_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_4_ce1 <= ap_const_logic_1;
        else 
            o2_out_imag_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_imag_V_4_d0 <= std_logic_vector(unsigned(a_imag_V_9_fu_635_p4) + unsigned(cmd_real_V_reg_948));
    o2_out_imag_V_4_d1 <= std_logic_vector(unsigned(a_imag_V_7_fu_596_p4) - unsigned(cpd_imag_V_reg_942));

    o2_out_imag_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_4_we0 <= ap_const_logic_1;
        else 
            o2_out_imag_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_imag_V_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_4_we1 <= ap_const_logic_1;
        else 
            o2_out_imag_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_imag_V_address0 <= add_ln143_1_cast_fu_620_p1(2 - 1 downto 0);
    o2_out_imag_V_address1 <= zext_ln131_fu_582_p1(2 - 1 downto 0);

    o2_out_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_ce0 <= ap_const_logic_1;
        else 
            o2_out_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_ce1 <= ap_const_logic_1;
        else 
            o2_out_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_imag_V_d0 <= std_logic_vector(unsigned(a_imag_V_9_fu_635_p4) - unsigned(cmd_real_V_reg_948));
    o2_out_imag_V_d1 <= std_logic_vector(unsigned(cpd_imag_V_reg_942) + unsigned(a_imag_V_7_fu_596_p4));

    o2_out_imag_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_we0 <= ap_const_logic_1;
        else 
            o2_out_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_imag_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_imag_V_we1 <= ap_const_logic_1;
        else 
            o2_out_imag_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_real_V_4_address0 <= add_ln143_1_cast_fu_620_p1(2 - 1 downto 0);
    o2_out_real_V_4_address1 <= zext_ln131_fu_582_p1(2 - 1 downto 0);

    o2_out_real_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_4_ce0 <= ap_const_logic_1;
        else 
            o2_out_real_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_real_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_4_ce1 <= ap_const_logic_1;
        else 
            o2_out_real_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_real_V_4_d0 <= std_logic_vector(unsigned(a_real_V_15_fu_628_p4) - unsigned(cmd_imag_V_reg_954));
    o2_out_real_V_4_d1 <= std_logic_vector(unsigned(a_real_V_13_fu_589_p4) - unsigned(cpd_real_V_reg_936));

    o2_out_real_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_4_we0 <= ap_const_logic_1;
        else 
            o2_out_real_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_real_V_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_4_we1 <= ap_const_logic_1;
        else 
            o2_out_real_V_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_real_V_address0 <= add_ln143_1_cast_fu_620_p1(2 - 1 downto 0);
    o2_out_real_V_address1 <= zext_ln131_fu_582_p1(2 - 1 downto 0);

    o2_out_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_ce0 <= ap_const_logic_1;
        else 
            o2_out_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_ce1 <= ap_const_logic_1;
        else 
            o2_out_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    o2_out_real_V_d0 <= std_logic_vector(unsigned(cmd_imag_V_reg_954) + unsigned(a_real_V_15_fu_628_p4));
    o2_out_real_V_d1 <= std_logic_vector(unsigned(cpd_real_V_reg_936) + unsigned(a_real_V_13_fu_589_p4));

    o2_out_real_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_we0 <= ap_const_logic_1;
        else 
            o2_out_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    o2_out_real_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            o2_out_real_V_we1 <= ap_const_logic_1;
        else 
            o2_out_real_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_fu_384_p3 <= (empty_54_reg_776 & ap_const_lv5_0);
    ret_V_7_fu_520_p2 <= std_logic_vector(unsigned(mul_ln813_7_reg_870) + unsigned(mul_ln1347_reg_875));
    ret_V_8_fu_534_p2 <= std_logic_vector(unsigned(mul_ln813_8_reg_916) - unsigned(mul_ln1348_3_reg_921));
    ret_V_9_fu_548_p2 <= std_logic_vector(unsigned(mul_ln813_9_reg_926) + unsigned(mul_ln1347_3_reg_931));
    ret_V_fu_506_p2 <= std_logic_vector(unsigned(mul_ln813_reg_860) - unsigned(mul_ln1348_reg_865));
        sext_ln1273_15_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_real_V_reg_816),48));

        sext_ln1273_16_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_334),48));

        sext_ln1273_17_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_imag_V_reg_821),48));

        sext_ln1273_18_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_330),48));

        sext_ln1273_19_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_real_V_7_reg_850),48));

        sext_ln1273_20_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_334),48));

        sext_ln1273_21_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_imag_V_13_reg_855),48));

        sext_ln1273_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_330),48));

    tmp_s_fu_362_p3 <= (empty_54_fu_358_p1 & ap_const_lv3_0);
    xor_ln143_fu_615_p2 <= (k_reg_765_pp0_iter2_reg xor ap_const_lv2_2);
    zext_ln131_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_765_pp0_iter2_reg),64));
    zext_ln79_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_785),6));
    zext_ln79_4_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_55_fu_391_p2),64));
    zext_ln79_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_362_p3),64));
end behav;
