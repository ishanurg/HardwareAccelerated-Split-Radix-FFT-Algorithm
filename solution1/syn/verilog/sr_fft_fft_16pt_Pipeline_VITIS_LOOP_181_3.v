// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_16pt_Pipeline_VITIS_LOOP_181_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_imag_3_address0,
        out_imag_3_ce0,
        out_imag_3_we0,
        out_imag_3_d0,
        out_imag_2_address0,
        out_imag_2_ce0,
        out_imag_2_we0,
        out_imag_2_d0,
        out_imag_1_address0,
        out_imag_1_ce0,
        out_imag_1_we0,
        out_imag_1_d0,
        out_imag_0_address0,
        out_imag_0_ce0,
        out_imag_0_we0,
        out_imag_0_d0,
        out_real_3_address0,
        out_real_3_ce0,
        out_real_3_we0,
        out_real_3_d0,
        out_real_2_address0,
        out_real_2_ce0,
        out_real_2_we0,
        out_real_2_d0,
        out_real_1_address0,
        out_real_1_ce0,
        out_real_1_we0,
        out_real_1_d0,
        out_real_0_address0,
        out_real_0_ce0,
        out_real_0_we0,
        out_real_0_d0,
        r_real_V_132,
        r_real_V_133,
        r_real_V_134,
        r_real_V_135,
        r_imag_V_147,
        r_imag_V_148,
        r_imag_V_149,
        r_imag_V_150,
        r_real_V_138,
        r_real_V_139,
        r_real_V_140,
        r_real_V_141,
        r_imag_V_153,
        r_imag_V_154,
        r_imag_V_155,
        r_imag_V_156,
        e_out_real_V_address0,
        e_out_real_V_ce0,
        e_out_real_V_q0,
        e_out_imag_V_address0,
        e_out_imag_V_ce0,
        e_out_imag_V_q0,
        e_out_real_V_11_address0,
        e_out_real_V_11_ce0,
        e_out_real_V_11_q0,
        e_out_imag_V_11_address0,
        e_out_imag_V_11_ce0,
        e_out_imag_V_11_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] out_imag_3_address0;
output   out_imag_3_ce0;
output   out_imag_3_we0;
output  [31:0] out_imag_3_d0;
output  [1:0] out_imag_2_address0;
output   out_imag_2_ce0;
output   out_imag_2_we0;
output  [31:0] out_imag_2_d0;
output  [1:0] out_imag_1_address0;
output   out_imag_1_ce0;
output   out_imag_1_we0;
output  [31:0] out_imag_1_d0;
output  [1:0] out_imag_0_address0;
output   out_imag_0_ce0;
output   out_imag_0_we0;
output  [31:0] out_imag_0_d0;
output  [1:0] out_real_3_address0;
output   out_real_3_ce0;
output   out_real_3_we0;
output  [31:0] out_real_3_d0;
output  [1:0] out_real_2_address0;
output   out_real_2_ce0;
output   out_real_2_we0;
output  [31:0] out_real_2_d0;
output  [1:0] out_real_1_address0;
output   out_real_1_ce0;
output   out_real_1_we0;
output  [31:0] out_real_1_d0;
output  [1:0] out_real_0_address0;
output   out_real_0_ce0;
output   out_real_0_we0;
output  [31:0] out_real_0_d0;
input  [31:0] r_real_V_132;
input  [31:0] r_real_V_133;
input  [31:0] r_real_V_134;
input  [31:0] r_real_V_135;
input  [31:0] r_imag_V_147;
input  [31:0] r_imag_V_148;
input  [31:0] r_imag_V_149;
input  [31:0] r_imag_V_150;
input  [31:0] r_real_V_138;
input  [31:0] r_real_V_139;
input  [31:0] r_real_V_140;
input  [31:0] r_real_V_141;
input  [31:0] r_imag_V_153;
input  [31:0] r_imag_V_154;
input  [31:0] r_imag_V_155;
input  [31:0] r_imag_V_156;
output  [1:0] e_out_real_V_address0;
output   e_out_real_V_ce0;
input  [31:0] e_out_real_V_q0;
output  [1:0] e_out_imag_V_address0;
output   e_out_imag_V_ce0;
input  [31:0] e_out_imag_V_q0;
output  [1:0] e_out_real_V_11_address0;
output   e_out_real_V_11_ce0;
input  [31:0] e_out_real_V_11_q0;
output  [1:0] e_out_imag_V_11_address0;
output   e_out_imag_V_11_ce0;
input  [31:0] e_out_imag_V_11_q0;

reg ap_idle;
reg out_imag_3_ce0;
reg out_imag_3_we0;
reg out_imag_2_ce0;
reg out_imag_2_we0;
reg out_imag_1_ce0;
reg out_imag_1_we0;
reg out_imag_0_ce0;
reg out_imag_0_we0;
reg out_real_3_ce0;
reg out_real_3_we0;
reg out_real_2_ce0;
reg out_real_2_we0;
reg out_real_1_ce0;
reg out_real_1_we0;
reg out_real_0_ce0;
reg out_real_0_we0;
reg e_out_real_V_ce0;
reg e_out_imag_V_ce0;
reg e_out_real_V_11_ce0;
reg e_out_imag_V_11_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state6_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln181_reg_738;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] TWIDDLE_REAL_V_address0;
reg    TWIDDLE_REAL_V_ce0;
wire   [17:0] TWIDDLE_REAL_V_q0;
reg   [5:0] TWIDDLE_IMAG_V_address0;
reg    TWIDDLE_IMAG_V_ce0;
wire   [17:0] TWIDDLE_IMAG_V_q0;
reg  signed [17:0] reg_402;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
reg  signed [17:0] reg_406;
reg   [2:0] k_reg_733;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln181_fu_418_p2;
reg   [0:0] icmp_ln181_reg_738_pp0_iter1_reg;
wire   [1:0] empty_58_fu_430_p1;
reg   [1:0] empty_58_reg_742;
wire   [3:0] tmp_s_fu_434_p3;
reg   [3:0] tmp_s_reg_747;
wire   [31:0] b_real_V_fu_448_p6;
reg   [31:0] b_real_V_reg_762;
wire   [31:0] b_imag_V_fu_462_p6;
reg  signed [31:0] b_imag_V_reg_767;
wire   [31:0] b_real_V_24_fu_476_p6;
reg  signed [31:0] b_real_V_24_reg_772;
wire   [31:0] b_imag_V_32_fu_490_p6;
reg  signed [31:0] b_imag_V_32_reg_777;
wire  signed [47:0] sext_ln1273_fu_531_p1;
wire  signed [47:0] sext_ln1273_22_fu_534_p1;
reg  signed [47:0] sext_ln1273_22_reg_798;
wire  signed [47:0] sext_ln1273_23_fu_538_p1;
reg  signed [47:0] sext_ln1273_23_reg_804;
wire  signed [47:0] sext_ln1273_24_fu_541_p1;
wire   [63:0] zext_ln181_fu_563_p1;
reg   [63:0] zext_ln181_reg_816;
reg   [63:0] zext_ln181_reg_816_pp0_iter2_reg;
wire   [47:0] grp_fu_545_p2;
reg   [47:0] mul_ln813_reg_830;
wire   [47:0] grp_fu_551_p2;
reg   [47:0] mul_ln1348_reg_835;
wire   [47:0] grp_fu_557_p2;
reg   [47:0] mul_ln813_10_reg_840;
wire  signed [47:0] sext_ln1273_25_fu_572_p1;
reg  signed [47:0] sext_ln1273_25_reg_845;
wire  signed [47:0] sext_ln1273_26_fu_575_p1;
reg  signed [47:0] sext_ln1273_26_reg_851;
wire  signed [47:0] sext_ln1273_27_fu_579_p1;
reg  signed [47:0] sext_ln1273_27_reg_857;
wire  signed [47:0] sext_ln1273_28_fu_582_p1;
reg  signed [47:0] sext_ln1273_28_reg_863;
reg   [31:0] r_real_V_74_reg_879;
wire   [47:0] grp_fu_568_p2;
reg   [47:0] mul_ln1347_reg_885;
wire   [47:0] grp_fu_586_p2;
reg   [47:0] mul_ln813_11_reg_890;
wire   [47:0] grp_fu_592_p2;
reg   [47:0] mul_ln1348_4_reg_895;
reg   [31:0] a_real_V_35_reg_900;
reg   [31:0] a_imag_V_32_reg_906;
reg   [31:0] r_imag_V_85_reg_912;
wire   [47:0] grp_fu_612_p2;
reg   [47:0] mul_ln813_12_reg_918;
wire   [47:0] grp_fu_616_p2;
reg   [47:0] mul_ln1347_4_reg_923;
wire   [31:0] r_real_V_76_fu_648_p2;
reg   [31:0] r_real_V_76_reg_928;
wire   [31:0] r_real_V_77_fu_653_p2;
reg   [31:0] r_real_V_77_reg_934;
wire   [31:0] r_imag_V_87_fu_672_p2;
reg   [31:0] r_imag_V_87_reg_940;
wire   [31:0] r_imag_V_88_fu_677_p2;
reg   [31:0] r_imag_V_88_reg_946;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln79_fu_442_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_6_fu_525_p1;
wire    ap_block_pp0_stage1;
reg   [2:0] k_3_fu_104;
wire   [2:0] add_ln181_fu_424_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_k;
wire   [5:0] p_shl2_fu_512_p3;
wire   [5:0] zext_ln79_5_fu_509_p1;
wire   [5:0] empty_59_fu_519_p2;
wire    ap_block_pp0_stage2;
wire  signed [31:0] grp_fu_545_p0;
wire  signed [17:0] grp_fu_551_p1;
wire  signed [31:0] grp_fu_557_p0;
wire  signed [17:0] grp_fu_557_p1;
wire  signed [31:0] grp_fu_568_p0;
wire  signed [17:0] grp_fu_568_p1;
wire   [47:0] ret_V_fu_598_p2;
wire  signed [31:0] grp_fu_612_p0;
wire  signed [17:0] grp_fu_612_p1;
wire  signed [31:0] grp_fu_616_p0;
wire  signed [17:0] grp_fu_616_p1;
wire   [47:0] ret_V_13_fu_620_p2;
wire   [47:0] ret_V_14_fu_634_p2;
wire   [31:0] r_real_V_75_fu_638_p4;
wire   [47:0] ret_V_15_fu_658_p2;
wire   [31:0] r_imag_V_86_fu_662_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_idle_pp0_0to0;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_REAL_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_REAL_V_address0),
    .ce0(TWIDDLE_REAL_V_ce0),
    .q0(TWIDDLE_REAL_V_q0)
);

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_IMAG_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_IMAG_V_address0),
    .ce0(TWIDDLE_IMAG_V_ce0),
    .q0(TWIDDLE_IMAG_V_q0)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U183(
    .din0(r_real_V_132),
    .din1(r_real_V_133),
    .din2(r_real_V_134),
    .din3(r_real_V_135),
    .din4(empty_58_fu_430_p1),
    .dout(b_real_V_fu_448_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U184(
    .din0(r_imag_V_147),
    .din1(r_imag_V_148),
    .din2(r_imag_V_149),
    .din3(r_imag_V_150),
    .din4(empty_58_fu_430_p1),
    .dout(b_imag_V_fu_462_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U185(
    .din0(r_real_V_138),
    .din1(r_real_V_139),
    .din2(r_real_V_140),
    .din3(r_real_V_141),
    .din4(empty_58_fu_430_p1),
    .dout(b_real_V_24_fu_476_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U186(
    .din0(r_imag_V_153),
    .din1(r_imag_V_154),
    .din2(r_imag_V_155),
    .din3(r_imag_V_156),
    .din4(empty_58_fu_430_p1),
    .dout(b_imag_V_32_fu_490_p6)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U187(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_545_p0),
    .din1(reg_402),
    .ce(1'b1),
    .dout(grp_fu_545_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_imag_V_reg_767),
    .din1(grp_fu_551_p1),
    .ce(1'b1),
    .dout(grp_fu_551_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U189(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_557_p0),
    .din1(grp_fu_557_p1),
    .ce(1'b1),
    .dout(grp_fu_557_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U190(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_568_p0),
    .din1(grp_fu_568_p1),
    .ce(1'b1),
    .dout(grp_fu_568_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_real_V_24_reg_772),
    .din1(reg_402),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_imag_V_32_reg_777),
    .din1(reg_406),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_612_p0),
    .din1(grp_fu_612_p1),
    .ce(1'b1),
    .dout(grp_fu_612_p2)
);

sr_fft_mul_32s_18s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 48 ))
mul_32s_18s_48_2_1_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_616_p0),
    .din1(grp_fu_616_p1),
    .ce(1'b1),
    .dout(grp_fu_616_p2)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln181_fu_418_p2 == 1'd0))) begin
            k_3_fu_104 <= add_ln181_fu_424_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_3_fu_104 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_imag_V_32_reg_906 <= e_out_imag_V_11_q0;
        a_real_V_35_reg_900 <= e_out_real_V_q0;
        mul_ln1347_reg_885 <= grp_fu_568_p2;
        mul_ln1348_4_reg_895 <= grp_fu_592_p2;
        mul_ln813_11_reg_890 <= grp_fu_586_p2;
        r_real_V_74_reg_879 <= {{ret_V_fu_598_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln181_fu_418_p2 == 1'd0))) begin
        b_imag_V_32_reg_777 <= b_imag_V_32_fu_490_p6;
        b_imag_V_reg_767 <= b_imag_V_fu_462_p6;
        b_real_V_24_reg_772 <= b_real_V_24_fu_476_p6;
        b_real_V_reg_762 <= b_real_V_fu_448_p6;
        empty_58_reg_742 <= empty_58_fu_430_p1;
        tmp_s_reg_747[3 : 2] <= tmp_s_fu_434_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln181_reg_738 <= icmp_ln181_fu_418_p2;
        icmp_ln181_reg_738_pp0_iter1_reg <= icmp_ln181_reg_738;
        k_reg_733 <= ap_sig_allocacmp_k;
        mul_ln1348_reg_835 <= grp_fu_551_p2;
        mul_ln813_10_reg_840 <= grp_fu_557_p2;
        mul_ln813_reg_830 <= grp_fu_545_p2;
        r_imag_V_87_reg_940 <= r_imag_V_87_fu_672_p2;
        r_imag_V_88_reg_946 <= r_imag_V_88_fu_677_p2;
        sext_ln1273_25_reg_845 <= sext_ln1273_25_fu_572_p1;
        sext_ln1273_26_reg_851 <= sext_ln1273_26_fu_575_p1;
        sext_ln1273_27_reg_857 <= sext_ln1273_27_fu_579_p1;
        sext_ln1273_28_reg_863 <= sext_ln1273_28_fu_582_p1;
        zext_ln181_reg_816[2 : 0] <= zext_ln181_fu_563_p1[2 : 0];
        zext_ln181_reg_816_pp0_iter2_reg[2 : 0] <= zext_ln181_reg_816[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln1347_4_reg_923 <= grp_fu_616_p2;
        mul_ln813_12_reg_918 <= grp_fu_612_p2;
        r_imag_V_85_reg_912 <= {{ret_V_13_fu_620_p2[47:16]}};
        r_real_V_76_reg_928 <= r_real_V_76_fu_648_p2;
        r_real_V_77_reg_934 <= r_real_V_77_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln181_reg_738 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln181_reg_738 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_402 <= TWIDDLE_REAL_V_q0;
        reg_406 <= TWIDDLE_IMAG_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln181_reg_738 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sext_ln1273_22_reg_798 <= sext_ln1273_22_fu_534_p1;
        sext_ln1273_23_reg_804 <= sext_ln1273_23_fu_538_p1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_6_fu_525_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_fu_442_p1;
        end else begin
            TWIDDLE_IMAG_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_IMAG_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_IMAG_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_IMAG_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_6_fu_525_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_fu_442_p1;
        end else begin
            TWIDDLE_REAL_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_REAL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_REAL_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_REAL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln181_reg_738 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln181_reg_738_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k = 3'd0;
    end else begin
        ap_sig_allocacmp_k = k_3_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_11_ce0 = 1'b1;
    end else begin
        e_out_imag_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_ce0 = 1'b1;
    end else begin
        e_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_11_ce0 = 1'b1;
    end else begin
        e_out_real_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_ce0 = 1'b1;
    end else begin
        e_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_imag_0_ce0 = 1'b1;
    end else begin
        out_imag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_imag_0_we0 = 1'b1;
    end else begin
        out_imag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_1_ce0 = 1'b1;
    end else begin
        out_imag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_1_we0 = 1'b1;
    end else begin
        out_imag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_imag_2_ce0 = 1'b1;
    end else begin
        out_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_imag_2_we0 = 1'b1;
    end else begin
        out_imag_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_3_ce0 = 1'b1;
    end else begin
        out_imag_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_3_we0 = 1'b1;
    end else begin
        out_imag_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_0_ce0 = 1'b1;
    end else begin
        out_real_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_0_we0 = 1'b1;
    end else begin
        out_real_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_real_1_ce0 = 1'b1;
    end else begin
        out_real_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_real_1_we0 = 1'b1;
    end else begin
        out_real_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_2_ce0 = 1'b1;
    end else begin
        out_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_2_we0 = 1'b1;
    end else begin
        out_real_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_real_3_ce0 = 1'b1;
    end else begin
        out_real_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_real_3_we0 = 1'b1;
    end else begin
        out_real_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln181_fu_424_p2 = (ap_sig_allocacmp_k + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign e_out_imag_V_11_address0 = zext_ln181_fu_563_p1;

assign e_out_imag_V_address0 = zext_ln181_reg_816;

assign e_out_real_V_11_address0 = zext_ln181_reg_816;

assign e_out_real_V_address0 = zext_ln181_fu_563_p1;

assign empty_58_fu_430_p1 = ap_sig_allocacmp_k[1:0];

assign empty_59_fu_519_p2 = (p_shl2_fu_512_p3 - zext_ln79_5_fu_509_p1);

assign grp_fu_545_p0 = sext_ln1273_fu_531_p1;

assign grp_fu_551_p1 = sext_ln1273_24_fu_541_p1;

assign grp_fu_557_p0 = sext_ln1273_fu_531_p1;

assign grp_fu_557_p1 = sext_ln1273_24_fu_541_p1;

assign grp_fu_568_p0 = sext_ln1273_23_reg_804;

assign grp_fu_568_p1 = sext_ln1273_22_reg_798;

assign grp_fu_612_p0 = sext_ln1273_25_reg_845;

assign grp_fu_612_p1 = sext_ln1273_28_reg_863;

assign grp_fu_616_p0 = sext_ln1273_27_reg_857;

assign grp_fu_616_p1 = sext_ln1273_26_reg_851;

assign icmp_ln181_fu_418_p2 = ((ap_sig_allocacmp_k == 3'd4) ? 1'b1 : 1'b0);

assign out_imag_0_address0 = zext_ln181_reg_816_pp0_iter2_reg;

assign out_imag_0_d0 = (e_out_imag_V_q0 + r_imag_V_87_reg_940);

assign out_imag_1_address0 = zext_ln181_reg_816;

assign out_imag_1_d0 = (a_imag_V_32_reg_906 - r_real_V_77_reg_934);

assign out_imag_2_address0 = zext_ln181_reg_816_pp0_iter2_reg;

assign out_imag_2_d0 = (e_out_imag_V_q0 - r_imag_V_87_reg_940);

assign out_imag_3_address0 = zext_ln181_reg_816;

assign out_imag_3_d0 = (a_imag_V_32_reg_906 + r_real_V_77_reg_934);

assign out_real_0_address0 = zext_ln181_reg_816;

assign out_real_0_d0 = (a_real_V_35_reg_900 + r_real_V_76_reg_928);

assign out_real_1_address0 = zext_ln181_reg_816_pp0_iter2_reg;

assign out_real_1_d0 = (e_out_real_V_11_q0 + r_imag_V_88_reg_946);

assign out_real_2_address0 = zext_ln181_reg_816;

assign out_real_2_d0 = (a_real_V_35_reg_900 - r_real_V_76_reg_928);

assign out_real_3_address0 = zext_ln181_reg_816_pp0_iter2_reg;

assign out_real_3_d0 = (e_out_real_V_11_q0 - r_imag_V_88_reg_946);

assign p_shl2_fu_512_p3 = {{empty_58_reg_742}, {4'd0}};

assign r_imag_V_86_fu_662_p4 = {{ret_V_15_fu_658_p2[47:16]}};

assign r_imag_V_87_fu_672_p2 = (r_imag_V_86_fu_662_p4 + r_imag_V_85_reg_912);

assign r_imag_V_88_fu_677_p2 = (r_imag_V_85_reg_912 - r_imag_V_86_fu_662_p4);

assign r_real_V_75_fu_638_p4 = {{ret_V_14_fu_634_p2[47:16]}};

assign r_real_V_76_fu_648_p2 = (r_real_V_75_fu_638_p4 + r_real_V_74_reg_879);

assign r_real_V_77_fu_653_p2 = (r_real_V_74_reg_879 - r_real_V_75_fu_638_p4);

assign ret_V_13_fu_620_p2 = (mul_ln1347_reg_885 + mul_ln813_10_reg_840);

assign ret_V_14_fu_634_p2 = (mul_ln813_11_reg_890 - mul_ln1348_4_reg_895);

assign ret_V_15_fu_658_p2 = (mul_ln1347_4_reg_923 + mul_ln813_12_reg_918);

assign ret_V_fu_598_p2 = (mul_ln813_reg_830 - mul_ln1348_reg_835);

assign sext_ln1273_22_fu_534_p1 = reg_402;

assign sext_ln1273_23_fu_538_p1 = b_imag_V_reg_767;

assign sext_ln1273_24_fu_541_p1 = reg_406;

assign sext_ln1273_25_fu_572_p1 = b_real_V_24_reg_772;

assign sext_ln1273_26_fu_575_p1 = reg_402;

assign sext_ln1273_27_fu_579_p1 = b_imag_V_32_reg_777;

assign sext_ln1273_28_fu_582_p1 = reg_406;

assign sext_ln1273_fu_531_p1 = $signed(b_real_V_reg_762);

assign tmp_s_fu_434_p3 = {{empty_58_fu_430_p1}, {2'd0}};

assign zext_ln181_fu_563_p1 = k_reg_733;

assign zext_ln79_5_fu_509_p1 = tmp_s_reg_747;

assign zext_ln79_6_fu_525_p1 = empty_59_fu_519_p2;

assign zext_ln79_fu_442_p1 = tmp_s_fu_434_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_747[1:0] <= 2'b00;
    zext_ln181_reg_816[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln181_reg_816_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //sr_fft_fft_16pt_Pipeline_VITIS_LOOP_181_3
