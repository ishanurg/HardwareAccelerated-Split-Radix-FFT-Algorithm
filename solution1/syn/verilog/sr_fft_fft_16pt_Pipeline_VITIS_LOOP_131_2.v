// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_out_imag_V_11_address0,
        e_out_imag_V_11_ce0,
        e_out_imag_V_11_we0,
        e_out_imag_V_11_d0,
        e_out_imag_V_11_address1,
        e_out_imag_V_11_ce1,
        e_out_imag_V_11_we1,
        e_out_imag_V_11_d1,
        e_out_imag_V_address0,
        e_out_imag_V_ce0,
        e_out_imag_V_we0,
        e_out_imag_V_d0,
        e_out_imag_V_address1,
        e_out_imag_V_ce1,
        e_out_imag_V_we1,
        e_out_imag_V_d1,
        e_out_real_V_11_address0,
        e_out_real_V_11_ce0,
        e_out_real_V_11_we0,
        e_out_real_V_11_d0,
        e_out_real_V_11_address1,
        e_out_real_V_11_ce1,
        e_out_real_V_11_we1,
        e_out_real_V_11_d1,
        e_out_real_V_address0,
        e_out_real_V_ce0,
        e_out_real_V_we0,
        e_out_real_V_d0,
        e_out_real_V_address1,
        e_out_real_V_ce1,
        e_out_real_V_we1,
        e_out_real_V_d1,
        r_real_V_126,
        r_real_V_127,
        r_imag_V_141,
        r_imag_V_142,
        r_real_V_128,
        r_real_V_129,
        r_imag_V_143,
        r_imag_V_144,
        r_real_V,
        r_real_V_83,
        r_imag_V,
        r_imag_V_94,
        r_real_V_84,
        r_real_V_85,
        r_imag_V_95,
        r_imag_V_96
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] e_out_imag_V_11_address0;
output   e_out_imag_V_11_ce0;
output   e_out_imag_V_11_we0;
output  [31:0] e_out_imag_V_11_d0;
output  [1:0] e_out_imag_V_11_address1;
output   e_out_imag_V_11_ce1;
output   e_out_imag_V_11_we1;
output  [31:0] e_out_imag_V_11_d1;
output  [1:0] e_out_imag_V_address0;
output   e_out_imag_V_ce0;
output   e_out_imag_V_we0;
output  [31:0] e_out_imag_V_d0;
output  [1:0] e_out_imag_V_address1;
output   e_out_imag_V_ce1;
output   e_out_imag_V_we1;
output  [31:0] e_out_imag_V_d1;
output  [1:0] e_out_real_V_11_address0;
output   e_out_real_V_11_ce0;
output   e_out_real_V_11_we0;
output  [31:0] e_out_real_V_11_d0;
output  [1:0] e_out_real_V_11_address1;
output   e_out_real_V_11_ce1;
output   e_out_real_V_11_we1;
output  [31:0] e_out_real_V_11_d1;
output  [1:0] e_out_real_V_address0;
output   e_out_real_V_ce0;
output   e_out_real_V_we0;
output  [31:0] e_out_real_V_d0;
output  [1:0] e_out_real_V_address1;
output   e_out_real_V_ce1;
output   e_out_real_V_we1;
output  [31:0] e_out_real_V_d1;
input  [31:0] r_real_V_126;
input  [31:0] r_real_V_127;
input  [31:0] r_imag_V_141;
input  [31:0] r_imag_V_142;
input  [31:0] r_real_V_128;
input  [31:0] r_real_V_129;
input  [31:0] r_imag_V_143;
input  [31:0] r_imag_V_144;
input  [31:0] r_real_V;
input  [31:0] r_real_V_83;
input  [31:0] r_imag_V;
input  [31:0] r_imag_V_94;
input  [31:0] r_real_V_84;
input  [31:0] r_real_V_85;
input  [31:0] r_imag_V_95;
input  [31:0] r_imag_V_96;

reg ap_idle;
reg e_out_imag_V_11_ce0;
reg e_out_imag_V_11_we0;
reg e_out_imag_V_11_ce1;
reg e_out_imag_V_11_we1;
reg e_out_imag_V_ce0;
reg e_out_imag_V_we0;
reg e_out_imag_V_ce1;
reg e_out_imag_V_we1;
reg e_out_real_V_11_ce0;
reg e_out_real_V_11_we0;
reg e_out_real_V_11_ce1;
reg e_out_real_V_11_we1;
reg e_out_real_V_ce0;
reg e_out_real_V_we0;
reg e_out_real_V_ce1;
reg e_out_real_V_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln131_reg_772;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [5:0] TWIDDLE_REAL_V_address0;
reg    TWIDDLE_REAL_V_ce0;
wire   [17:0] TWIDDLE_REAL_V_q0;
reg   [5:0] TWIDDLE_IMAG_V_address0;
reg    TWIDDLE_IMAG_V_ce0;
wire   [17:0] TWIDDLE_IMAG_V_q0;
reg   [17:0] reg_330;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [17:0] reg_334;
reg   [1:0] k_4_reg_765;
reg   [1:0] k_4_reg_765_pp0_iter1_reg;
reg   [1:0] k_4_reg_765_pp0_iter2_reg;
wire   [0:0] icmp_ln131_fu_346_p2;
reg   [0:0] icmp_ln131_reg_772_pp0_iter1_reg;
wire   [0:0] empty_60_fu_358_p1;
reg   [0:0] empty_60_reg_776;
reg   [0:0] empty_60_reg_776_pp0_iter1_reg;
reg   [0:0] empty_60_reg_776_pp0_iter2_reg;
wire   [3:0] tmp_s_fu_362_p3;
reg   [3:0] tmp_s_reg_785;
wire   [0:0] icmp_ln136_fu_403_p2;
reg   [0:0] icmp_ln136_reg_810;
wire   [31:0] b_real_V_fu_408_p3;
reg   [31:0] b_real_V_reg_816;
wire   [31:0] b_imag_V_fu_414_p3;
reg   [31:0] b_imag_V_reg_821;
wire  signed [47:0] sext_ln1273_fu_420_p1;
wire  signed [47:0] sext_ln1273_29_fu_424_p1;
wire  signed [47:0] sext_ln1273_30_fu_427_p1;
wire  signed [47:0] sext_ln1273_31_fu_431_p1;
wire   [31:0] b_real_V_27_fu_458_p3;
reg   [31:0] b_real_V_27_reg_850;
wire   [31:0] b_imag_V_36_fu_463_p3;
reg   [31:0] b_imag_V_36_reg_855;
wire   [47:0] grp_fu_434_p2;
reg   [47:0] mul_ln813_reg_860;
wire   [47:0] grp_fu_440_p2;
reg   [47:0] mul_ln1348_reg_865;
wire   [47:0] grp_fu_446_p2;
reg   [47:0] mul_ln813_13_reg_870;
wire   [47:0] grp_fu_452_p2;
reg   [47:0] mul_ln1347_reg_875;
wire  signed [47:0] sext_ln1273_32_fu_468_p1;
wire  signed [47:0] sext_ln1273_33_fu_472_p1;
wire  signed [47:0] sext_ln1273_34_fu_475_p1;
wire  signed [47:0] sext_ln1273_35_fu_479_p1;
reg   [31:0] c_real_V_reg_904;
reg   [31:0] c_imag_V_reg_910;
wire   [47:0] grp_fu_482_p2;
reg   [47:0] mul_ln813_14_reg_916;
wire   [47:0] grp_fu_488_p2;
reg   [47:0] mul_ln1348_5_reg_921;
wire   [47:0] grp_fu_494_p2;
reg   [47:0] mul_ln813_15_reg_926;
wire   [47:0] grp_fu_500_p2;
reg   [47:0] mul_ln1347_5_reg_931;
wire   [31:0] cpd_real_V_fu_562_p2;
reg   [31:0] cpd_real_V_reg_936;
wire   [31:0] cpd_imag_V_fu_567_p2;
reg   [31:0] cpd_imag_V_reg_942;
wire   [31:0] cmd_real_V_fu_572_p2;
reg   [31:0] cmd_real_V_reg_948;
wire   [31:0] cmd_imag_V_fu_577_p2;
reg   [31:0] cmd_imag_V_reg_954;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln79_fu_370_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_8_fu_397_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln131_fu_582_p1;
wire   [63:0] add_ln143_cast_fu_620_p1;
reg   [1:0] k_fu_88;
wire   [1:0] add_ln131_fu_352_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_k_4;
wire   [5:0] p_shl_fu_384_p3;
wire   [5:0] zext_ln79_7_fu_381_p1;
wire   [5:0] empty_61_fu_391_p2;
wire  signed [17:0] grp_fu_434_p0;
wire  signed [31:0] grp_fu_434_p1;
wire  signed [17:0] grp_fu_440_p0;
wire  signed [31:0] grp_fu_440_p1;
wire  signed [17:0] grp_fu_446_p0;
wire  signed [31:0] grp_fu_446_p1;
wire  signed [17:0] grp_fu_452_p0;
wire  signed [31:0] grp_fu_452_p1;
wire  signed [17:0] grp_fu_482_p0;
wire  signed [31:0] grp_fu_482_p1;
wire  signed [17:0] grp_fu_488_p0;
wire  signed [31:0] grp_fu_488_p1;
wire  signed [17:0] grp_fu_494_p0;
wire  signed [31:0] grp_fu_494_p1;
wire  signed [17:0] grp_fu_500_p0;
wire  signed [31:0] grp_fu_500_p1;
wire   [47:0] ret_V_fu_506_p2;
wire   [47:0] ret_V_18_fu_520_p2;
wire   [47:0] ret_V_19_fu_534_p2;
wire   [47:0] ret_V_20_fu_548_p2;
wire   [31:0] d_real_V_fu_538_p4;
wire   [31:0] d_imag_V_fu_552_p4;
wire   [31:0] a_real_V_38_fu_589_p4;
wire   [31:0] a_imag_V_33_fu_596_p4;
wire   [1:0] xor_ln143_fu_615_p2;
wire   [31:0] a_real_V_40_fu_628_p4;
wire   [31:0] a_imag_V_35_fu_635_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_REAL_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_REAL_V_address0),
    .ce0(TWIDDLE_REAL_V_ce0),
    .q0(TWIDDLE_REAL_V_q0)
);

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_IMAG_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_IMAG_V_address0),
    .ce0(TWIDDLE_IMAG_V_ce0),
    .q0(TWIDDLE_IMAG_V_q0)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_434_p0),
    .din1(grp_fu_434_p1),
    .ce(1'b1),
    .dout(grp_fu_434_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_440_p0),
    .din1(grp_fu_440_p1),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_446_p0),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_452_p0),
    .din1(grp_fu_452_p1),
    .ce(1'b1),
    .dout(grp_fu_452_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_482_p0),
    .din1(grp_fu_482_p1),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_488_p0),
    .din1(grp_fu_488_p1),
    .ce(1'b1),
    .dout(grp_fu_488_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_494_p0),
    .din1(grp_fu_494_p1),
    .ce(1'b1),
    .dout(grp_fu_494_p2)
);

sr_fft_mul_18s_32s_48_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_18s_32s_48_2_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_500_p0),
    .din1(grp_fu_500_p1),
    .ce(1'b1),
    .dout(grp_fu_500_p2)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U122(
    .din0(r_real_V),
    .din1(r_real_V_83),
    .din2(empty_60_reg_776_pp0_iter2_reg),
    .dout(a_real_V_38_fu_589_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U123(
    .din0(r_imag_V),
    .din1(r_imag_V_94),
    .din2(empty_60_reg_776_pp0_iter2_reg),
    .dout(a_imag_V_33_fu_596_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U124(
    .din0(r_real_V_84),
    .din1(r_real_V_85),
    .din2(empty_60_reg_776_pp0_iter2_reg),
    .dout(a_real_V_40_fu_628_p4)
);

sr_fft_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U125(
    .din0(r_imag_V_95),
    .din1(r_imag_V_96),
    .din2(empty_60_reg_776_pp0_iter2_reg),
    .dout(a_imag_V_35_fu_635_p4)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln131_fu_346_p2 == 1'd0))) begin
            k_fu_88 <= add_ln131_fu_352_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_88 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_imag_V_36_reg_855 <= b_imag_V_36_fu_463_p3;
        b_real_V_27_reg_850 <= b_real_V_27_fu_458_p3;
        c_imag_V_reg_910 <= {{ret_V_18_fu_520_p2[47:16]}};
        c_real_V_reg_904 <= {{ret_V_fu_506_p2[47:16]}};
        empty_60_reg_776_pp0_iter1_reg <= empty_60_reg_776;
        empty_60_reg_776_pp0_iter2_reg <= empty_60_reg_776_pp0_iter1_reg;
        icmp_ln131_reg_772 <= icmp_ln131_fu_346_p2;
        icmp_ln131_reg_772_pp0_iter1_reg <= icmp_ln131_reg_772;
        k_4_reg_765 <= ap_sig_allocacmp_k_4;
        k_4_reg_765_pp0_iter1_reg <= k_4_reg_765;
        k_4_reg_765_pp0_iter2_reg <= k_4_reg_765_pp0_iter1_reg;
        mul_ln1347_5_reg_931 <= grp_fu_500_p2;
        mul_ln1348_5_reg_921 <= grp_fu_488_p2;
        mul_ln813_14_reg_916 <= grp_fu_482_p2;
        mul_ln813_15_reg_926 <= grp_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_reg_772 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_imag_V_reg_821 <= b_imag_V_fu_414_p3;
        b_real_V_reg_816 <= b_real_V_fu_408_p3;
        icmp_ln136_reg_810 <= icmp_ln136_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cmd_imag_V_reg_954 <= cmd_imag_V_fu_577_p2;
        cmd_real_V_reg_948 <= cmd_real_V_fu_572_p2;
        cpd_imag_V_reg_942 <= cpd_imag_V_fu_567_p2;
        cpd_real_V_reg_936 <= cpd_real_V_fu_562_p2;
        mul_ln1347_reg_875 <= grp_fu_452_p2;
        mul_ln1348_reg_865 <= grp_fu_440_p2;
        mul_ln813_13_reg_870 <= grp_fu_446_p2;
        mul_ln813_reg_860 <= grp_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln131_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_60_reg_776 <= empty_60_fu_358_p1;
        tmp_s_reg_785[3] <= tmp_s_fu_362_p3[3];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln131_reg_772 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_330 <= TWIDDLE_REAL_V_q0;
        reg_334 <= TWIDDLE_IMAG_V_q0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_8_fu_397_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_fu_370_p1;
        end else begin
            TWIDDLE_IMAG_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_IMAG_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_IMAG_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_IMAG_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_8_fu_397_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_fu_370_p1;
        end else begin
            TWIDDLE_REAL_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_REAL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_REAL_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_REAL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln131_reg_772 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln131_reg_772_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_4 = 2'd0;
    end else begin
        ap_sig_allocacmp_k_4 = k_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_11_ce0 = 1'b1;
    end else begin
        e_out_imag_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_11_ce1 = 1'b1;
    end else begin
        e_out_imag_V_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_11_we0 = 1'b1;
    end else begin
        e_out_imag_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_11_we1 = 1'b1;
    end else begin
        e_out_imag_V_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_ce0 = 1'b1;
    end else begin
        e_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_ce1 = 1'b1;
    end else begin
        e_out_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_we0 = 1'b1;
    end else begin
        e_out_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_we1 = 1'b1;
    end else begin
        e_out_imag_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_11_ce0 = 1'b1;
    end else begin
        e_out_real_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_11_ce1 = 1'b1;
    end else begin
        e_out_real_V_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_11_we0 = 1'b1;
    end else begin
        e_out_real_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_11_we1 = 1'b1;
    end else begin
        e_out_real_V_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_ce0 = 1'b1;
    end else begin
        e_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_ce1 = 1'b1;
    end else begin
        e_out_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_we0 = 1'b1;
    end else begin
        e_out_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_we1 = 1'b1;
    end else begin
        e_out_real_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_352_p2 = (ap_sig_allocacmp_k_4 + 2'd1);

assign add_ln143_cast_fu_620_p1 = xor_ln143_fu_615_p2;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign b_imag_V_36_fu_463_p3 = ((icmp_ln136_reg_810[0:0] == 1'b1) ? r_imag_V_143 : r_imag_V_144);

assign b_imag_V_fu_414_p3 = ((icmp_ln136_fu_403_p2[0:0] == 1'b1) ? r_imag_V_141 : r_imag_V_142);

assign b_real_V_27_fu_458_p3 = ((icmp_ln136_reg_810[0:0] == 1'b1) ? r_real_V_128 : r_real_V_129);

assign b_real_V_fu_408_p3 = ((icmp_ln136_fu_403_p2[0:0] == 1'b1) ? r_real_V_126 : r_real_V_127);

assign cmd_imag_V_fu_577_p2 = (c_imag_V_reg_910 - d_imag_V_fu_552_p4);

assign cmd_real_V_fu_572_p2 = (c_real_V_reg_904 - d_real_V_fu_538_p4);

assign cpd_imag_V_fu_567_p2 = (d_imag_V_fu_552_p4 + c_imag_V_reg_910);

assign cpd_real_V_fu_562_p2 = (d_real_V_fu_538_p4 + c_real_V_reg_904);

assign d_imag_V_fu_552_p4 = {{ret_V_20_fu_548_p2[47:16]}};

assign d_real_V_fu_538_p4 = {{ret_V_19_fu_534_p2[47:16]}};

assign e_out_imag_V_11_address0 = add_ln143_cast_fu_620_p1;

assign e_out_imag_V_11_address1 = zext_ln131_fu_582_p1;

assign e_out_imag_V_11_d0 = (a_imag_V_35_fu_635_p4 + cmd_real_V_reg_948);

assign e_out_imag_V_11_d1 = (a_imag_V_33_fu_596_p4 - cpd_imag_V_reg_942);

assign e_out_imag_V_address0 = add_ln143_cast_fu_620_p1;

assign e_out_imag_V_address1 = zext_ln131_fu_582_p1;

assign e_out_imag_V_d0 = (a_imag_V_35_fu_635_p4 - cmd_real_V_reg_948);

assign e_out_imag_V_d1 = (cpd_imag_V_reg_942 + a_imag_V_33_fu_596_p4);

assign e_out_real_V_11_address0 = add_ln143_cast_fu_620_p1;

assign e_out_real_V_11_address1 = zext_ln131_fu_582_p1;

assign e_out_real_V_11_d0 = (a_real_V_40_fu_628_p4 - cmd_imag_V_reg_954);

assign e_out_real_V_11_d1 = (a_real_V_38_fu_589_p4 - cpd_real_V_reg_936);

assign e_out_real_V_address0 = add_ln143_cast_fu_620_p1;

assign e_out_real_V_address1 = zext_ln131_fu_582_p1;

assign e_out_real_V_d0 = (cmd_imag_V_reg_954 + a_real_V_40_fu_628_p4);

assign e_out_real_V_d1 = (cpd_real_V_reg_936 + a_real_V_38_fu_589_p4);

assign empty_60_fu_358_p1 = ap_sig_allocacmp_k_4[0:0];

assign empty_61_fu_391_p2 = (p_shl_fu_384_p3 - zext_ln79_7_fu_381_p1);

assign grp_fu_434_p0 = sext_ln1273_fu_420_p1;

assign grp_fu_434_p1 = sext_ln1273_29_fu_424_p1;

assign grp_fu_440_p0 = sext_ln1273_30_fu_427_p1;

assign grp_fu_440_p1 = sext_ln1273_31_fu_431_p1;

assign grp_fu_446_p0 = sext_ln1273_30_fu_427_p1;

assign grp_fu_446_p1 = sext_ln1273_29_fu_424_p1;

assign grp_fu_452_p0 = sext_ln1273_fu_420_p1;

assign grp_fu_452_p1 = sext_ln1273_31_fu_431_p1;

assign grp_fu_482_p0 = sext_ln1273_32_fu_468_p1;

assign grp_fu_482_p1 = sext_ln1273_33_fu_472_p1;

assign grp_fu_488_p0 = sext_ln1273_34_fu_475_p1;

assign grp_fu_488_p1 = sext_ln1273_35_fu_479_p1;

assign grp_fu_494_p0 = sext_ln1273_34_fu_475_p1;

assign grp_fu_494_p1 = sext_ln1273_33_fu_472_p1;

assign grp_fu_500_p0 = sext_ln1273_32_fu_468_p1;

assign grp_fu_500_p1 = sext_ln1273_35_fu_479_p1;

assign icmp_ln131_fu_346_p2 = ((ap_sig_allocacmp_k_4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_403_p2 = ((k_4_reg_765 == 2'd0) ? 1'b1 : 1'b0);

assign p_shl_fu_384_p3 = {{empty_60_reg_776}, {5'd0}};

assign ret_V_18_fu_520_p2 = (mul_ln813_13_reg_870 + mul_ln1347_reg_875);

assign ret_V_19_fu_534_p2 = (mul_ln813_14_reg_916 - mul_ln1348_5_reg_921);

assign ret_V_20_fu_548_p2 = (mul_ln813_15_reg_926 + mul_ln1347_5_reg_931);

assign ret_V_fu_506_p2 = (mul_ln813_reg_860 - mul_ln1348_reg_865);

assign sext_ln1273_29_fu_424_p1 = $signed(b_real_V_reg_816);

assign sext_ln1273_30_fu_427_p1 = $signed(reg_334);

assign sext_ln1273_31_fu_431_p1 = $signed(b_imag_V_reg_821);

assign sext_ln1273_32_fu_468_p1 = $signed(reg_330);

assign sext_ln1273_33_fu_472_p1 = $signed(b_real_V_27_reg_850);

assign sext_ln1273_34_fu_475_p1 = $signed(reg_334);

assign sext_ln1273_35_fu_479_p1 = $signed(b_imag_V_36_reg_855);

assign sext_ln1273_fu_420_p1 = $signed(reg_330);

assign tmp_s_fu_362_p3 = {{empty_60_fu_358_p1}, {3'd0}};

assign xor_ln143_fu_615_p2 = (k_4_reg_765_pp0_iter2_reg ^ 2'd2);

assign zext_ln131_fu_582_p1 = k_4_reg_765_pp0_iter2_reg;

assign zext_ln79_7_fu_381_p1 = tmp_s_reg_785;

assign zext_ln79_8_fu_397_p1 = empty_61_fu_391_p2;

assign zext_ln79_fu_370_p1 = tmp_s_fu_362_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_785[2:0] <= 3'b000;
end

endmodule //sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2
