// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_sr_fft_Pipeline_VITIS_LOOP_322_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_imag_V_7_address0,
        x_imag_V_7_ce0,
        x_imag_V_7_we0,
        x_imag_V_7_d0,
        x_imag_V_6_address0,
        x_imag_V_6_ce0,
        x_imag_V_6_we0,
        x_imag_V_6_d0,
        x_imag_V_5_address0,
        x_imag_V_5_ce0,
        x_imag_V_5_we0,
        x_imag_V_5_d0,
        x_imag_V_4_address0,
        x_imag_V_4_ce0,
        x_imag_V_4_we0,
        x_imag_V_4_d0,
        x_imag_V_3_address0,
        x_imag_V_3_ce0,
        x_imag_V_3_we0,
        x_imag_V_3_d0,
        x_imag_V_2_address0,
        x_imag_V_2_ce0,
        x_imag_V_2_we0,
        x_imag_V_2_d0,
        x_imag_V_1_address0,
        x_imag_V_1_ce0,
        x_imag_V_1_we0,
        x_imag_V_1_d0,
        x_imag_V_address0,
        x_imag_V_ce0,
        x_imag_V_we0,
        x_imag_V_d0,
        x_real_V_7_address0,
        x_real_V_7_ce0,
        x_real_V_7_we0,
        x_real_V_7_d0,
        x_real_V_6_address0,
        x_real_V_6_ce0,
        x_real_V_6_we0,
        x_real_V_6_d0,
        x_real_V_5_address0,
        x_real_V_5_ce0,
        x_real_V_5_we0,
        x_real_V_5_d0,
        x_real_V_4_address0,
        x_real_V_4_ce0,
        x_real_V_4_we0,
        x_real_V_4_d0,
        x_real_V_3_address0,
        x_real_V_3_ce0,
        x_real_V_3_we0,
        x_real_V_3_d0,
        x_real_V_2_address0,
        x_real_V_2_ce0,
        x_real_V_2_we0,
        x_real_V_2_d0,
        x_real_V_1_address0,
        x_real_V_1_ce0,
        x_real_V_1_we0,
        x_real_V_1_d0,
        x_real_V_address0,
        x_real_V_ce0,
        x_real_V_we0,
        x_real_V_d0,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_6_address0,
        input_6_ce0,
        input_6_q0,
        input_7_address0,
        input_7_ce0,
        input_7_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] x_imag_V_7_address0;
output   x_imag_V_7_ce0;
output   x_imag_V_7_we0;
output  [31:0] x_imag_V_7_d0;
output  [2:0] x_imag_V_6_address0;
output   x_imag_V_6_ce0;
output   x_imag_V_6_we0;
output  [31:0] x_imag_V_6_d0;
output  [2:0] x_imag_V_5_address0;
output   x_imag_V_5_ce0;
output   x_imag_V_5_we0;
output  [31:0] x_imag_V_5_d0;
output  [2:0] x_imag_V_4_address0;
output   x_imag_V_4_ce0;
output   x_imag_V_4_we0;
output  [31:0] x_imag_V_4_d0;
output  [2:0] x_imag_V_3_address0;
output   x_imag_V_3_ce0;
output   x_imag_V_3_we0;
output  [31:0] x_imag_V_3_d0;
output  [2:0] x_imag_V_2_address0;
output   x_imag_V_2_ce0;
output   x_imag_V_2_we0;
output  [31:0] x_imag_V_2_d0;
output  [2:0] x_imag_V_1_address0;
output   x_imag_V_1_ce0;
output   x_imag_V_1_we0;
output  [31:0] x_imag_V_1_d0;
output  [2:0] x_imag_V_address0;
output   x_imag_V_ce0;
output   x_imag_V_we0;
output  [31:0] x_imag_V_d0;
output  [2:0] x_real_V_7_address0;
output   x_real_V_7_ce0;
output   x_real_V_7_we0;
output  [31:0] x_real_V_7_d0;
output  [2:0] x_real_V_6_address0;
output   x_real_V_6_ce0;
output   x_real_V_6_we0;
output  [31:0] x_real_V_6_d0;
output  [2:0] x_real_V_5_address0;
output   x_real_V_5_ce0;
output   x_real_V_5_we0;
output  [31:0] x_real_V_5_d0;
output  [2:0] x_real_V_4_address0;
output   x_real_V_4_ce0;
output   x_real_V_4_we0;
output  [31:0] x_real_V_4_d0;
output  [2:0] x_real_V_3_address0;
output   x_real_V_3_ce0;
output   x_real_V_3_we0;
output  [31:0] x_real_V_3_d0;
output  [2:0] x_real_V_2_address0;
output   x_real_V_2_ce0;
output   x_real_V_2_we0;
output  [31:0] x_real_V_2_d0;
output  [2:0] x_real_V_1_address0;
output   x_real_V_1_ce0;
output   x_real_V_1_we0;
output  [31:0] x_real_V_1_d0;
output  [2:0] x_real_V_address0;
output   x_real_V_ce0;
output   x_real_V_we0;
output  [31:0] x_real_V_d0;
output  [2:0] input_0_address0;
output   input_0_ce0;
input  [63:0] input_0_q0;
output  [2:0] input_1_address0;
output   input_1_ce0;
input  [63:0] input_1_q0;
output  [2:0] input_2_address0;
output   input_2_ce0;
input  [63:0] input_2_q0;
output  [2:0] input_3_address0;
output   input_3_ce0;
input  [63:0] input_3_q0;
output  [2:0] input_4_address0;
output   input_4_ce0;
input  [63:0] input_4_q0;
output  [2:0] input_5_address0;
output   input_5_ce0;
input  [63:0] input_5_q0;
output  [2:0] input_6_address0;
output   input_6_ce0;
input  [63:0] input_6_q0;
output  [2:0] input_7_address0;
output   input_7_ce0;
input  [63:0] input_7_q0;

reg ap_idle;
reg x_imag_V_7_ce0;
reg x_imag_V_7_we0;
reg x_imag_V_6_ce0;
reg x_imag_V_6_we0;
reg x_imag_V_5_ce0;
reg x_imag_V_5_we0;
reg x_imag_V_4_ce0;
reg x_imag_V_4_we0;
reg x_imag_V_3_ce0;
reg x_imag_V_3_we0;
reg x_imag_V_2_ce0;
reg x_imag_V_2_we0;
reg x_imag_V_1_ce0;
reg x_imag_V_1_we0;
reg x_imag_V_ce0;
reg x_imag_V_we0;
reg x_real_V_7_ce0;
reg x_real_V_7_we0;
reg x_real_V_6_ce0;
reg x_real_V_6_we0;
reg x_real_V_5_ce0;
reg x_real_V_5_we0;
reg x_real_V_4_ce0;
reg x_real_V_4_we0;
reg x_real_V_3_ce0;
reg x_real_V_3_we0;
reg x_real_V_2_ce0;
reg x_real_V_2_we0;
reg x_real_V_1_ce0;
reg x_real_V_1_we0;
reg x_real_V_ce0;
reg x_real_V_we0;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg input_6_ce0;
reg input_7_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln322_fu_424_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [6:0] add_ln322_fu_430_p2;
reg   [6:0] add_ln322_reg_662;
reg   [2:0] x_real_V_addr_reg_667;
reg   [2:0] x_real_V_1_addr_reg_672;
reg   [2:0] x_real_V_2_addr_reg_677;
reg   [2:0] x_real_V_3_addr_reg_682;
reg   [2:0] x_real_V_4_addr_reg_687;
reg   [2:0] x_real_V_5_addr_reg_692;
reg   [2:0] x_real_V_6_addr_reg_697;
reg   [2:0] x_real_V_7_addr_reg_702;
reg   [2:0] x_imag_V_addr_reg_707;
reg   [2:0] x_imag_V_1_addr_reg_712;
reg   [2:0] x_imag_V_2_addr_reg_717;
reg   [2:0] x_imag_V_3_addr_reg_722;
reg   [2:0] x_imag_V_4_addr_reg_727;
reg   [2:0] x_imag_V_5_addr_reg_732;
reg   [2:0] x_imag_V_6_addr_reg_737;
reg   [2:0] x_imag_V_7_addr_reg_742;
reg   [2:0] trunc_ln1_reg_747;
wire   [63:0] zext_ln324_fu_440_p1;
reg   [6:0] i_fu_116;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
wire   [31:0] tmp_fu_510_p10;
wire   [31:0] tmp_1_fu_619_p10;
wire   [2:0] trunc_ln322_fu_436_p1;
wire   [31:0] tmp_fu_510_p1;
wire   [31:0] tmp_fu_510_p2;
wire   [31:0] tmp_fu_510_p3;
wire   [31:0] tmp_fu_510_p4;
wire   [31:0] tmp_fu_510_p5;
wire   [31:0] tmp_fu_510_p6;
wire   [31:0] tmp_fu_510_p7;
wire   [31:0] tmp_fu_510_p8;
wire   [31:0] tmp_1_fu_619_p1;
wire   [31:0] tmp_1_fu_619_p2;
wire   [31:0] tmp_1_fu_619_p3;
wire   [31:0] tmp_1_fu_619_p4;
wire   [31:0] tmp_1_fu_619_p5;
wire   [31:0] tmp_1_fu_619_p6;
wire   [31:0] tmp_1_fu_619_p7;
wire   [31:0] tmp_1_fu_619_p8;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U1(
    .din0(tmp_fu_510_p1),
    .din1(tmp_fu_510_p2),
    .din2(tmp_fu_510_p3),
    .din3(tmp_fu_510_p4),
    .din4(tmp_fu_510_p5),
    .din5(tmp_fu_510_p6),
    .din6(tmp_fu_510_p7),
    .din7(tmp_fu_510_p8),
    .din8(trunc_ln1_reg_747),
    .dout(tmp_fu_510_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U2(
    .din0(tmp_1_fu_619_p1),
    .din1(tmp_1_fu_619_p2),
    .din2(tmp_1_fu_619_p3),
    .din3(tmp_1_fu_619_p4),
    .din4(tmp_1_fu_619_p5),
    .din5(tmp_1_fu_619_p6),
    .din6(tmp_1_fu_619_p7),
    .din7(tmp_1_fu_619_p8),
    .din8(trunc_ln1_reg_747),
    .dout(tmp_1_fu_619_p10)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_116 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_116 <= add_ln322_reg_662;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln322_reg_662 <= add_ln322_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln322_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln1_reg_747 <= {{ap_sig_allocacmp_i_2[5:3]}};
        x_imag_V_1_addr_reg_712 <= zext_ln324_fu_440_p1;
        x_imag_V_2_addr_reg_717 <= zext_ln324_fu_440_p1;
        x_imag_V_3_addr_reg_722 <= zext_ln324_fu_440_p1;
        x_imag_V_4_addr_reg_727 <= zext_ln324_fu_440_p1;
        x_imag_V_5_addr_reg_732 <= zext_ln324_fu_440_p1;
        x_imag_V_6_addr_reg_737 <= zext_ln324_fu_440_p1;
        x_imag_V_7_addr_reg_742 <= zext_ln324_fu_440_p1;
        x_imag_V_addr_reg_707 <= zext_ln324_fu_440_p1;
        x_real_V_1_addr_reg_672 <= zext_ln324_fu_440_p1;
        x_real_V_2_addr_reg_677 <= zext_ln324_fu_440_p1;
        x_real_V_3_addr_reg_682 <= zext_ln324_fu_440_p1;
        x_real_V_4_addr_reg_687 <= zext_ln324_fu_440_p1;
        x_real_V_5_addr_reg_692 <= zext_ln324_fu_440_p1;
        x_real_V_6_addr_reg_697 <= zext_ln324_fu_440_p1;
        x_real_V_7_addr_reg_702 <= zext_ln324_fu_440_p1;
        x_real_V_addr_reg_667 <= zext_ln324_fu_440_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln322_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_116;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_6_ce0 = 1'b1;
    end else begin
        input_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_7_ce0 = 1'b1;
    end else begin
        input_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_1_ce0 = 1'b1;
    end else begin
        x_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_1_we0 = 1'b1;
    end else begin
        x_imag_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_2_ce0 = 1'b1;
    end else begin
        x_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_2_we0 = 1'b1;
    end else begin
        x_imag_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_3_ce0 = 1'b1;
    end else begin
        x_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_3_we0 = 1'b1;
    end else begin
        x_imag_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_4_ce0 = 1'b1;
    end else begin
        x_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_4_we0 = 1'b1;
    end else begin
        x_imag_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_5_ce0 = 1'b1;
    end else begin
        x_imag_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_5_we0 = 1'b1;
    end else begin
        x_imag_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_6_ce0 = 1'b1;
    end else begin
        x_imag_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_6_we0 = 1'b1;
    end else begin
        x_imag_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_7_ce0 = 1'b1;
    end else begin
        x_imag_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_7_we0 = 1'b1;
    end else begin
        x_imag_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_imag_V_ce0 = 1'b1;
    end else begin
        x_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_imag_V_we0 = 1'b1;
    end else begin
        x_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_1_ce0 = 1'b1;
    end else begin
        x_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_1_we0 = 1'b1;
    end else begin
        x_real_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_2_ce0 = 1'b1;
    end else begin
        x_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_2_we0 = 1'b1;
    end else begin
        x_real_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_3_ce0 = 1'b1;
    end else begin
        x_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_3_we0 = 1'b1;
    end else begin
        x_real_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_4_ce0 = 1'b1;
    end else begin
        x_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_4_we0 = 1'b1;
    end else begin
        x_real_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_5_ce0 = 1'b1;
    end else begin
        x_real_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd5) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_5_we0 = 1'b1;
    end else begin
        x_real_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_6_ce0 = 1'b1;
    end else begin
        x_real_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd6) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_6_we0 = 1'b1;
    end else begin
        x_real_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_7_ce0 = 1'b1;
    end else begin
        x_real_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd7) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_7_we0 = 1'b1;
    end else begin
        x_real_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_real_V_ce0 = 1'b1;
    end else begin
        x_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln1_reg_747 == 3'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_real_V_we0 = 1'b1;
    end else begin
        x_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln322_fu_424_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln322_fu_430_p2 = (ap_sig_allocacmp_i_2 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln322_fu_424_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln324_fu_440_p1;

assign input_1_address0 = zext_ln324_fu_440_p1;

assign input_2_address0 = zext_ln324_fu_440_p1;

assign input_3_address0 = zext_ln324_fu_440_p1;

assign input_4_address0 = zext_ln324_fu_440_p1;

assign input_5_address0 = zext_ln324_fu_440_p1;

assign input_6_address0 = zext_ln324_fu_440_p1;

assign input_7_address0 = zext_ln324_fu_440_p1;

assign tmp_1_fu_619_p1 = {{input_0_q0[63:32]}};

assign tmp_1_fu_619_p2 = {{input_1_q0[63:32]}};

assign tmp_1_fu_619_p3 = {{input_2_q0[63:32]}};

assign tmp_1_fu_619_p4 = {{input_3_q0[63:32]}};

assign tmp_1_fu_619_p5 = {{input_4_q0[63:32]}};

assign tmp_1_fu_619_p6 = {{input_5_q0[63:32]}};

assign tmp_1_fu_619_p7 = {{input_6_q0[63:32]}};

assign tmp_1_fu_619_p8 = {{input_7_q0[63:32]}};

assign tmp_fu_510_p1 = input_0_q0[31:0];

assign tmp_fu_510_p2 = input_1_q0[31:0];

assign tmp_fu_510_p3 = input_2_q0[31:0];

assign tmp_fu_510_p4 = input_3_q0[31:0];

assign tmp_fu_510_p5 = input_4_q0[31:0];

assign tmp_fu_510_p6 = input_5_q0[31:0];

assign tmp_fu_510_p7 = input_6_q0[31:0];

assign tmp_fu_510_p8 = input_7_q0[31:0];

assign trunc_ln322_fu_436_p1 = ap_sig_allocacmp_i_2[2:0];

assign x_imag_V_1_address0 = x_imag_V_1_addr_reg_712;

assign x_imag_V_1_d0 = tmp_1_fu_619_p10;

assign x_imag_V_2_address0 = x_imag_V_2_addr_reg_717;

assign x_imag_V_2_d0 = tmp_1_fu_619_p10;

assign x_imag_V_3_address0 = x_imag_V_3_addr_reg_722;

assign x_imag_V_3_d0 = tmp_1_fu_619_p10;

assign x_imag_V_4_address0 = x_imag_V_4_addr_reg_727;

assign x_imag_V_4_d0 = tmp_1_fu_619_p10;

assign x_imag_V_5_address0 = x_imag_V_5_addr_reg_732;

assign x_imag_V_5_d0 = tmp_1_fu_619_p10;

assign x_imag_V_6_address0 = x_imag_V_6_addr_reg_737;

assign x_imag_V_6_d0 = tmp_1_fu_619_p10;

assign x_imag_V_7_address0 = x_imag_V_7_addr_reg_742;

assign x_imag_V_7_d0 = tmp_1_fu_619_p10;

assign x_imag_V_address0 = x_imag_V_addr_reg_707;

assign x_imag_V_d0 = tmp_1_fu_619_p10;

assign x_real_V_1_address0 = x_real_V_1_addr_reg_672;

assign x_real_V_1_d0 = tmp_fu_510_p10;

assign x_real_V_2_address0 = x_real_V_2_addr_reg_677;

assign x_real_V_2_d0 = tmp_fu_510_p10;

assign x_real_V_3_address0 = x_real_V_3_addr_reg_682;

assign x_real_V_3_d0 = tmp_fu_510_p10;

assign x_real_V_4_address0 = x_real_V_4_addr_reg_687;

assign x_real_V_4_d0 = tmp_fu_510_p10;

assign x_real_V_5_address0 = x_real_V_5_addr_reg_692;

assign x_real_V_5_d0 = tmp_fu_510_p10;

assign x_real_V_6_address0 = x_real_V_6_addr_reg_697;

assign x_real_V_6_d0 = tmp_fu_510_p10;

assign x_real_V_7_address0 = x_real_V_7_addr_reg_702;

assign x_real_V_7_d0 = tmp_fu_510_p10;

assign x_real_V_address0 = x_real_V_addr_reg_667;

assign x_real_V_d0 = tmp_fu_510_p10;

assign zext_ln324_fu_440_p1 = trunc_ln322_fu_436_p1;

endmodule //sr_fft_sr_fft_Pipeline_VITIS_LOOP_322_1
