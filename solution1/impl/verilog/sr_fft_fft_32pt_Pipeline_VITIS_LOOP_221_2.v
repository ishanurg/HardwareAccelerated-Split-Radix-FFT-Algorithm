// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_32pt_Pipeline_VITIS_LOOP_221_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        o2_in_imag_V_4_address0,
        o2_in_imag_V_4_ce0,
        o2_in_imag_V_4_we0,
        o2_in_imag_V_4_d0,
        o2_in_imag_V_address0,
        o2_in_imag_V_ce0,
        o2_in_imag_V_we0,
        o2_in_imag_V_d0,
        o2_in_real_V_4_address0,
        o2_in_real_V_4_ce0,
        o2_in_real_V_4_we0,
        o2_in_real_V_4_d0,
        o2_in_real_V_address0,
        o2_in_real_V_ce0,
        o2_in_real_V_we0,
        o2_in_real_V_d0,
        o1_in_imag_V_4_address0,
        o1_in_imag_V_4_ce0,
        o1_in_imag_V_4_we0,
        o1_in_imag_V_4_d0,
        o1_in_imag_V_address0,
        o1_in_imag_V_ce0,
        o1_in_imag_V_we0,
        o1_in_imag_V_d0,
        o1_in_real_V_4_address0,
        o1_in_real_V_4_ce0,
        o1_in_real_V_4_we0,
        o1_in_real_V_4_d0,
        o1_in_real_V_address0,
        o1_in_real_V_ce0,
        o1_in_real_V_we0,
        o1_in_real_V_d0,
        in_real_0_load,
        in_real_1_load,
        in_real_2_load,
        in_real_3_load,
        in_real_4_load,
        in_real_5_load,
        in_real_6_load,
        in_real_7_load,
        in_imag_0_load,
        in_imag_1_load,
        in_imag_2_load,
        in_imag_3_load,
        in_imag_4_load,
        in_imag_5_load,
        in_imag_6_load,
        in_imag_7_load,
        in_real_0_load_6,
        in_real_1_load_6,
        in_real_2_load_6,
        in_real_3_load_6,
        in_real_4_load_6,
        in_real_5_load_6,
        in_real_6_load_6,
        in_real_7_load_6,
        in_imag_0_load_6,
        in_imag_1_load_6,
        in_imag_2_load_6,
        in_imag_3_load_6,
        in_imag_4_load_6,
        in_imag_5_load_6,
        in_imag_6_load_6,
        in_imag_7_load_6
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] o2_in_imag_V_4_address0;
output   o2_in_imag_V_4_ce0;
output   o2_in_imag_V_4_we0;
output  [31:0] o2_in_imag_V_4_d0;
output  [1:0] o2_in_imag_V_address0;
output   o2_in_imag_V_ce0;
output   o2_in_imag_V_we0;
output  [31:0] o2_in_imag_V_d0;
output  [1:0] o2_in_real_V_4_address0;
output   o2_in_real_V_4_ce0;
output   o2_in_real_V_4_we0;
output  [31:0] o2_in_real_V_4_d0;
output  [1:0] o2_in_real_V_address0;
output   o2_in_real_V_ce0;
output   o2_in_real_V_we0;
output  [31:0] o2_in_real_V_d0;
output  [1:0] o1_in_imag_V_4_address0;
output   o1_in_imag_V_4_ce0;
output   o1_in_imag_V_4_we0;
output  [31:0] o1_in_imag_V_4_d0;
output  [1:0] o1_in_imag_V_address0;
output   o1_in_imag_V_ce0;
output   o1_in_imag_V_we0;
output  [31:0] o1_in_imag_V_d0;
output  [1:0] o1_in_real_V_4_address0;
output   o1_in_real_V_4_ce0;
output   o1_in_real_V_4_we0;
output  [31:0] o1_in_real_V_4_d0;
output  [1:0] o1_in_real_V_address0;
output   o1_in_real_V_ce0;
output   o1_in_real_V_we0;
output  [31:0] o1_in_real_V_d0;
input  [31:0] in_real_0_load;
input  [31:0] in_real_1_load;
input  [31:0] in_real_2_load;
input  [31:0] in_real_3_load;
input  [31:0] in_real_4_load;
input  [31:0] in_real_5_load;
input  [31:0] in_real_6_load;
input  [31:0] in_real_7_load;
input  [31:0] in_imag_0_load;
input  [31:0] in_imag_1_load;
input  [31:0] in_imag_2_load;
input  [31:0] in_imag_3_load;
input  [31:0] in_imag_4_load;
input  [31:0] in_imag_5_load;
input  [31:0] in_imag_6_load;
input  [31:0] in_imag_7_load;
input  [31:0] in_real_0_load_6;
input  [31:0] in_real_1_load_6;
input  [31:0] in_real_2_load_6;
input  [31:0] in_real_3_load_6;
input  [31:0] in_real_4_load_6;
input  [31:0] in_real_5_load_6;
input  [31:0] in_real_6_load_6;
input  [31:0] in_real_7_load_6;
input  [31:0] in_imag_0_load_6;
input  [31:0] in_imag_1_load_6;
input  [31:0] in_imag_2_load_6;
input  [31:0] in_imag_3_load_6;
input  [31:0] in_imag_4_load_6;
input  [31:0] in_imag_5_load_6;
input  [31:0] in_imag_6_load_6;
input  [31:0] in_imag_7_load_6;

reg ap_idle;
reg o2_in_imag_V_4_ce0;
reg o2_in_imag_V_4_we0;
reg o2_in_imag_V_ce0;
reg o2_in_imag_V_we0;
reg o2_in_real_V_4_ce0;
reg o2_in_real_V_4_we0;
reg o2_in_real_V_ce0;
reg o2_in_real_V_we0;
reg o1_in_imag_V_4_ce0;
reg o1_in_imag_V_4_we0;
reg o1_in_imag_V_ce0;
reg o1_in_imag_V_we0;
reg o1_in_real_V_4_ce0;
reg o1_in_real_V_4_we0;
reg o1_in_real_V_ce0;
reg o1_in_real_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln221_fu_420_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln223_fu_440_p1;
wire   [0:0] tmp_fu_500_p3;
reg   [3:0] i_3_fu_112;
wire   [3:0] add_ln221_fu_426_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [31:0] tmp_s_fu_452_p10;
wire   [31:0] tmp_5_fu_476_p10;
wire   [31:0] tmp_6_fu_508_p10;
wire   [31:0] tmp_7_fu_532_p10;
wire   [1:0] trunc_ln221_fu_432_p1;
wire   [2:0] trunc_ln221_1_fu_436_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U243(
    .din0(in_real_0_load),
    .din1(in_real_1_load),
    .din2(in_real_2_load),
    .din3(in_real_3_load),
    .din4(in_real_4_load),
    .din5(in_real_5_load),
    .din6(in_real_6_load),
    .din7(in_real_7_load),
    .din8(trunc_ln221_1_fu_436_p1),
    .dout(tmp_s_fu_452_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U244(
    .din0(in_imag_0_load),
    .din1(in_imag_1_load),
    .din2(in_imag_2_load),
    .din3(in_imag_3_load),
    .din4(in_imag_4_load),
    .din5(in_imag_5_load),
    .din6(in_imag_6_load),
    .din7(in_imag_7_load),
    .din8(trunc_ln221_1_fu_436_p1),
    .dout(tmp_5_fu_476_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U245(
    .din0(in_real_0_load_6),
    .din1(in_real_1_load_6),
    .din2(in_real_2_load_6),
    .din3(in_real_3_load_6),
    .din4(in_real_4_load_6),
    .din5(in_real_5_load_6),
    .din6(in_real_6_load_6),
    .din7(in_real_7_load_6),
    .din8(trunc_ln221_1_fu_436_p1),
    .dout(tmp_6_fu_508_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U246(
    .din0(in_imag_0_load_6),
    .din1(in_imag_1_load_6),
    .din2(in_imag_2_load_6),
    .din3(in_imag_3_load_6),
    .din4(in_imag_4_load_6),
    .din5(in_imag_5_load_6),
    .din6(in_imag_6_load_6),
    .din7(in_imag_7_load_6),
    .din8(trunc_ln221_1_fu_436_p1),
    .dout(tmp_7_fu_532_p10)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln221_fu_420_p2 == 1'd0)) begin
            i_3_fu_112 <= add_ln221_fu_426_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_112 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_112;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o1_in_imag_V_4_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd1))) begin
        o1_in_imag_V_4_we0 = 1'b1;
    end else begin
        o1_in_imag_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o1_in_imag_V_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd0))) begin
        o1_in_imag_V_we0 = 1'b1;
    end else begin
        o1_in_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o1_in_real_V_4_ce0 = 1'b1;
    end else begin
        o1_in_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd1))) begin
        o1_in_real_V_4_we0 = 1'b1;
    end else begin
        o1_in_real_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o1_in_real_V_ce0 = 1'b1;
    end else begin
        o1_in_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd0))) begin
        o1_in_real_V_we0 = 1'b1;
    end else begin
        o1_in_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o2_in_imag_V_4_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd1))) begin
        o2_in_imag_V_4_we0 = 1'b1;
    end else begin
        o2_in_imag_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o2_in_imag_V_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd0))) begin
        o2_in_imag_V_we0 = 1'b1;
    end else begin
        o2_in_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o2_in_real_V_4_ce0 = 1'b1;
    end else begin
        o2_in_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd1))) begin
        o2_in_real_V_4_we0 = 1'b1;
    end else begin
        o2_in_real_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o2_in_real_V_ce0 = 1'b1;
    end else begin
        o2_in_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln221_fu_420_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_500_p3 == 1'd0))) begin
        o2_in_real_V_we0 = 1'b1;
    end else begin
        o2_in_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln221_fu_426_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln221_fu_420_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign o1_in_imag_V_4_address0 = zext_ln223_fu_440_p1;

assign o1_in_imag_V_4_d0 = tmp_5_fu_476_p10;

assign o1_in_imag_V_address0 = zext_ln223_fu_440_p1;

assign o1_in_imag_V_d0 = tmp_5_fu_476_p10;

assign o1_in_real_V_4_address0 = zext_ln223_fu_440_p1;

assign o1_in_real_V_4_d0 = tmp_s_fu_452_p10;

assign o1_in_real_V_address0 = zext_ln223_fu_440_p1;

assign o1_in_real_V_d0 = tmp_s_fu_452_p10;

assign o2_in_imag_V_4_address0 = zext_ln223_fu_440_p1;

assign o2_in_imag_V_4_d0 = tmp_7_fu_532_p10;

assign o2_in_imag_V_address0 = zext_ln223_fu_440_p1;

assign o2_in_imag_V_d0 = tmp_7_fu_532_p10;

assign o2_in_real_V_4_address0 = zext_ln223_fu_440_p1;

assign o2_in_real_V_4_d0 = tmp_6_fu_508_p10;

assign o2_in_real_V_address0 = zext_ln223_fu_440_p1;

assign o2_in_real_V_d0 = tmp_6_fu_508_p10;

assign tmp_fu_500_p3 = ap_sig_allocacmp_i[32'd2];

assign trunc_ln221_1_fu_436_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln221_fu_432_p1 = ap_sig_allocacmp_i[1:0];

assign zext_ln223_fu_440_p1 = trunc_ln221_fu_432_p1;

endmodule //sr_fft_fft_32pt_Pipeline_VITIS_LOOP_221_2
