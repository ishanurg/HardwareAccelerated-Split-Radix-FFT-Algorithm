// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_64pt_Pipeline_VITIS_LOOP_271_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        o2_in_real_V_address0,
        o2_in_real_V_ce0,
        o2_in_real_V_we0,
        o2_in_real_V_d0,
        o2_in_imag_V_3_address0,
        o2_in_imag_V_3_ce0,
        o2_in_imag_V_3_we0,
        o2_in_imag_V_3_d0,
        o2_in_imag_V_2_address0,
        o2_in_imag_V_2_ce0,
        o2_in_imag_V_2_we0,
        o2_in_imag_V_2_d0,
        o2_in_imag_V_1_address0,
        o2_in_imag_V_1_ce0,
        o2_in_imag_V_1_we0,
        o2_in_imag_V_1_d0,
        o2_in_imag_V_address0,
        o2_in_imag_V_ce0,
        o2_in_imag_V_we0,
        o2_in_imag_V_d0,
        o2_in_real_V_3_address0,
        o2_in_real_V_3_ce0,
        o2_in_real_V_3_we0,
        o2_in_real_V_3_d0,
        o2_in_real_V_2_address0,
        o2_in_real_V_2_ce0,
        o2_in_real_V_2_we0,
        o2_in_real_V_2_d0,
        o2_in_real_V_1_address0,
        o2_in_real_V_1_ce0,
        o2_in_real_V_1_we0,
        o2_in_real_V_1_d0,
        o1_in_imag_V_3_address0,
        o1_in_imag_V_3_ce0,
        o1_in_imag_V_3_we0,
        o1_in_imag_V_3_d0,
        o1_in_imag_V_2_address0,
        o1_in_imag_V_2_ce0,
        o1_in_imag_V_2_we0,
        o1_in_imag_V_2_d0,
        o1_in_imag_V_1_address0,
        o1_in_imag_V_1_ce0,
        o1_in_imag_V_1_we0,
        o1_in_imag_V_1_d0,
        o1_in_imag_V_address0,
        o1_in_imag_V_ce0,
        o1_in_imag_V_we0,
        o1_in_imag_V_d0,
        o1_in_real_V_3_address0,
        o1_in_real_V_3_ce0,
        o1_in_real_V_3_we0,
        o1_in_real_V_3_d0,
        o1_in_real_V_2_address0,
        o1_in_real_V_2_ce0,
        o1_in_real_V_2_we0,
        o1_in_real_V_2_d0,
        o1_in_real_V_1_address0,
        o1_in_real_V_1_ce0,
        o1_in_real_V_1_we0,
        o1_in_real_V_1_d0,
        o1_in_real_V_address0,
        o1_in_real_V_ce0,
        o1_in_real_V_we0,
        o1_in_real_V_d0,
        in_real_0_address0,
        in_real_0_ce0,
        in_real_0_q0,
        in_real_0_address1,
        in_real_0_ce1,
        in_real_0_q1,
        in_real_1_address0,
        in_real_1_ce0,
        in_real_1_q0,
        in_real_1_address1,
        in_real_1_ce1,
        in_real_1_q1,
        in_real_2_address0,
        in_real_2_ce0,
        in_real_2_q0,
        in_real_2_address1,
        in_real_2_ce1,
        in_real_2_q1,
        in_real_3_address0,
        in_real_3_ce0,
        in_real_3_q0,
        in_real_3_address1,
        in_real_3_ce1,
        in_real_3_q1,
        in_real_4_address0,
        in_real_4_ce0,
        in_real_4_q0,
        in_real_4_address1,
        in_real_4_ce1,
        in_real_4_q1,
        in_real_5_address0,
        in_real_5_ce0,
        in_real_5_q0,
        in_real_5_address1,
        in_real_5_ce1,
        in_real_5_q1,
        in_real_6_address0,
        in_real_6_ce0,
        in_real_6_q0,
        in_real_6_address1,
        in_real_6_ce1,
        in_real_6_q1,
        in_real_7_address0,
        in_real_7_ce0,
        in_real_7_q0,
        in_real_7_address1,
        in_real_7_ce1,
        in_real_7_q1,
        in_imag_0_address0,
        in_imag_0_ce0,
        in_imag_0_q0,
        in_imag_0_address1,
        in_imag_0_ce1,
        in_imag_0_q1,
        in_imag_1_address0,
        in_imag_1_ce0,
        in_imag_1_q0,
        in_imag_1_address1,
        in_imag_1_ce1,
        in_imag_1_q1,
        in_imag_2_address0,
        in_imag_2_ce0,
        in_imag_2_q0,
        in_imag_2_address1,
        in_imag_2_ce1,
        in_imag_2_q1,
        in_imag_3_address0,
        in_imag_3_ce0,
        in_imag_3_q0,
        in_imag_3_address1,
        in_imag_3_ce1,
        in_imag_3_q1,
        in_imag_4_address0,
        in_imag_4_ce0,
        in_imag_4_q0,
        in_imag_4_address1,
        in_imag_4_ce1,
        in_imag_4_q1,
        in_imag_5_address0,
        in_imag_5_ce0,
        in_imag_5_q0,
        in_imag_5_address1,
        in_imag_5_ce1,
        in_imag_5_q1,
        in_imag_6_address0,
        in_imag_6_ce0,
        in_imag_6_q0,
        in_imag_6_address1,
        in_imag_6_ce1,
        in_imag_6_q1,
        in_imag_7_address0,
        in_imag_7_ce0,
        in_imag_7_q0,
        in_imag_7_address1,
        in_imag_7_ce1,
        in_imag_7_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] o2_in_real_V_address0;
output   o2_in_real_V_ce0;
output   o2_in_real_V_we0;
output  [31:0] o2_in_real_V_d0;
output  [1:0] o2_in_imag_V_3_address0;
output   o2_in_imag_V_3_ce0;
output   o2_in_imag_V_3_we0;
output  [31:0] o2_in_imag_V_3_d0;
output  [1:0] o2_in_imag_V_2_address0;
output   o2_in_imag_V_2_ce0;
output   o2_in_imag_V_2_we0;
output  [31:0] o2_in_imag_V_2_d0;
output  [1:0] o2_in_imag_V_1_address0;
output   o2_in_imag_V_1_ce0;
output   o2_in_imag_V_1_we0;
output  [31:0] o2_in_imag_V_1_d0;
output  [1:0] o2_in_imag_V_address0;
output   o2_in_imag_V_ce0;
output   o2_in_imag_V_we0;
output  [31:0] o2_in_imag_V_d0;
output  [1:0] o2_in_real_V_3_address0;
output   o2_in_real_V_3_ce0;
output   o2_in_real_V_3_we0;
output  [31:0] o2_in_real_V_3_d0;
output  [1:0] o2_in_real_V_2_address0;
output   o2_in_real_V_2_ce0;
output   o2_in_real_V_2_we0;
output  [31:0] o2_in_real_V_2_d0;
output  [1:0] o2_in_real_V_1_address0;
output   o2_in_real_V_1_ce0;
output   o2_in_real_V_1_we0;
output  [31:0] o2_in_real_V_1_d0;
output  [1:0] o1_in_imag_V_3_address0;
output   o1_in_imag_V_3_ce0;
output   o1_in_imag_V_3_we0;
output  [31:0] o1_in_imag_V_3_d0;
output  [1:0] o1_in_imag_V_2_address0;
output   o1_in_imag_V_2_ce0;
output   o1_in_imag_V_2_we0;
output  [31:0] o1_in_imag_V_2_d0;
output  [1:0] o1_in_imag_V_1_address0;
output   o1_in_imag_V_1_ce0;
output   o1_in_imag_V_1_we0;
output  [31:0] o1_in_imag_V_1_d0;
output  [1:0] o1_in_imag_V_address0;
output   o1_in_imag_V_ce0;
output   o1_in_imag_V_we0;
output  [31:0] o1_in_imag_V_d0;
output  [1:0] o1_in_real_V_3_address0;
output   o1_in_real_V_3_ce0;
output   o1_in_real_V_3_we0;
output  [31:0] o1_in_real_V_3_d0;
output  [1:0] o1_in_real_V_2_address0;
output   o1_in_real_V_2_ce0;
output   o1_in_real_V_2_we0;
output  [31:0] o1_in_real_V_2_d0;
output  [1:0] o1_in_real_V_1_address0;
output   o1_in_real_V_1_ce0;
output   o1_in_real_V_1_we0;
output  [31:0] o1_in_real_V_1_d0;
output  [1:0] o1_in_real_V_address0;
output   o1_in_real_V_ce0;
output   o1_in_real_V_we0;
output  [31:0] o1_in_real_V_d0;
output  [2:0] in_real_0_address0;
output   in_real_0_ce0;
input  [31:0] in_real_0_q0;
output  [2:0] in_real_0_address1;
output   in_real_0_ce1;
input  [31:0] in_real_0_q1;
output  [2:0] in_real_1_address0;
output   in_real_1_ce0;
input  [31:0] in_real_1_q0;
output  [2:0] in_real_1_address1;
output   in_real_1_ce1;
input  [31:0] in_real_1_q1;
output  [2:0] in_real_2_address0;
output   in_real_2_ce0;
input  [31:0] in_real_2_q0;
output  [2:0] in_real_2_address1;
output   in_real_2_ce1;
input  [31:0] in_real_2_q1;
output  [2:0] in_real_3_address0;
output   in_real_3_ce0;
input  [31:0] in_real_3_q0;
output  [2:0] in_real_3_address1;
output   in_real_3_ce1;
input  [31:0] in_real_3_q1;
output  [2:0] in_real_4_address0;
output   in_real_4_ce0;
input  [31:0] in_real_4_q0;
output  [2:0] in_real_4_address1;
output   in_real_4_ce1;
input  [31:0] in_real_4_q1;
output  [2:0] in_real_5_address0;
output   in_real_5_ce0;
input  [31:0] in_real_5_q0;
output  [2:0] in_real_5_address1;
output   in_real_5_ce1;
input  [31:0] in_real_5_q1;
output  [2:0] in_real_6_address0;
output   in_real_6_ce0;
input  [31:0] in_real_6_q0;
output  [2:0] in_real_6_address1;
output   in_real_6_ce1;
input  [31:0] in_real_6_q1;
output  [2:0] in_real_7_address0;
output   in_real_7_ce0;
input  [31:0] in_real_7_q0;
output  [2:0] in_real_7_address1;
output   in_real_7_ce1;
input  [31:0] in_real_7_q1;
output  [2:0] in_imag_0_address0;
output   in_imag_0_ce0;
input  [31:0] in_imag_0_q0;
output  [2:0] in_imag_0_address1;
output   in_imag_0_ce1;
input  [31:0] in_imag_0_q1;
output  [2:0] in_imag_1_address0;
output   in_imag_1_ce0;
input  [31:0] in_imag_1_q0;
output  [2:0] in_imag_1_address1;
output   in_imag_1_ce1;
input  [31:0] in_imag_1_q1;
output  [2:0] in_imag_2_address0;
output   in_imag_2_ce0;
input  [31:0] in_imag_2_q0;
output  [2:0] in_imag_2_address1;
output   in_imag_2_ce1;
input  [31:0] in_imag_2_q1;
output  [2:0] in_imag_3_address0;
output   in_imag_3_ce0;
input  [31:0] in_imag_3_q0;
output  [2:0] in_imag_3_address1;
output   in_imag_3_ce1;
input  [31:0] in_imag_3_q1;
output  [2:0] in_imag_4_address0;
output   in_imag_4_ce0;
input  [31:0] in_imag_4_q0;
output  [2:0] in_imag_4_address1;
output   in_imag_4_ce1;
input  [31:0] in_imag_4_q1;
output  [2:0] in_imag_5_address0;
output   in_imag_5_ce0;
input  [31:0] in_imag_5_q0;
output  [2:0] in_imag_5_address1;
output   in_imag_5_ce1;
input  [31:0] in_imag_5_q1;
output  [2:0] in_imag_6_address0;
output   in_imag_6_ce0;
input  [31:0] in_imag_6_q0;
output  [2:0] in_imag_6_address1;
output   in_imag_6_ce1;
input  [31:0] in_imag_6_q1;
output  [2:0] in_imag_7_address0;
output   in_imag_7_ce0;
input  [31:0] in_imag_7_q0;
output  [2:0] in_imag_7_address1;
output   in_imag_7_ce1;
input  [31:0] in_imag_7_q1;

reg ap_idle;
reg o2_in_real_V_ce0;
reg o2_in_real_V_we0;
reg o2_in_imag_V_3_ce0;
reg o2_in_imag_V_3_we0;
reg o2_in_imag_V_2_ce0;
reg o2_in_imag_V_2_we0;
reg o2_in_imag_V_1_ce0;
reg o2_in_imag_V_1_we0;
reg o2_in_imag_V_ce0;
reg o2_in_imag_V_we0;
reg o2_in_real_V_3_ce0;
reg o2_in_real_V_3_we0;
reg o2_in_real_V_2_ce0;
reg o2_in_real_V_2_we0;
reg o2_in_real_V_1_ce0;
reg o2_in_real_V_1_we0;
reg o1_in_imag_V_3_ce0;
reg o1_in_imag_V_3_we0;
reg o1_in_imag_V_2_ce0;
reg o1_in_imag_V_2_we0;
reg o1_in_imag_V_1_ce0;
reg o1_in_imag_V_1_we0;
reg o1_in_imag_V_ce0;
reg o1_in_imag_V_we0;
reg o1_in_real_V_3_ce0;
reg o1_in_real_V_3_we0;
reg o1_in_real_V_2_ce0;
reg o1_in_real_V_2_we0;
reg o1_in_real_V_1_ce0;
reg o1_in_real_V_1_we0;
reg o1_in_real_V_ce0;
reg o1_in_real_V_we0;
reg in_real_0_ce0;
reg in_real_0_ce1;
reg in_real_1_ce0;
reg in_real_1_ce1;
reg in_real_2_ce0;
reg in_real_2_ce1;
reg in_real_3_ce0;
reg in_real_3_ce1;
reg in_real_4_ce0;
reg in_real_4_ce1;
reg in_real_5_ce0;
reg in_real_5_ce1;
reg in_real_6_ce0;
reg in_real_6_ce1;
reg in_real_7_ce0;
reg in_real_7_ce1;
reg in_imag_0_ce0;
reg in_imag_0_ce1;
reg in_imag_1_ce0;
reg in_imag_1_ce1;
reg in_imag_2_ce0;
reg in_imag_2_ce1;
reg in_imag_3_ce0;
reg in_imag_3_ce1;
reg in_imag_4_ce0;
reg in_imag_4_ce1;
reg in_imag_5_ce0;
reg in_imag_5_ce1;
reg in_imag_6_ce0;
reg in_imag_6_ce1;
reg in_imag_7_ce0;
reg in_imag_7_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln271_fu_780_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [4:0] i_reg_963;
wire   [4:0] add_ln271_fu_786_p2;
reg   [4:0] add_ln271_reg_972;
wire   [1:0] trunc_ln273_1_fu_830_p4;
reg   [1:0] trunc_ln273_1_reg_1057;
wire   [63:0] zext_ln273_fu_810_p1;
wire   [63:0] zext_ln274_fu_846_p1;
wire   [63:0] zext_ln273_1_fu_869_p1;
reg   [4:0] i_2_fu_110;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
wire   [31:0] tmp_5_fu_900_p10;
wire   [31:0] tmp_6_fu_926_p10;
wire   [31:0] grp_fu_722_p10;
wire   [31:0] grp_fu_747_p10;
wire   [2:0] grp_fu_722_p9;
wire   [2:0] grp_fu_747_p9;
wire   [0:0] trunc_ln273_fu_792_p1;
wire   [2:0] shl_ln1_fu_796_p3;
wire   [2:0] or_ln273_fu_804_p2;
wire   [2:0] or_ln274_fu_840_p2;
wire   [1:0] trunc_ln271_fu_866_p1;
wire   [2:0] tmp_5_fu_900_p9;
wire   [2:0] tmp_6_fu_926_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U469(
    .din0(in_real_0_q0),
    .din1(in_real_1_q0),
    .din2(in_real_2_q0),
    .din3(in_real_3_q0),
    .din4(in_real_4_q0),
    .din5(in_real_5_q0),
    .din6(in_real_6_q0),
    .din7(in_real_7_q0),
    .din8(grp_fu_722_p9),
    .dout(grp_fu_722_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U470(
    .din0(in_imag_0_q0),
    .din1(in_imag_1_q0),
    .din2(in_imag_2_q0),
    .din3(in_imag_3_q0),
    .din4(in_imag_4_q0),
    .din5(in_imag_5_q0),
    .din6(in_imag_6_q0),
    .din7(in_imag_7_q0),
    .din8(grp_fu_747_p9),
    .dout(grp_fu_747_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U471(
    .din0(in_real_0_q1),
    .din1(in_real_1_q1),
    .din2(in_real_2_q1),
    .din3(in_real_3_q1),
    .din4(in_real_4_q1),
    .din5(in_real_5_q1),
    .din6(in_real_6_q1),
    .din7(in_real_7_q1),
    .din8(tmp_5_fu_900_p9),
    .dout(tmp_5_fu_900_p10)
);

sr_fft_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
mux_83_32_1_1_U472(
    .din0(in_imag_0_q1),
    .din1(in_imag_1_q1),
    .din2(in_imag_2_q1),
    .din3(in_imag_3_q1),
    .din4(in_imag_4_q1),
    .din5(in_imag_5_q1),
    .din6(in_imag_6_q1),
    .din7(in_imag_7_q1),
    .din8(tmp_6_fu_926_p9),
    .dout(tmp_6_fu_926_p10)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_2_fu_110 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_fu_110 <= add_ln271_reg_972;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln271_reg_972 <= add_ln271_fu_786_p2;
        i_reg_963 <= ap_sig_allocacmp_i;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln273_1_reg_1057 <= {{ap_sig_allocacmp_i[3:2]}};
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln271_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_110;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_0_ce0 = 1'b1;
    end else begin
        in_imag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_0_ce1 = 1'b1;
    end else begin
        in_imag_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_1_ce0 = 1'b1;
    end else begin
        in_imag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_1_ce1 = 1'b1;
    end else begin
        in_imag_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_2_ce0 = 1'b1;
    end else begin
        in_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_2_ce1 = 1'b1;
    end else begin
        in_imag_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_3_ce0 = 1'b1;
    end else begin
        in_imag_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_3_ce1 = 1'b1;
    end else begin
        in_imag_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_4_ce0 = 1'b1;
    end else begin
        in_imag_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_4_ce1 = 1'b1;
    end else begin
        in_imag_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_5_ce0 = 1'b1;
    end else begin
        in_imag_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_5_ce1 = 1'b1;
    end else begin
        in_imag_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_6_ce0 = 1'b1;
    end else begin
        in_imag_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_6_ce1 = 1'b1;
    end else begin
        in_imag_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_imag_7_ce0 = 1'b1;
    end else begin
        in_imag_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_imag_7_ce1 = 1'b1;
    end else begin
        in_imag_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_0_ce0 = 1'b1;
    end else begin
        in_real_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_0_ce1 = 1'b1;
    end else begin
        in_real_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_1_ce0 = 1'b1;
    end else begin
        in_real_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_1_ce1 = 1'b1;
    end else begin
        in_real_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_2_ce0 = 1'b1;
    end else begin
        in_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_2_ce1 = 1'b1;
    end else begin
        in_real_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_3_ce0 = 1'b1;
    end else begin
        in_real_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_3_ce1 = 1'b1;
    end else begin
        in_real_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_4_ce0 = 1'b1;
    end else begin
        in_real_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_4_ce1 = 1'b1;
    end else begin
        in_real_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_5_ce0 = 1'b1;
    end else begin
        in_real_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_5_ce1 = 1'b1;
    end else begin
        in_real_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_6_ce0 = 1'b1;
    end else begin
        in_real_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_6_ce1 = 1'b1;
    end else begin
        in_real_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd3) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd0) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd1) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start_int == 1'b1) & (trunc_ln273_1_fu_830_p4 == 2'd2) & (icmp_ln271_fu_780_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_real_7_ce0 = 1'b1;
    end else begin
        in_real_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_real_7_ce1 = 1'b1;
    end else begin
        in_real_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_imag_V_1_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_imag_V_1_we0 = 1'b1;
    end else begin
        o1_in_imag_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_imag_V_2_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_imag_V_2_we0 = 1'b1;
    end else begin
        o1_in_imag_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_imag_V_3_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_imag_V_3_we0 = 1'b1;
    end else begin
        o1_in_imag_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_imag_V_ce0 = 1'b1;
    end else begin
        o1_in_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_imag_V_we0 = 1'b1;
    end else begin
        o1_in_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_real_V_1_ce0 = 1'b1;
    end else begin
        o1_in_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_real_V_1_we0 = 1'b1;
    end else begin
        o1_in_real_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_real_V_2_ce0 = 1'b1;
    end else begin
        o1_in_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_real_V_2_we0 = 1'b1;
    end else begin
        o1_in_real_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_real_V_3_ce0 = 1'b1;
    end else begin
        o1_in_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_real_V_3_we0 = 1'b1;
    end else begin
        o1_in_real_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o1_in_real_V_ce0 = 1'b1;
    end else begin
        o1_in_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o1_in_real_V_we0 = 1'b1;
    end else begin
        o1_in_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_imag_V_1_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_imag_V_1_we0 = 1'b1;
    end else begin
        o2_in_imag_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_imag_V_2_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_imag_V_2_we0 = 1'b1;
    end else begin
        o2_in_imag_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_imag_V_3_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_imag_V_3_we0 = 1'b1;
    end else begin
        o2_in_imag_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_imag_V_ce0 = 1'b1;
    end else begin
        o2_in_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_imag_V_we0 = 1'b1;
    end else begin
        o2_in_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_real_V_1_ce0 = 1'b1;
    end else begin
        o2_in_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_real_V_1_we0 = 1'b1;
    end else begin
        o2_in_real_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_real_V_2_ce0 = 1'b1;
    end else begin
        o2_in_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd2) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_real_V_2_we0 = 1'b1;
    end else begin
        o2_in_real_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_real_V_3_ce0 = 1'b1;
    end else begin
        o2_in_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd3) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_real_V_3_we0 = 1'b1;
    end else begin
        o2_in_real_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o2_in_real_V_ce0 = 1'b1;
    end else begin
        o2_in_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln273_1_reg_1057 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o2_in_real_V_we0 = 1'b1;
    end else begin
        o2_in_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln271_fu_780_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln271_fu_786_p2 = (ap_sig_allocacmp_i + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_722_p9 = {{i_reg_963[3:1]}};

assign grp_fu_747_p9 = {{i_reg_963[3:1]}};

assign icmp_ln271_fu_780_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

assign in_imag_0_address0 = zext_ln274_fu_846_p1;

assign in_imag_0_address1 = zext_ln273_fu_810_p1;

assign in_imag_1_address0 = zext_ln274_fu_846_p1;

assign in_imag_1_address1 = zext_ln273_fu_810_p1;

assign in_imag_2_address0 = zext_ln274_fu_846_p1;

assign in_imag_2_address1 = zext_ln273_fu_810_p1;

assign in_imag_3_address0 = zext_ln274_fu_846_p1;

assign in_imag_3_address1 = zext_ln273_fu_810_p1;

assign in_imag_4_address0 = zext_ln274_fu_846_p1;

assign in_imag_4_address1 = zext_ln273_fu_810_p1;

assign in_imag_5_address0 = zext_ln274_fu_846_p1;

assign in_imag_5_address1 = zext_ln273_fu_810_p1;

assign in_imag_6_address0 = zext_ln274_fu_846_p1;

assign in_imag_6_address1 = zext_ln273_fu_810_p1;

assign in_imag_7_address0 = zext_ln274_fu_846_p1;

assign in_imag_7_address1 = zext_ln273_fu_810_p1;

assign in_real_0_address0 = zext_ln274_fu_846_p1;

assign in_real_0_address1 = zext_ln273_fu_810_p1;

assign in_real_1_address0 = zext_ln274_fu_846_p1;

assign in_real_1_address1 = zext_ln273_fu_810_p1;

assign in_real_2_address0 = zext_ln274_fu_846_p1;

assign in_real_2_address1 = zext_ln273_fu_810_p1;

assign in_real_3_address0 = zext_ln274_fu_846_p1;

assign in_real_3_address1 = zext_ln273_fu_810_p1;

assign in_real_4_address0 = zext_ln274_fu_846_p1;

assign in_real_4_address1 = zext_ln273_fu_810_p1;

assign in_real_5_address0 = zext_ln274_fu_846_p1;

assign in_real_5_address1 = zext_ln273_fu_810_p1;

assign in_real_6_address0 = zext_ln274_fu_846_p1;

assign in_real_6_address1 = zext_ln273_fu_810_p1;

assign in_real_7_address0 = zext_ln274_fu_846_p1;

assign in_real_7_address1 = zext_ln273_fu_810_p1;

assign o1_in_imag_V_1_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_imag_V_1_d0 = tmp_6_fu_926_p10;

assign o1_in_imag_V_2_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_imag_V_2_d0 = tmp_6_fu_926_p10;

assign o1_in_imag_V_3_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_imag_V_3_d0 = tmp_6_fu_926_p10;

assign o1_in_imag_V_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_imag_V_d0 = tmp_6_fu_926_p10;

assign o1_in_real_V_1_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_real_V_1_d0 = tmp_5_fu_900_p10;

assign o1_in_real_V_2_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_real_V_2_d0 = tmp_5_fu_900_p10;

assign o1_in_real_V_3_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_real_V_3_d0 = tmp_5_fu_900_p10;

assign o1_in_real_V_address0 = zext_ln273_1_fu_869_p1;

assign o1_in_real_V_d0 = tmp_5_fu_900_p10;

assign o2_in_imag_V_1_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_imag_V_1_d0 = grp_fu_747_p10;

assign o2_in_imag_V_2_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_imag_V_2_d0 = grp_fu_747_p10;

assign o2_in_imag_V_3_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_imag_V_3_d0 = grp_fu_747_p10;

assign o2_in_imag_V_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_imag_V_d0 = grp_fu_747_p10;

assign o2_in_real_V_1_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_real_V_1_d0 = grp_fu_722_p10;

assign o2_in_real_V_2_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_real_V_2_d0 = grp_fu_722_p10;

assign o2_in_real_V_3_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_real_V_3_d0 = grp_fu_722_p10;

assign o2_in_real_V_address0 = zext_ln273_1_fu_869_p1;

assign o2_in_real_V_d0 = grp_fu_722_p10;

assign or_ln273_fu_804_p2 = (shl_ln1_fu_796_p3 | 3'd1);

assign or_ln274_fu_840_p2 = (shl_ln1_fu_796_p3 | 3'd3);

assign shl_ln1_fu_796_p3 = {{trunc_ln273_fu_792_p1}, {2'd0}};

assign tmp_5_fu_900_p9 = {{i_reg_963[3:1]}};

assign tmp_6_fu_926_p9 = {{i_reg_963[3:1]}};

assign trunc_ln271_fu_866_p1 = i_reg_963[1:0];

assign trunc_ln273_1_fu_830_p4 = {{ap_sig_allocacmp_i[3:2]}};

assign trunc_ln273_fu_792_p1 = ap_sig_allocacmp_i[0:0];

assign zext_ln273_1_fu_869_p1 = trunc_ln271_fu_866_p1;

assign zext_ln273_fu_810_p1 = or_ln273_fu_804_p2;

assign zext_ln274_fu_846_p1 = or_ln274_fu_840_p2;

endmodule //sr_fft_fft_64pt_Pipeline_VITIS_LOOP_271_2
