// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sr_fft_fft_64pt_Pipeline_VITIS_LOOP_281_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_out_real_V_4_address0,
        e_out_real_V_4_ce0,
        e_out_real_V_4_q0,
        e_out_real_V_5_address0,
        e_out_real_V_5_ce0,
        e_out_real_V_5_q0,
        e_out_real_V_6_address0,
        e_out_real_V_6_ce0,
        e_out_real_V_6_q0,
        e_out_real_V_7_address0,
        e_out_real_V_7_ce0,
        e_out_real_V_7_q0,
        e_out_imag_V_4_address0,
        e_out_imag_V_4_ce0,
        e_out_imag_V_4_q0,
        e_out_imag_V_5_address0,
        e_out_imag_V_5_ce0,
        e_out_imag_V_5_q0,
        e_out_imag_V_6_address0,
        e_out_imag_V_6_ce0,
        e_out_imag_V_6_q0,
        e_out_imag_V_7_address0,
        e_out_imag_V_7_ce0,
        e_out_imag_V_7_q0,
        out_real_2_address0,
        out_real_2_ce0,
        out_real_2_we0,
        out_real_2_d0,
        out_real_3_address0,
        out_real_3_ce0,
        out_real_3_we0,
        out_real_3_d0,
        out_imag_2_address0,
        out_imag_2_ce0,
        out_imag_2_we0,
        out_imag_2_d0,
        out_imag_3_address0,
        out_imag_3_ce0,
        out_imag_3_we0,
        out_imag_3_d0,
        out_real_4_address0,
        out_real_4_ce0,
        out_real_4_we0,
        out_real_4_d0,
        out_imag_4_address0,
        out_imag_4_ce0,
        out_imag_4_we0,
        out_imag_4_d0,
        out_imag_5_address0,
        out_imag_5_ce0,
        out_imag_5_we0,
        out_imag_5_d0,
        out_real_6_address0,
        out_real_6_ce0,
        out_real_6_we0,
        out_real_6_d0,
        out_imag_6_address0,
        out_imag_6_ce0,
        out_imag_6_we0,
        out_imag_6_d0,
        out_imag_7_address0,
        out_imag_7_ce0,
        out_imag_7_we0,
        out_imag_7_d0,
        out_imag_1_address0,
        out_imag_1_ce0,
        out_imag_1_we0,
        out_imag_1_d0,
        out_imag_0_address0,
        out_imag_0_ce0,
        out_imag_0_we0,
        out_imag_0_d0,
        out_real_7_address0,
        out_real_7_ce0,
        out_real_7_we0,
        out_real_7_d0,
        out_real_5_address0,
        out_real_5_ce0,
        out_real_5_we0,
        out_real_5_d0,
        out_real_1_address0,
        out_real_1_ce0,
        out_real_1_we0,
        out_real_1_d0,
        out_real_0_address0,
        out_real_0_ce0,
        out_real_0_we0,
        out_real_0_d0,
        o1_out_real_V_address0,
        o1_out_real_V_ce0,
        o1_out_real_V_q0,
        o1_out_real_V_1_address0,
        o1_out_real_V_1_ce0,
        o1_out_real_V_1_q0,
        o1_out_real_V_2_address0,
        o1_out_real_V_2_ce0,
        o1_out_real_V_2_q0,
        o1_out_real_V_3_address0,
        o1_out_real_V_3_ce0,
        o1_out_real_V_3_q0,
        o1_out_imag_V_address0,
        o1_out_imag_V_ce0,
        o1_out_imag_V_q0,
        o1_out_imag_V_1_address0,
        o1_out_imag_V_1_ce0,
        o1_out_imag_V_1_q0,
        o1_out_imag_V_2_address0,
        o1_out_imag_V_2_ce0,
        o1_out_imag_V_2_q0,
        o1_out_imag_V_3_address0,
        o1_out_imag_V_3_ce0,
        o1_out_imag_V_3_q0,
        o2_out_real_V_address0,
        o2_out_real_V_ce0,
        o2_out_real_V_q0,
        o2_out_real_V_1_address0,
        o2_out_real_V_1_ce0,
        o2_out_real_V_1_q0,
        o2_out_real_V_2_address0,
        o2_out_real_V_2_ce0,
        o2_out_real_V_2_q0,
        o2_out_real_V_3_address0,
        o2_out_real_V_3_ce0,
        o2_out_real_V_3_q0,
        o2_out_imag_V_address0,
        o2_out_imag_V_ce0,
        o2_out_imag_V_q0,
        o2_out_imag_V_1_address0,
        o2_out_imag_V_1_ce0,
        o2_out_imag_V_1_q0,
        o2_out_imag_V_2_address0,
        o2_out_imag_V_2_ce0,
        o2_out_imag_V_2_q0,
        o2_out_imag_V_3_address0,
        o2_out_imag_V_3_ce0,
        o2_out_imag_V_3_q0,
        e_out_real_V_address0,
        e_out_real_V_ce0,
        e_out_real_V_q0,
        e_out_real_V_1_address0,
        e_out_real_V_1_ce0,
        e_out_real_V_1_q0,
        e_out_real_V_2_address0,
        e_out_real_V_2_ce0,
        e_out_real_V_2_q0,
        e_out_real_V_3_address0,
        e_out_real_V_3_ce0,
        e_out_real_V_3_q0,
        e_out_imag_V_address0,
        e_out_imag_V_ce0,
        e_out_imag_V_q0,
        e_out_imag_V_1_address0,
        e_out_imag_V_1_ce0,
        e_out_imag_V_1_q0,
        e_out_imag_V_2_address0,
        e_out_imag_V_2_ce0,
        e_out_imag_V_2_q0,
        e_out_imag_V_3_address0,
        e_out_imag_V_3_ce0,
        e_out_imag_V_3_q0,
        grp_fu_616_p_din0,
        grp_fu_616_p_din1,
        grp_fu_616_p_dout0,
        grp_fu_616_p_ce,
        grp_fu_620_p_din0,
        grp_fu_620_p_din1,
        grp_fu_620_p_dout0,
        grp_fu_620_p_ce,
        grp_fu_624_p_din0,
        grp_fu_624_p_din1,
        grp_fu_624_p_dout0,
        grp_fu_624_p_ce,
        grp_fu_628_p_din0,
        grp_fu_628_p_din1,
        grp_fu_628_p_dout0,
        grp_fu_628_p_ce,
        grp_fu_632_p_din0,
        grp_fu_632_p_din1,
        grp_fu_632_p_dout0,
        grp_fu_632_p_ce,
        grp_fu_636_p_din0,
        grp_fu_636_p_din1,
        grp_fu_636_p_dout0,
        grp_fu_636_p_ce,
        grp_fu_640_p_din0,
        grp_fu_640_p_din1,
        grp_fu_640_p_dout0,
        grp_fu_640_p_ce,
        grp_fu_644_p_din0,
        grp_fu_644_p_din1,
        grp_fu_644_p_dout0,
        grp_fu_644_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] e_out_real_V_4_address0;
output   e_out_real_V_4_ce0;
input  [31:0] e_out_real_V_4_q0;
output  [1:0] e_out_real_V_5_address0;
output   e_out_real_V_5_ce0;
input  [31:0] e_out_real_V_5_q0;
output  [1:0] e_out_real_V_6_address0;
output   e_out_real_V_6_ce0;
input  [31:0] e_out_real_V_6_q0;
output  [1:0] e_out_real_V_7_address0;
output   e_out_real_V_7_ce0;
input  [31:0] e_out_real_V_7_q0;
output  [1:0] e_out_imag_V_4_address0;
output   e_out_imag_V_4_ce0;
input  [31:0] e_out_imag_V_4_q0;
output  [1:0] e_out_imag_V_5_address0;
output   e_out_imag_V_5_ce0;
input  [31:0] e_out_imag_V_5_q0;
output  [1:0] e_out_imag_V_6_address0;
output   e_out_imag_V_6_ce0;
input  [31:0] e_out_imag_V_6_q0;
output  [1:0] e_out_imag_V_7_address0;
output   e_out_imag_V_7_ce0;
input  [31:0] e_out_imag_V_7_q0;
output  [2:0] out_real_2_address0;
output   out_real_2_ce0;
output   out_real_2_we0;
output  [31:0] out_real_2_d0;
output  [2:0] out_real_3_address0;
output   out_real_3_ce0;
output   out_real_3_we0;
output  [31:0] out_real_3_d0;
output  [2:0] out_imag_2_address0;
output   out_imag_2_ce0;
output   out_imag_2_we0;
output  [31:0] out_imag_2_d0;
output  [2:0] out_imag_3_address0;
output   out_imag_3_ce0;
output   out_imag_3_we0;
output  [31:0] out_imag_3_d0;
output  [2:0] out_real_4_address0;
output   out_real_4_ce0;
output   out_real_4_we0;
output  [31:0] out_real_4_d0;
output  [2:0] out_imag_4_address0;
output   out_imag_4_ce0;
output   out_imag_4_we0;
output  [31:0] out_imag_4_d0;
output  [2:0] out_imag_5_address0;
output   out_imag_5_ce0;
output   out_imag_5_we0;
output  [31:0] out_imag_5_d0;
output  [2:0] out_real_6_address0;
output   out_real_6_ce0;
output   out_real_6_we0;
output  [31:0] out_real_6_d0;
output  [2:0] out_imag_6_address0;
output   out_imag_6_ce0;
output   out_imag_6_we0;
output  [31:0] out_imag_6_d0;
output  [2:0] out_imag_7_address0;
output   out_imag_7_ce0;
output   out_imag_7_we0;
output  [31:0] out_imag_7_d0;
output  [2:0] out_imag_1_address0;
output   out_imag_1_ce0;
output   out_imag_1_we0;
output  [31:0] out_imag_1_d0;
output  [2:0] out_imag_0_address0;
output   out_imag_0_ce0;
output   out_imag_0_we0;
output  [31:0] out_imag_0_d0;
output  [2:0] out_real_7_address0;
output   out_real_7_ce0;
output   out_real_7_we0;
output  [31:0] out_real_7_d0;
output  [2:0] out_real_5_address0;
output   out_real_5_ce0;
output   out_real_5_we0;
output  [31:0] out_real_5_d0;
output  [2:0] out_real_1_address0;
output   out_real_1_ce0;
output   out_real_1_we0;
output  [31:0] out_real_1_d0;
output  [2:0] out_real_0_address0;
output   out_real_0_ce0;
output   out_real_0_we0;
output  [31:0] out_real_0_d0;
output  [1:0] o1_out_real_V_address0;
output   o1_out_real_V_ce0;
input  [31:0] o1_out_real_V_q0;
output  [1:0] o1_out_real_V_1_address0;
output   o1_out_real_V_1_ce0;
input  [31:0] o1_out_real_V_1_q0;
output  [1:0] o1_out_real_V_2_address0;
output   o1_out_real_V_2_ce0;
input  [31:0] o1_out_real_V_2_q0;
output  [1:0] o1_out_real_V_3_address0;
output   o1_out_real_V_3_ce0;
input  [31:0] o1_out_real_V_3_q0;
output  [1:0] o1_out_imag_V_address0;
output   o1_out_imag_V_ce0;
input  [31:0] o1_out_imag_V_q0;
output  [1:0] o1_out_imag_V_1_address0;
output   o1_out_imag_V_1_ce0;
input  [31:0] o1_out_imag_V_1_q0;
output  [1:0] o1_out_imag_V_2_address0;
output   o1_out_imag_V_2_ce0;
input  [31:0] o1_out_imag_V_2_q0;
output  [1:0] o1_out_imag_V_3_address0;
output   o1_out_imag_V_3_ce0;
input  [31:0] o1_out_imag_V_3_q0;
output  [1:0] o2_out_real_V_address0;
output   o2_out_real_V_ce0;
input  [31:0] o2_out_real_V_q0;
output  [1:0] o2_out_real_V_1_address0;
output   o2_out_real_V_1_ce0;
input  [31:0] o2_out_real_V_1_q0;
output  [1:0] o2_out_real_V_2_address0;
output   o2_out_real_V_2_ce0;
input  [31:0] o2_out_real_V_2_q0;
output  [1:0] o2_out_real_V_3_address0;
output   o2_out_real_V_3_ce0;
input  [31:0] o2_out_real_V_3_q0;
output  [1:0] o2_out_imag_V_address0;
output   o2_out_imag_V_ce0;
input  [31:0] o2_out_imag_V_q0;
output  [1:0] o2_out_imag_V_1_address0;
output   o2_out_imag_V_1_ce0;
input  [31:0] o2_out_imag_V_1_q0;
output  [1:0] o2_out_imag_V_2_address0;
output   o2_out_imag_V_2_ce0;
input  [31:0] o2_out_imag_V_2_q0;
output  [1:0] o2_out_imag_V_3_address0;
output   o2_out_imag_V_3_ce0;
input  [31:0] o2_out_imag_V_3_q0;
output  [1:0] e_out_real_V_address0;
output   e_out_real_V_ce0;
input  [31:0] e_out_real_V_q0;
output  [1:0] e_out_real_V_1_address0;
output   e_out_real_V_1_ce0;
input  [31:0] e_out_real_V_1_q0;
output  [1:0] e_out_real_V_2_address0;
output   e_out_real_V_2_ce0;
input  [31:0] e_out_real_V_2_q0;
output  [1:0] e_out_real_V_3_address0;
output   e_out_real_V_3_ce0;
input  [31:0] e_out_real_V_3_q0;
output  [1:0] e_out_imag_V_address0;
output   e_out_imag_V_ce0;
input  [31:0] e_out_imag_V_q0;
output  [1:0] e_out_imag_V_1_address0;
output   e_out_imag_V_1_ce0;
input  [31:0] e_out_imag_V_1_q0;
output  [1:0] e_out_imag_V_2_address0;
output   e_out_imag_V_2_ce0;
input  [31:0] e_out_imag_V_2_q0;
output  [1:0] e_out_imag_V_3_address0;
output   e_out_imag_V_3_ce0;
input  [31:0] e_out_imag_V_3_q0;
output  [31:0] grp_fu_616_p_din0;
output  [17:0] grp_fu_616_p_din1;
input  [47:0] grp_fu_616_p_dout0;
output   grp_fu_616_p_ce;
output  [31:0] grp_fu_620_p_din0;
output  [17:0] grp_fu_620_p_din1;
input  [47:0] grp_fu_620_p_dout0;
output   grp_fu_620_p_ce;
output  [31:0] grp_fu_624_p_din0;
output  [17:0] grp_fu_624_p_din1;
input  [47:0] grp_fu_624_p_dout0;
output   grp_fu_624_p_ce;
output  [31:0] grp_fu_628_p_din0;
output  [17:0] grp_fu_628_p_din1;
input  [47:0] grp_fu_628_p_dout0;
output   grp_fu_628_p_ce;
output  [31:0] grp_fu_632_p_din0;
output  [17:0] grp_fu_632_p_din1;
input  [47:0] grp_fu_632_p_dout0;
output   grp_fu_632_p_ce;
output  [31:0] grp_fu_636_p_din0;
output  [17:0] grp_fu_636_p_din1;
input  [47:0] grp_fu_636_p_dout0;
output   grp_fu_636_p_ce;
output  [31:0] grp_fu_640_p_din0;
output  [17:0] grp_fu_640_p_din1;
input  [47:0] grp_fu_640_p_dout0;
output   grp_fu_640_p_ce;
output  [31:0] grp_fu_644_p_din0;
output  [17:0] grp_fu_644_p_din1;
input  [47:0] grp_fu_644_p_dout0;
output   grp_fu_644_p_ce;

reg ap_idle;
reg e_out_real_V_4_ce0;
reg e_out_real_V_5_ce0;
reg e_out_real_V_6_ce0;
reg e_out_real_V_7_ce0;
reg e_out_imag_V_4_ce0;
reg e_out_imag_V_5_ce0;
reg e_out_imag_V_6_ce0;
reg e_out_imag_V_7_ce0;
reg out_real_2_ce0;
reg out_real_2_we0;
reg out_real_3_ce0;
reg out_real_3_we0;
reg out_imag_2_ce0;
reg out_imag_2_we0;
reg out_imag_3_ce0;
reg out_imag_3_we0;
reg out_real_4_ce0;
reg out_real_4_we0;
reg out_imag_4_ce0;
reg out_imag_4_we0;
reg out_imag_5_ce0;
reg out_imag_5_we0;
reg out_real_6_ce0;
reg out_real_6_we0;
reg out_imag_6_ce0;
reg out_imag_6_we0;
reg out_imag_7_ce0;
reg out_imag_7_we0;
reg out_imag_1_ce0;
reg out_imag_1_we0;
reg out_imag_0_ce0;
reg out_imag_0_we0;
reg out_real_7_ce0;
reg out_real_7_we0;
reg out_real_5_ce0;
reg out_real_5_we0;
reg out_real_1_ce0;
reg out_real_1_we0;
reg out_real_0_ce0;
reg out_real_0_we0;
reg o1_out_real_V_ce0;
reg o1_out_real_V_1_ce0;
reg o1_out_real_V_2_ce0;
reg o1_out_real_V_3_ce0;
reg o1_out_imag_V_ce0;
reg o1_out_imag_V_1_ce0;
reg o1_out_imag_V_2_ce0;
reg o1_out_imag_V_3_ce0;
reg o2_out_real_V_ce0;
reg o2_out_real_V_1_ce0;
reg o2_out_real_V_2_ce0;
reg o2_out_real_V_3_ce0;
reg o2_out_imag_V_ce0;
reg o2_out_imag_V_1_ce0;
reg o2_out_imag_V_2_ce0;
reg o2_out_imag_V_3_ce0;
reg e_out_real_V_ce0;
reg e_out_real_V_1_ce0;
reg e_out_real_V_2_ce0;
reg e_out_real_V_3_ce0;
reg e_out_imag_V_ce0;
reg e_out_imag_V_1_ce0;
reg e_out_imag_V_2_ce0;
reg e_out_imag_V_3_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln281_reg_1251;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg   [5:0] TWIDDLE_REAL_V_address0;
reg    TWIDDLE_REAL_V_ce0;
wire   [17:0] TWIDDLE_REAL_V_q0;
reg   [5:0] TWIDDLE_IMAG_V_address0;
reg    TWIDDLE_IMAG_V_ce0;
wire   [17:0] TWIDDLE_IMAG_V_q0;
reg   [17:0] reg_816;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [17:0] reg_820;
reg   [4:0] k_1_reg_1242;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln281_fu_832_p2;
wire   [63:0] zext_ln286_fu_854_p1;
reg   [63:0] zext_ln286_reg_1265;
wire   [2:0] trunc_ln281_fu_879_p1;
reg   [2:0] trunc_ln281_reg_1365;
reg   [2:0] trunc_ln281_reg_1365_pp0_iter1_reg;
reg   [1:0] lshr_ln286_cast_reg_1380;
wire   [31:0] b_real_V_fu_917_p6;
reg   [31:0] b_real_V_reg_1388;
wire   [31:0] b_imag_V_fu_931_p6;
reg   [31:0] b_imag_V_reg_1393;
wire   [31:0] b_real_V_1_fu_945_p6;
reg   [31:0] b_real_V_1_reg_1398;
wire   [31:0] b_imag_V_1_fu_959_p6;
reg   [31:0] b_imag_V_1_reg_1403;
reg   [0:0] tmp_reg_1408;
reg   [0:0] tmp_reg_1408_pp0_iter1_reg;
wire  signed [47:0] sext_ln1273_fu_980_p1;
reg  signed [47:0] sext_ln1273_reg_1412;
wire  signed [47:0] sext_ln1273_1_fu_983_p1;
reg  signed [47:0] sext_ln1273_1_reg_1418;
wire  signed [47:0] sext_ln1273_2_fu_987_p1;
reg  signed [47:0] sext_ln1273_2_reg_1424;
wire  signed [47:0] sext_ln1273_3_fu_990_p1;
reg  signed [47:0] sext_ln1273_3_reg_1430;
reg   [47:0] mul_ln813_reg_1436;
wire    ap_block_pp0_stage3_11001;
reg   [47:0] mul_ln1348_reg_1441;
reg   [31:0] r_real_V_8_reg_1446;
wire    ap_block_pp0_stage4_11001;
reg   [47:0] mul_ln813_1_reg_1452;
reg   [47:0] mul_ln1347_reg_1457;
wire  signed [47:0] sext_ln1273_4_fu_1028_p1;
reg  signed [47:0] sext_ln1273_4_reg_1462;
wire  signed [47:0] sext_ln1273_5_fu_1031_p1;
reg  signed [47:0] sext_ln1273_5_reg_1468;
wire  signed [47:0] sext_ln1273_6_fu_1035_p1;
reg  signed [47:0] sext_ln1273_6_reg_1474;
wire  signed [47:0] sext_ln1273_7_fu_1038_p1;
reg  signed [47:0] sext_ln1273_7_reg_1480;
reg   [31:0] r_imag_V_11_reg_1486;
reg   [47:0] mul_ln813_2_reg_1492;
reg   [47:0] mul_ln1348_1_reg_1497;
reg   [47:0] mul_ln813_3_reg_1582;
reg   [47:0] mul_ln1347_1_reg_1587;
wire   [31:0] b_real_V_3_fu_1090_p2;
reg   [31:0] b_real_V_3_reg_1592;
wire   [31:0] a_real_V_6_fu_1095_p2;
reg   [31:0] a_real_V_6_reg_1598;
wire   [31:0] a_real_V_1_fu_1100_p6;
reg   [31:0] a_real_V_1_reg_1604;
wire   [31:0] a_imag_V_1_fu_1113_p6;
reg   [31:0] a_imag_V_1_reg_1610;
wire   [31:0] a_real_V_3_fu_1126_p6;
reg   [31:0] a_real_V_3_reg_1616;
wire   [31:0] a_imag_V_3_fu_1139_p6;
reg   [31:0] a_imag_V_3_reg_1622;
wire   [31:0] b_imag_V_3_fu_1166_p2;
reg   [31:0] b_imag_V_3_reg_1628;
wire   [31:0] a_imag_V_2_fu_1171_p2;
reg   [31:0] a_imag_V_2_reg_1634;
wire   [63:0] zext_ln292_fu_1182_p1;
reg   [63:0] zext_ln292_reg_1640;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln281_fu_844_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln79_fu_902_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
reg   [4:0] k_fu_146;
wire   [4:0] add_ln281_fu_838_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_k_1;
wire   [31:0] r_real_V_fu_1176_p2;
wire   [31:0] r_imag_V_6_fu_1193_p2;
wire   [31:0] r_real_V_6_fu_1199_p2;
wire   [31:0] r_imag_V_9_fu_1205_p2;
wire   [31:0] r_imag_V_fu_1211_p2;
wire   [31:0] r_real_V_5_fu_1217_p2;
wire   [31:0] r_imag_V_7_fu_1223_p2;
wire   [31:0] r_real_V_7_fu_1229_p2;
wire   [1:0] trunc_ln281_1_fu_850_p1;
wire   [3:0] trunc_ln284_fu_885_p1;
wire   [5:0] shl_ln2_fu_888_p3;
wire   [5:0] zext_ln281_1_fu_882_p1;
wire   [5:0] sub_ln284_fu_896_p2;
wire   [1:0] b_real_V_fu_917_p5;
wire   [1:0] b_imag_V_fu_931_p5;
wire   [1:0] b_real_V_1_fu_945_p5;
wire   [1:0] b_imag_V_1_fu_959_p5;
wire    ap_block_pp0_stage4;
wire   [47:0] ret_V_fu_1014_p2;
wire   [47:0] ret_V_1_fu_1054_p2;
wire   [47:0] ret_V_2_fu_1076_p2;
wire   [31:0] r_real_V_9_fu_1080_p4;
wire   [47:0] ret_V_3_fu_1152_p2;
wire   [31:0] r_imag_V_12_fu_1156_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_REAL_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_REAL_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_REAL_V_address0),
    .ce0(TWIDDLE_REAL_V_ce0),
    .q0(TWIDDLE_REAL_V_q0)
);

sr_fft_fft_16pt_Pipeline_VITIS_LOOP_131_2_TWIDDLE_IMAG_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
TWIDDLE_IMAG_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(TWIDDLE_IMAG_V_address0),
    .ce0(TWIDDLE_IMAG_V_ce0),
    .q0(TWIDDLE_IMAG_V_q0)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U505(
    .din0(o1_out_real_V_q0),
    .din1(o1_out_real_V_1_q0),
    .din2(o1_out_real_V_2_q0),
    .din3(o1_out_real_V_3_q0),
    .din4(b_real_V_fu_917_p5),
    .dout(b_real_V_fu_917_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U506(
    .din0(o1_out_imag_V_q0),
    .din1(o1_out_imag_V_1_q0),
    .din2(o1_out_imag_V_2_q0),
    .din3(o1_out_imag_V_3_q0),
    .din4(b_imag_V_fu_931_p5),
    .dout(b_imag_V_fu_931_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U507(
    .din0(o2_out_real_V_q0),
    .din1(o2_out_real_V_1_q0),
    .din2(o2_out_real_V_2_q0),
    .din3(o2_out_real_V_3_q0),
    .din4(b_real_V_1_fu_945_p5),
    .dout(b_real_V_1_fu_945_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U508(
    .din0(o2_out_imag_V_q0),
    .din1(o2_out_imag_V_1_q0),
    .din2(o2_out_imag_V_2_q0),
    .din3(o2_out_imag_V_3_q0),
    .din4(b_imag_V_1_fu_959_p5),
    .dout(b_imag_V_1_fu_959_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U517(
    .din0(e_out_real_V_q0),
    .din1(e_out_real_V_1_q0),
    .din2(e_out_real_V_2_q0),
    .din3(e_out_real_V_3_q0),
    .din4(lshr_ln286_cast_reg_1380),
    .dout(a_real_V_1_fu_1100_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U518(
    .din0(e_out_imag_V_q0),
    .din1(e_out_imag_V_1_q0),
    .din2(e_out_imag_V_2_q0),
    .din3(e_out_imag_V_3_q0),
    .din4(lshr_ln286_cast_reg_1380),
    .dout(a_imag_V_1_fu_1113_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U519(
    .din0(e_out_real_V_4_q0),
    .din1(e_out_real_V_5_q0),
    .din2(e_out_real_V_6_q0),
    .din3(e_out_real_V_7_q0),
    .din4(lshr_ln286_cast_reg_1380),
    .dout(a_real_V_3_fu_1126_p6)
);

sr_fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U520(
    .din0(e_out_imag_V_4_q0),
    .din1(e_out_imag_V_5_q0),
    .din2(e_out_imag_V_6_q0),
    .din3(e_out_imag_V_7_q0),
    .din4(lshr_ln286_cast_reg_1380),
    .dout(a_imag_V_3_fu_1139_p6)
);

sr_fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln281_fu_832_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_146 <= add_ln281_fu_838_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_146 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_imag_V_1_reg_1610 <= a_imag_V_1_fu_1113_p6;
        a_imag_V_3_reg_1622 <= a_imag_V_3_fu_1139_p6;
        a_real_V_1_reg_1604 <= a_real_V_1_fu_1100_p6;
        a_real_V_3_reg_1616 <= a_real_V_3_fu_1126_p6;
        a_real_V_6_reg_1598 <= a_real_V_6_fu_1095_p2;
        b_real_V_3_reg_1592 <= b_real_V_3_fu_1090_p2;
        mul_ln1347_1_reg_1587 <= grp_fu_640_p_dout0;
        mul_ln813_3_reg_1582 <= grp_fu_636_p_dout0;
        tmp_reg_1408_pp0_iter1_reg <= tmp_reg_1408;
        trunc_ln281_reg_1365_pp0_iter1_reg <= trunc_ln281_reg_1365;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_imag_V_2_reg_1634 <= a_imag_V_2_fu_1171_p2;
        b_imag_V_3_reg_1628 <= b_imag_V_3_fu_1166_p2;
        zext_ln292_reg_1640[2 : 0] <= zext_ln292_fu_1182_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_imag_V_1_reg_1403 <= b_imag_V_1_fu_959_p6;
        b_imag_V_reg_1393 <= b_imag_V_fu_931_p6;
        b_real_V_1_reg_1398 <= b_real_V_1_fu_945_p6;
        b_real_V_reg_1388 <= b_real_V_fu_917_p6;
        lshr_ln286_cast_reg_1380 <= {{k_1_reg_1242[3:2]}};
        tmp_reg_1408 <= k_1_reg_1242[32'd3];
        trunc_ln281_reg_1365 <= trunc_ln281_fu_879_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln281_reg_1251 <= icmp_ln281_fu_832_p2;
        k_1_reg_1242 <= ap_sig_allocacmp_k_1;
        mul_ln1348_1_reg_1497 <= grp_fu_632_p_dout0;
        mul_ln813_2_reg_1492 <= grp_fu_628_p_dout0;
        r_imag_V_11_reg_1486 <= {{ret_V_1_fu_1054_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln1347_reg_1457 <= grp_fu_624_p_dout0;
        mul_ln813_1_reg_1452 <= grp_fu_620_p_dout0;
        r_real_V_8_reg_1446 <= {{ret_V_fu_1014_p2[47:16]}};
        sext_ln1273_4_reg_1462 <= sext_ln1273_4_fu_1028_p1;
        sext_ln1273_5_reg_1468 <= sext_ln1273_5_fu_1031_p1;
        sext_ln1273_6_reg_1474 <= sext_ln1273_6_fu_1035_p1;
        sext_ln1273_7_reg_1480 <= sext_ln1273_7_fu_1038_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln1348_reg_1441 <= grp_fu_616_p_dout0;
        mul_ln813_reg_1436 <= grp_fu_644_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_816 <= TWIDDLE_REAL_V_q0;
        reg_820 <= TWIDDLE_IMAG_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln281_reg_1251 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sext_ln1273_1_reg_1418 <= sext_ln1273_1_fu_983_p1;
        sext_ln1273_2_reg_1424 <= sext_ln1273_2_fu_987_p1;
        sext_ln1273_3_reg_1430 <= sext_ln1273_3_fu_990_p1;
        sext_ln1273_reg_1412 <= sext_ln1273_fu_980_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln281_fu_832_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln286_reg_1265[1 : 0] <= zext_ln286_fu_854_p1[1 : 0];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln79_fu_902_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_IMAG_V_address0 = zext_ln281_fu_844_p1;
        end else begin
            TWIDDLE_IMAG_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_IMAG_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_IMAG_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_IMAG_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            TWIDDLE_REAL_V_address0 = zext_ln79_fu_902_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            TWIDDLE_REAL_V_address0 = zext_ln281_fu_844_p1;
        end else begin
            TWIDDLE_REAL_V_address0 = 'bx;
        end
    end else begin
        TWIDDLE_REAL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        TWIDDLE_REAL_V_ce0 = 1'b1;
    end else begin
        TWIDDLE_REAL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln281_reg_1251 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_146;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_1_ce0 = 1'b1;
    end else begin
        e_out_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_2_ce0 = 1'b1;
    end else begin
        e_out_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_3_ce0 = 1'b1;
    end else begin
        e_out_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_4_ce0 = 1'b1;
    end else begin
        e_out_imag_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_5_ce0 = 1'b1;
    end else begin
        e_out_imag_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_6_ce0 = 1'b1;
    end else begin
        e_out_imag_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_7_ce0 = 1'b1;
    end else begin
        e_out_imag_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_imag_V_ce0 = 1'b1;
    end else begin
        e_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_1_ce0 = 1'b1;
    end else begin
        e_out_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_2_ce0 = 1'b1;
    end else begin
        e_out_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_3_ce0 = 1'b1;
    end else begin
        e_out_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_4_ce0 = 1'b1;
    end else begin
        e_out_real_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_5_ce0 = 1'b1;
    end else begin
        e_out_real_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_6_ce0 = 1'b1;
    end else begin
        e_out_real_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_7_ce0 = 1'b1;
    end else begin
        e_out_real_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_out_real_V_ce0 = 1'b1;
    end else begin
        e_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_1_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_2_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_3_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_imag_V_ce0 = 1'b1;
    end else begin
        o1_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_1_ce0 = 1'b1;
    end else begin
        o1_out_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_2_ce0 = 1'b1;
    end else begin
        o1_out_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_3_ce0 = 1'b1;
    end else begin
        o1_out_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o1_out_real_V_ce0 = 1'b1;
    end else begin
        o1_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_1_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_2_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_3_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_imag_V_ce0 = 1'b1;
    end else begin
        o2_out_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_1_ce0 = 1'b1;
    end else begin
        o2_out_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_2_ce0 = 1'b1;
    end else begin
        o2_out_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_3_ce0 = 1'b1;
    end else begin
        o2_out_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        o2_out_real_V_ce0 = 1'b1;
    end else begin
        o2_out_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_0_ce0 = 1'b1;
    end else begin
        out_imag_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_0_we0 = 1'b1;
    end else begin
        out_imag_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_1_ce0 = 1'b1;
    end else begin
        out_imag_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_1_we0 = 1'b1;
    end else begin
        out_imag_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_2_ce0 = 1'b1;
    end else begin
        out_imag_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_2_we0 = 1'b1;
    end else begin
        out_imag_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_3_ce0 = 1'b1;
    end else begin
        out_imag_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_3_we0 = 1'b1;
    end else begin
        out_imag_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_4_ce0 = 1'b1;
    end else begin
        out_imag_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_4_we0 = 1'b1;
    end else begin
        out_imag_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_5_ce0 = 1'b1;
    end else begin
        out_imag_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_imag_5_we0 = 1'b1;
    end else begin
        out_imag_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_6_ce0 = 1'b1;
    end else begin
        out_imag_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_6_we0 = 1'b1;
    end else begin
        out_imag_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_7_ce0 = 1'b1;
    end else begin
        out_imag_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_imag_7_we0 = 1'b1;
    end else begin
        out_imag_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_0_ce0 = 1'b1;
    end else begin
        out_real_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_0_we0 = 1'b1;
    end else begin
        out_real_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_1_ce0 = 1'b1;
    end else begin
        out_real_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_1_we0 = 1'b1;
    end else begin
        out_real_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_2_ce0 = 1'b1;
    end else begin
        out_real_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_2_we0 = 1'b1;
    end else begin
        out_real_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_3_ce0 = 1'b1;
    end else begin
        out_real_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_3_we0 = 1'b1;
    end else begin
        out_real_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_4_ce0 = 1'b1;
    end else begin
        out_real_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_4_we0 = 1'b1;
    end else begin
        out_real_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_5_ce0 = 1'b1;
    end else begin
        out_real_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        out_real_5_we0 = 1'b1;
    end else begin
        out_real_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_6_ce0 = 1'b1;
    end else begin
        out_real_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_6_we0 = 1'b1;
    end else begin
        out_real_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_7_ce0 = 1'b1;
    end else begin
        out_real_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_1408_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        out_real_7_we0 = 1'b1;
    end else begin
        out_real_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_imag_V_2_fu_1171_p2 = (r_imag_V_11_reg_1486 - r_imag_V_12_fu_1156_p4);

assign a_real_V_6_fu_1095_p2 = (r_real_V_8_reg_1446 - r_real_V_9_fu_1080_p4);

assign add_ln281_fu_838_p2 = (ap_sig_allocacmp_k_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign b_imag_V_1_fu_959_p5 = {{k_1_reg_1242[3:2]}};

assign b_imag_V_3_fu_1166_p2 = (r_imag_V_12_fu_1156_p4 + r_imag_V_11_reg_1486);

assign b_imag_V_fu_931_p5 = {{k_1_reg_1242[3:2]}};

assign b_real_V_1_fu_945_p5 = {{k_1_reg_1242[3:2]}};

assign b_real_V_3_fu_1090_p2 = (r_real_V_9_fu_1080_p4 + r_real_V_8_reg_1446);

assign b_real_V_fu_917_p5 = {{k_1_reg_1242[3:2]}};

assign e_out_imag_V_1_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_2_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_3_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_4_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_5_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_6_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_7_address0 = zext_ln286_reg_1265;

assign e_out_imag_V_address0 = zext_ln286_reg_1265;

assign e_out_real_V_1_address0 = zext_ln286_reg_1265;

assign e_out_real_V_2_address0 = zext_ln286_reg_1265;

assign e_out_real_V_3_address0 = zext_ln286_reg_1265;

assign e_out_real_V_4_address0 = zext_ln286_reg_1265;

assign e_out_real_V_5_address0 = zext_ln286_reg_1265;

assign e_out_real_V_6_address0 = zext_ln286_reg_1265;

assign e_out_real_V_7_address0 = zext_ln286_reg_1265;

assign e_out_real_V_address0 = zext_ln286_reg_1265;

assign grp_fu_616_p_ce = 1'b1;

assign grp_fu_616_p_din0 = sext_ln1273_2_fu_987_p1;

assign grp_fu_616_p_din1 = sext_ln1273_3_fu_990_p1;

assign grp_fu_620_p_ce = 1'b1;

assign grp_fu_620_p_din0 = sext_ln1273_reg_1412;

assign grp_fu_620_p_din1 = sext_ln1273_3_reg_1430;

assign grp_fu_624_p_ce = 1'b1;

assign grp_fu_624_p_din0 = sext_ln1273_2_reg_1424;

assign grp_fu_624_p_din1 = sext_ln1273_1_reg_1418;

assign grp_fu_628_p_ce = 1'b1;

assign grp_fu_628_p_din0 = sext_ln1273_4_fu_1028_p1;

assign grp_fu_628_p_din1 = sext_ln1273_5_fu_1031_p1;

assign grp_fu_632_p_ce = 1'b1;

assign grp_fu_632_p_din0 = sext_ln1273_6_fu_1035_p1;

assign grp_fu_632_p_din1 = sext_ln1273_7_fu_1038_p1;

assign grp_fu_636_p_ce = 1'b1;

assign grp_fu_636_p_din0 = sext_ln1273_4_reg_1462;

assign grp_fu_636_p_din1 = sext_ln1273_7_reg_1480;

assign grp_fu_640_p_ce = 1'b1;

assign grp_fu_640_p_din0 = sext_ln1273_6_reg_1474;

assign grp_fu_640_p_din1 = sext_ln1273_5_reg_1468;

assign grp_fu_644_p_ce = 1'b1;

assign grp_fu_644_p_din0 = sext_ln1273_fu_980_p1;

assign grp_fu_644_p_din1 = sext_ln1273_1_fu_983_p1;

assign icmp_ln281_fu_832_p2 = ((ap_sig_allocacmp_k_1 == 5'd16) ? 1'b1 : 1'b0);

assign o1_out_imag_V_1_address0 = zext_ln286_fu_854_p1;

assign o1_out_imag_V_2_address0 = zext_ln286_fu_854_p1;

assign o1_out_imag_V_3_address0 = zext_ln286_fu_854_p1;

assign o1_out_imag_V_address0 = zext_ln286_fu_854_p1;

assign o1_out_real_V_1_address0 = zext_ln286_fu_854_p1;

assign o1_out_real_V_2_address0 = zext_ln286_fu_854_p1;

assign o1_out_real_V_3_address0 = zext_ln286_fu_854_p1;

assign o1_out_real_V_address0 = zext_ln286_fu_854_p1;

assign o2_out_imag_V_1_address0 = zext_ln286_fu_854_p1;

assign o2_out_imag_V_2_address0 = zext_ln286_fu_854_p1;

assign o2_out_imag_V_3_address0 = zext_ln286_fu_854_p1;

assign o2_out_imag_V_address0 = zext_ln286_fu_854_p1;

assign o2_out_real_V_1_address0 = zext_ln286_fu_854_p1;

assign o2_out_real_V_2_address0 = zext_ln286_fu_854_p1;

assign o2_out_real_V_3_address0 = zext_ln286_fu_854_p1;

assign o2_out_real_V_address0 = zext_ln286_fu_854_p1;

assign out_imag_0_address0 = zext_ln292_reg_1640;

assign out_imag_0_d0 = r_imag_V_fu_1211_p2;

assign out_imag_1_address0 = zext_ln292_reg_1640;

assign out_imag_1_d0 = r_imag_V_fu_1211_p2;

assign out_imag_2_address0 = zext_ln292_fu_1182_p1;

assign out_imag_2_d0 = r_imag_V_6_fu_1193_p2;

assign out_imag_3_address0 = zext_ln292_fu_1182_p1;

assign out_imag_3_d0 = r_imag_V_6_fu_1193_p2;

assign out_imag_4_address0 = zext_ln292_reg_1640;

assign out_imag_4_d0 = r_imag_V_7_fu_1223_p2;

assign out_imag_5_address0 = zext_ln292_reg_1640;

assign out_imag_5_d0 = r_imag_V_7_fu_1223_p2;

assign out_imag_6_address0 = zext_ln292_fu_1182_p1;

assign out_imag_6_d0 = r_imag_V_9_fu_1205_p2;

assign out_imag_7_address0 = zext_ln292_fu_1182_p1;

assign out_imag_7_d0 = r_imag_V_9_fu_1205_p2;

assign out_real_0_address0 = zext_ln292_fu_1182_p1;

assign out_real_0_d0 = r_real_V_fu_1176_p2;

assign out_real_1_address0 = zext_ln292_fu_1182_p1;

assign out_real_1_d0 = r_real_V_fu_1176_p2;

assign out_real_2_address0 = zext_ln292_reg_1640;

assign out_real_2_d0 = r_real_V_5_fu_1217_p2;

assign out_real_3_address0 = zext_ln292_reg_1640;

assign out_real_3_d0 = r_real_V_5_fu_1217_p2;

assign out_real_4_address0 = zext_ln292_fu_1182_p1;

assign out_real_4_d0 = r_real_V_6_fu_1199_p2;

assign out_real_5_address0 = zext_ln292_fu_1182_p1;

assign out_real_5_d0 = r_real_V_6_fu_1199_p2;

assign out_real_6_address0 = zext_ln292_reg_1640;

assign out_real_6_d0 = r_real_V_7_fu_1229_p2;

assign out_real_7_address0 = zext_ln292_reg_1640;

assign out_real_7_d0 = r_real_V_7_fu_1229_p2;

assign r_imag_V_12_fu_1156_p4 = {{ret_V_3_fu_1152_p2[47:16]}};

assign r_imag_V_6_fu_1193_p2 = (a_imag_V_3_reg_1622 - a_real_V_6_reg_1598);

assign r_imag_V_7_fu_1223_p2 = (a_imag_V_1_reg_1610 - b_imag_V_3_reg_1628);

assign r_imag_V_9_fu_1205_p2 = (a_imag_V_3_reg_1622 + a_real_V_6_reg_1598);

assign r_imag_V_fu_1211_p2 = (a_imag_V_1_reg_1610 + b_imag_V_3_reg_1628);

assign r_real_V_5_fu_1217_p2 = (a_real_V_3_reg_1616 + a_imag_V_2_reg_1634);

assign r_real_V_6_fu_1199_p2 = (a_real_V_1_reg_1604 - b_real_V_3_reg_1592);

assign r_real_V_7_fu_1229_p2 = (a_real_V_3_reg_1616 - a_imag_V_2_reg_1634);

assign r_real_V_9_fu_1080_p4 = {{ret_V_2_fu_1076_p2[47:16]}};

assign r_real_V_fu_1176_p2 = (a_real_V_1_reg_1604 + b_real_V_3_reg_1592);

assign ret_V_1_fu_1054_p2 = (mul_ln1347_reg_1457 + mul_ln813_1_reg_1452);

assign ret_V_2_fu_1076_p2 = (mul_ln813_2_reg_1492 - mul_ln1348_1_reg_1497);

assign ret_V_3_fu_1152_p2 = (mul_ln1347_1_reg_1587 + mul_ln813_3_reg_1582);

assign ret_V_fu_1014_p2 = (mul_ln813_reg_1436 - mul_ln1348_reg_1441);

assign sext_ln1273_1_fu_983_p1 = $signed(reg_816);

assign sext_ln1273_2_fu_987_p1 = $signed(b_imag_V_reg_1393);

assign sext_ln1273_3_fu_990_p1 = $signed(reg_820);

assign sext_ln1273_4_fu_1028_p1 = $signed(b_real_V_1_reg_1398);

assign sext_ln1273_5_fu_1031_p1 = $signed(reg_816);

assign sext_ln1273_6_fu_1035_p1 = $signed(b_imag_V_1_reg_1403);

assign sext_ln1273_7_fu_1038_p1 = $signed(reg_820);

assign sext_ln1273_fu_980_p1 = $signed(b_real_V_reg_1388);

assign shl_ln2_fu_888_p3 = {{trunc_ln284_fu_885_p1}, {2'd0}};

assign sub_ln284_fu_896_p2 = (shl_ln2_fu_888_p3 - zext_ln281_1_fu_882_p1);

assign trunc_ln281_1_fu_850_p1 = ap_sig_allocacmp_k_1[1:0];

assign trunc_ln281_fu_879_p1 = k_1_reg_1242[2:0];

assign trunc_ln284_fu_885_p1 = k_1_reg_1242[3:0];

assign zext_ln281_1_fu_882_p1 = k_1_reg_1242;

assign zext_ln281_fu_844_p1 = ap_sig_allocacmp_k_1;

assign zext_ln286_fu_854_p1 = trunc_ln281_1_fu_850_p1;

assign zext_ln292_fu_1182_p1 = trunc_ln281_reg_1365_pp0_iter1_reg;

assign zext_ln79_fu_902_p1 = sub_ln284_fu_896_p2;

always @ (posedge ap_clk) begin
    zext_ln286_reg_1265[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln292_reg_1640[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //sr_fft_fft_64pt_Pipeline_VITIS_LOOP_281_3
